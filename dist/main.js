!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=12)}([function(t,e,n){"use strict";var r=function(t,e,n){return t.fields=e||[],t.fname=n,t};function i(t){return null==t?null:t.fname}function a(t){return null==t?null:t.fields}var u=function(t){throw Error(t)},o=function(t){var e,n,r,i=[],a=null,o=0,s=t.length,l="";function c(){i.push(l+t.substring(e,n)),l="",e=n+1}for(t+="",e=n=0;n<s;++n)if("\\"===(r=t[n]))l+=t.substring(e,n),e=++n;else if(r===a)c(),a=null,o=-1;else{if(a)continue;e===o&&'"'===r?(e=n+1,a=r):e===o&&"'"===r?(e=n+1,a=r):"."!==r||o?"["===r?(n>e&&c(),o=e=n+1):"]"===r&&(o||u("Access path missing open bracket: "+t),o>0&&c(),o=0,e=n+1):n>e?c():e=n+1}return o&&u("Access path missing closing bracket: "+t),a&&u("Access path missing closing quote: "+t),n>e&&(n++,c()),i},s=Array.isArray,l=function(t){return t===Object(t)},c=function(t){return"string"==typeof t};function f(t){return s(t)?"["+t.map(f)+"]":l(t)||c(t)?JSON.stringify(t).replace("\u2028","\\u2028").replace("\u2029","\\u2029"):t}var h=function(t,e){var n=o(t),i="return _["+n.map(f).join("][")+"];";return r(Function("_",i),[t=1===n.length?n[0]:t],e||t)},d=[],p=h("id"),g=r((function(t){return t}),d,"identity"),m=r((function(){return 0}),d,"zero"),v=r((function(){return 1}),d,"one"),y=r((function(){return!0}),d,"true"),b=r((function(){return!1}),d,"false");function _(t,e,n){var r=[e].concat([].slice.call(n));console[t].apply(console,r)}var x=function(t,e){var n=t||0;return{level:function(t){return arguments.length?(n=+t,this):n},error:function(){return n>=1&&_(e||"error","ERROR",arguments),this},warn:function(){return n>=2&&_(e||"warn","WARN",arguments),this},info:function(){return n>=3&&_(e||"log","INFO",arguments),this},debug:function(){return n>=4&&_(e||"log","DEBUG",arguments),this}}};function w(...t){return t.reduce((t,e)=>{for(var n in e)if("signals"===n)t.signals=O(t.signals,e.signals);else{var r="legend"===n?{layout:1}:"style"===n||null;A(t,n,e[n],r)}return t},{})}function A(t,e,n,r){var i,a;if(l(n)&&!s(n))for(i in a=l(t[e])?t[e]:t[e]={},n)r&&(!0===r||r[i])?A(a,i,n[i]):a[i]=n[i];else t[e]=n}function O(t,e){if(null==t)return e;const n={},r=[];function i(t){n[t.name]||(n[t.name]=1,r.push(t))}return e.forEach(i),t.forEach(i),r}var M=function(t){return t[t.length-1]},k=function(t){return null==t||""===t?null:+t};function E(t){return function(e){return t*Math.exp(e)}}function j(t){return function(e){return Math.log(t*e)}}function D(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function C(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function F(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function S(t,e,n,r){var i=n(t[0]),a=n(M(t)),u=(a-i)*e;return[r(i-u),r(a-u)]}function B(t,e){return S(t,e,k,g)}function T(t,e){var n=Math.sign(t[0]);return S(t,e,j(n),E(n))}function R(t,e,n){return S(t,e,F(n),F(1/n))}function z(t,e,n){return S(t,e,D(n),C(n))}function N(t,e,n,r,i){var a=r(t[0]),u=r(M(t)),o=null!=e?r(e):(a+u)/2;return[i(o+(a-o)*n),i(o+(u-o)*n)]}function P(t,e,n){return N(t,e,n,k,g)}function L(t,e,n){var r=Math.sign(t[0]);return N(t,e,n,j(r),E(r))}function U(t,e,n,r){return N(t,e,n,F(r),F(1/r))}function q(t,e,n,r){return N(t,e,n,D(r),C(r))}function I(t){return 1+~~(new Date(t).getMonth()/3)}function $(t){return 1+~~(new Date(t).getUTCMonth()/3)}var Y=function(t){return null!=t?s(t)?t:[t]:[]},W=function(t,e,n){var r,i=t[0],a=t[1];return a<i&&(r=a,a=i,i=r),(r=a-i)>=n-e?[e,n]:[i=Math.min(Math.max(i,e),n-r),i+r]},V=function(t){return"function"==typeof t},H=function(t,e){var n,i,u,s,l,c,h,d,p,g=[],m=(t=Y(t)).map((function(t,e){return null==t?null:(g.push(e),V(t)?t:o(t).map(f).join("]["))})),v=g.length-1,y=Y(e),b="var u,v;return ";if(v<0)return null;for(i=0;i<=v;++i)u=m[n=g[i]],V(u)?(s="(u=this."+(c="f"+n)+"(a))",l="(v=this."+c+"(b))",(h=h||{})[c]=u):(s="(u=a["+u+"])",l="(v=b["+u+"])"),c="((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))","descending"!==y[n]?(p=1,d=-1):(p=-1,d=1),b+="("+s+"<"+l+"||u==null)&&v!=null?"+d+":(u>v||v==null)&&u!=null?"+p+":"+c+"!==u&&v===v?"+d+":v!==v&&u===u?"+p+(n<v?":":":0");return u=Function("a","b",b+";"),h&&(u=u.bind(h)),t=t.reduce((function(t,e){return V(e)?(a(e)||[]).forEach((function(e){t[e]=1})):null!=e&&(t[e+""]=1),t}),{}),r(u,Object.keys(t))},X=function(t){return V(t)?t:function(){return t}},G=function(t,e){var n,r;function i(){e(r),n=r=null}return function(e){r=e,n&&clearTimeout(n),n=setTimeout(i,t)}},Z=function(t){for(var e,n,r=1,i=arguments.length;r<i;++r)for(n in e=arguments[r])t[n]=e[n];return t},J=function(t,e){var n,r,i,a,u=0;if(t&&(n=t.length))if(null==e){for(r=t[u];null==r||r!=r;r=t[++u]);for(i=a=r;u<n;++u)null!=(r=t[u])&&(r<i&&(i=r),r>a&&(a=r))}else{for(r=e(t[u]);null==r||r!=r;r=e(t[++u]));for(i=a=r;u<n;++u)null!=(r=e(t[u]))&&(r<i&&(i=r),r>a&&(a=r))}return[i,a]},Q=function(t,e){var n,r,i,a,u,o=-1,s=t.length;if(null==e){for(;++o<s;)if(null!=(r=t[o])&&r>=r){n=i=r;break}for(a=u=o;++o<s;)null!=(r=t[o])&&(n>r&&(n=r,a=o),i<r&&(i=r,u=o))}else{for(;++o<s;)if(null!=(r=e(t[o],o,t))&&r>=r){n=i=r;break}for(a=u=o;++o<s;)null!=(r=e(t[o],o,t))&&(n>r&&(n=r,a=o),i<r&&(i=r,u=o))}return[a,u]};const K=Object.prototype.hasOwnProperty;var tt=function(t,e){return K.call(t,e)},et={},nt=function(t){var e,n,r={};function i(t){return tt(r,t)&&r[t]!==et}return e={size:0,empty:0,object:r,has:i,get:function(t){return i(t)?r[t]:void 0},set:function(t,n){return i(t)||(++e.size,r[t]===et&&--e.empty),r[t]=n,this},delete:function(t){return i(t)&&(--e.size,++e.empty,r[t]=et),this},clear:function(){e.size=e.empty=0,e.object=r={}},test:function(t){return arguments.length?(n=t,e):n},clean:function(){var t,i,a={},u=0;for(t in r)(i=r[t])===et||n&&n(i)||(a[t]=i,++u);e.size=u,e.empty=0,e.object=r=a}},t&&Object.keys(t).forEach((function(n){e.set(n,t[n])})),e},rt=function(t,e,n,r,i,a){if(!n&&0!==n)return a;var u,o,s=t[0],l=M(t),c=+n;return l<s&&(u=s,s=l,l=u),(u=Math.abs(e-s))<(o=Math.abs(l-e))&&u<=c?r:o<=c?i:a},it=function(t,e){var n=t.prototype=Object.create(e.prototype);return n.constructor=t,n},at=function(t,e,n,r){var i,a=e[0],u=e[e.length-1];return a>u&&(i=a,a=u,u=i),r=void 0===r||r,((n=void 0===n||n)?a<=t:a<t)&&(r?t<=u:t<u)},ut=function(t){return"boolean"==typeof t},ot=function(t){return"[object Date]"===Object.prototype.toString.call(t)},st=function(t){return"number"==typeof t},lt=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)},ct=function(t,e){t&&(t=e?Y(t).map((function(t){return t.replace(/\\(.)/g,"$1")})):Y(t));var n=t&&t.length?Function("_","return ''+"+t.map((function(t){return"_["+(e?f(t):o(t).map(f).join("]["))+"]"})).join("+'|'+")+";"):function(){return""};return r(n,t,"key")},ft=function(t,e){const n=t[0],r=M(t),i=+e;return i?1===i?r:n+i*(r-n):n},ht=function(t,e,n,r){var i=e.length,a=n.length;if(!a)return e;if(!i)return n;for(var u=r||new e.constructor(i+a),o=0,s=0,l=0;o<i&&s<a;++l)u[l]=t(e[o],n[s])>0?n[s++]:e[o++];for(;o<i;++o,++l)u[l]=e[o];for(;s<a;++s,++l)u[l]=n[s];return u},dt=function(t,e){for(var n="";--e>=0;)n+=t;return n},pt=function(t,e,n,r){var i=n||" ",a=t+"",u=e-a.length;return u<=0?a:"left"===r?dt(i,u)+a:"center"===r?dt(i,~~(u/2))+a+dt(i,Math.ceil(u/2)):a+dt(i,u)},gt=function(t){return t&&M(t)-t[0]||0},mt=function(t){return null==t||""===t?null:!(!t||"false"===t||"0"===t)&&!!t};function vt(t){return st(t)?t:ot(t)?t:Date.parse(t)}var yt=function(t,e){return e=e||vt,null==t||""===t?null:e(t)},bt=function(t){return null==t||""===t?null:t+""},_t=function(t){for(var e={},n=0,r=t.length;n<r;++n)e[t[n]]=!0;return e},xt=function(t,e,n,r){var i=null!=r?r:"â€¦",a=t+"",u=a.length,o=Math.max(0,e-i.length);return u<=e?a:"left"===n?i+a.slice(u-o):"center"===n?a.slice(0,Math.ceil(o/2))+i+a.slice(u-~~(o/2)):a.slice(0,o)+i},wt=function(t,e,n){if(t){var r,i=0,a=t.length;if(e)for(;i<a;++i)(r=e(t[i]))&&n(r,i,t);else t.forEach(n)}};n.d(e,"d",(function(){return r})),n.d(e,"f",(function(){return i})),n.d(e,"e",(function(){return a})),n.d(e,"u",(function(){return p})),n.d(e,"v",(function(){return g})),n.d(e,"fb",(function(){return m})),n.d(e,"L",(function(){return v})),n.d(e,"cb",(function(){return y})),n.d(e,"p",(function(){return b})),n.d(e,"I",(function(){return x})),n.d(e,"b",(function(){return 1})),n.d(e,"c",(function(){return 3})),n.d(e,"a",(function(){return 4})),n.d(e,"K",(function(){return w})),n.d(e,"N",(function(){return B})),n.d(e,"O",(function(){return T})),n.d(e,"P",(function(){return R})),n.d(e,"Q",(function(){return z})),n.d(e,"gb",(function(){return P})),n.d(e,"hb",(function(){return L})),n.d(e,"ib",(function(){return U})),n.d(e,"jb",(function(){return q})),n.d(e,"S",(function(){return I})),n.d(e,"db",(function(){return $})),n.d(e,"g",(function(){return Y})),n.d(e,"h",(function(){return W})),n.d(e,"i",(function(){return H})),n.d(e,"j",(function(){return X})),n.d(e,"k",(function(){return G})),n.d(e,"l",(function(){return u})),n.d(e,"m",(function(){return Z})),n.d(e,"n",(function(){return J})),n.d(e,"o",(function(){return Q})),n.d(e,"q",(function(){return nt})),n.d(e,"r",(function(){return h})),n.d(e,"s",(function(){return rt})),n.d(e,"t",(function(){return tt})),n.d(e,"w",(function(){return it})),n.d(e,"x",(function(){return at})),n.d(e,"y",(function(){return s})),n.d(e,"z",(function(){return ut})),n.d(e,"A",(function(){return ot})),n.d(e,"B",(function(){return V})),n.d(e,"C",(function(){return st})),n.d(e,"D",(function(){return l})),n.d(e,"E",(function(){return lt})),n.d(e,"F",(function(){return c})),n.d(e,"G",(function(){return ct})),n.d(e,"H",(function(){return ft})),n.d(e,"J",(function(){return ht})),n.d(e,"M",(function(){return pt})),n.d(e,"R",(function(){return M})),n.d(e,"T",(function(){return gt})),n.d(e,"U",(function(){return o})),n.d(e,"V",(function(){return f})),n.d(e,"W",(function(){return mt})),n.d(e,"X",(function(){return yt})),n.d(e,"Y",(function(){return k})),n.d(e,"ab",(function(){return bt})),n.d(e,"Z",(function(){return _t})),n.d(e,"bb",(function(){return xt})),n.d(e,"eb",(function(){return wt}))},,,function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return i}));var r=n(0);function i(e,n){const i=n&&n.property?Object(r.r)(n.property):r.v;return!Object(r.D)(e)||(a=e,"function"==typeof t&&Object(r.B)(t.isBuffer)&&t.isBuffer(a))?i(JSON.parse(e)):function(t,e){return e&&e.copy?JSON.parse(JSON.stringify(t)):t}(i(e));var a}i.responseType="json"}).call(this,n(7).Buffer)},,,function(t){t.exports=JSON.parse("{}")},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(9),i=n(10),a=n(11);function u(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=o(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(s.isBuffer(e)){var n=0|d(e.length);return 0===(t=o(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?o(t,0):h(t,e);if("Buffer"===e.type&&a(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(c(e),t=o(t,e<0?0:0|d(e)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|d(e.length);t=o(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function p(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return I(t).length;default:if(r)return q(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,n);case"utf8":case"utf-8":return k(this,e,n);case"ascii":return j(this,e,n);case"latin1":case"binary":return D(this,e,n);case"base64":return M(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=s.from(e,r)),s.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){var a,u=1,o=t.length,s=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,o/=2,s/=2,n/=2}function l(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(i){var c=-1;for(a=n;a<o;a++)if(l(t,a)===l(e,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===s)return c*u}else-1!==c&&(a-=a-c),c=-1}else for(n+s>o&&(n=o-s),a=n;a>=0;a--){for(var f=!0,h=0;h<s;h++)if(l(t,a+h)!==l(e,h)){f=!1;break}if(f)return a}return-1}function b(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var a=e.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var u=0;u<r;++u){var o=parseInt(e.substr(2*u,2),16);if(isNaN(o))return u;t[n+u]=o}return u}function _(t,e,n,r){return $(q(e,t.length-n),t,n,r)}function x(t,e,n,r){return $(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return x(t,e,n,r)}function A(t,e,n,r){return $(I(e),t,n,r)}function O(t,e,n,r){return $(function(t,e){for(var n,r,i,a=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,i=n%256,a.push(i),a.push(r);return a}(e,t.length-n),t,n,r)}function M(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function k(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var a,u,o,s,l=t[i],c=null,f=l>239?4:l>223?3:l>191?2:1;if(i+f<=n)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(a=t[i+1]))&&(s=(31&l)<<6|63&a)>127&&(c=s);break;case 3:a=t[i+1],u=t[i+2],128==(192&a)&&128==(192&u)&&(s=(15&l)<<12|(63&a)<<6|63&u)>2047&&(s<55296||s>57343)&&(c=s);break;case 4:a=t[i+1],u=t[i+2],o=t[i+3],128==(192&a)&&128==(192&u)&&128==(192&o)&&(s=(15&l)<<18|(63&a)<<12|(63&u)<<6|63&o)>65535&&s<1114112&&(c=s)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=f}return function(t){var e=t.length;if(e<=E)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=E));return n}(r)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=u(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,n){return l(null,t,e,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?o(t,e):void 0!==n?"string"==typeof r?o(t,e).fill(n,r):o(t,e).fill(n):o(t,e)}(null,t,e,n)},s.allocUnsafe=function(t){return f(null,t)},s.allocUnsafeSlow=function(t){return f(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,a=Math.min(n,r);i<a;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!a(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=s.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var u=t[n];if(!s.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,i),i+=u.length}return r},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):g.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,n,r,i){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(i>>>=0)-(r>>>=0),u=(n>>>=0)-(e>>>=0),o=Math.min(a,u),l=this.slice(r,i),c=t.slice(e,n),f=0;f<o;++f)if(l[f]!==c[f]){a=l[f],u=c[f];break}return a<u?-1:u<a?1:0},s.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},s.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},s.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},s.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return _(this,t,e,n);case"ascii":return x(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return A(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var E=4096;function j(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function D(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function C(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",a=e;a<n;++a)i+=U(t[a]);return i}function F(t,e,n){for(var r=t.slice(e,n),i="",a=0;a<r.length;a+=2)i+=String.fromCharCode(r[a]+256*r[a+1]);return i}function S(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function B(t,e,n,r,i,a){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function T(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,a=Math.min(t.length-n,2);i<a;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function R(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,a=Math.min(t.length-n,4);i<a;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function z(t,e,n,r,i,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function N(t,e,n,r,a){return a||z(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function P(t,e,n,r,a){return a||z(t,0,n,8),i.write(t,e,n,r,52,8),n+8}s.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=s.prototype;else{var i=e-t;n=new s(i,void 0);for(var a=0;a<i;++a)n[a]=this[a+t]}return n},s.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||S(t,e,this.length);for(var r=this[t],i=1,a=0;++a<e&&(i*=256);)r+=this[t+a]*i;return r},s.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||S(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},s.prototype.readUInt8=function(t,e){return e||S(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||S(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||S(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||S(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||S(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||S(t,e,this.length);for(var r=this[t],i=1,a=0;++a<e&&(i*=256);)r+=this[t+a]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},s.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||S(t,e,this.length);for(var r=e,i=1,a=this[t+--r];r>0&&(i*=256);)a+=this[t+--r]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*e)),a},s.prototype.readInt8=function(t,e){return e||S(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||S(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(t,e){e||S(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(t,e){return e||S(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||S(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||S(t,4,this.length),i.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||S(t,4,this.length),i.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||S(t,8,this.length),i.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||S(t,8,this.length),i.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||B(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,a=0;for(this[e]=255&t;++a<n&&(i*=256);)this[e+a]=t/i&255;return e+n},s.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||B(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,a=1;for(this[e+i]=255&t;--i>=0&&(a*=256);)this[e+i]=t/a&255;return e+n},s.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):T(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):T(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):R(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);B(this,t,e,n,i-1,-i)}var a=0,u=1,o=0;for(this[e]=255&t;++a<n&&(u*=256);)t<0&&0===o&&0!==this[e+a-1]&&(o=1),this[e+a]=(t/u>>0)-o&255;return e+n},s.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);B(this,t,e,n,i-1,-i)}var a=n-1,u=1,o=0;for(this[e+a]=255&t;--a>=0&&(u*=256);)t<0&&0===o&&0!==this[e+a+1]&&(o=1),this[e+a]=(t/u>>0)-o&255;return e+n},s.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):T(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):T(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):R(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,n){return N(this,t,e,!0,n)},s.prototype.writeFloatBE=function(t,e,n){return N(this,t,e,!1,n)},s.prototype.writeDoubleLE=function(t,e,n){return P(this,t,e,!0,n)},s.prototype.writeDoubleBE=function(t,e,n){return P(this,t,e,!1,n)},s.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,a=r-n;if(this===t&&n<e&&e<r)for(i=a-1;i>=0;--i)t[i+e]=this[i+n];else if(a<1e3||!s.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+a),e);return a},s.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var u=s.isBuffer(t)?t:q(new s(t,r).toString()),o=u.length;for(a=0;a<n-e;++a)this[a+e]=u[a%o]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function q(t,e){var n;e=e||1/0;for(var r=t.length,i=null,a=[],u=0;u<r;++u){if((n=t.charCodeAt(u))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&a.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&a.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function I(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function $(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(8))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=l(t),u=r[0],o=r[1],s=new a(function(t,e,n){return 3*(e+n)/4-n}(0,u,o)),c=0,f=o>0?u-4:u;for(n=0;n<f;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],s[c++]=e>>16&255,s[c++]=e>>8&255,s[c++]=255&e;2===o&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,s[c++]=255&e);1===o&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,s[c++]=e>>8&255,s[c++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,a=[],u=0,o=n-i;u<o;u+=16383)a.push(c(t,u,u+16383>o?o:u+16383));1===i?(e=t[n-1],a.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],a.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return a.join("")};for(var r=[],i=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,s=u.length;o<s;++o)r[o]=u[o],i[u.charCodeAt(o)]=o;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,n){for(var i,a,u=[],o=e;o<n;o+=3)i=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),u.push(r[(a=i)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return u.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var a,u,o=8*i-r-1,s=(1<<o)-1,l=s>>1,c=-7,f=n?i-1:0,h=n?-1:1,d=t[e+f];for(f+=h,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+t[e+f],f+=h,c-=8);for(u=a&(1<<-c)-1,a>>=-c,c+=r;c>0;u=256*u+t[e+f],f+=h,c-=8);if(0===a)a=1-l;else{if(a===s)return u?NaN:1/0*(d?-1:1);u+=Math.pow(2,r),a-=l}return(d?-1:1)*u*Math.pow(2,a-r)},e.write=function(t,e,n,r,i,a){var u,o,s,l=8*a-i-1,c=(1<<l)-1,f=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-u))<1&&(u--,s*=2),(e+=u+f>=1?h/s:h*Math.pow(2,1-f))*s>=2&&(u++,s/=2),u+f>=c?(o=0,u=c):u+f>=1?(o=(e*s-1)*Math.pow(2,i),u+=f):(o=e*Math.pow(2,f-1)*Math.pow(2,i),u=0));i>=8;t[n+d]=255&o,d+=p,o/=256,i-=8);for(u=u<<i|o,l+=i;l>0;t[n+d]=255&u,d+=p,u/=256,l-=8);t[n+d-p]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"aggregate",(function(){return Hr})),n.d(r,"bin",(function(){return Gr})),n.d(r,"collect",(function(){return Qr})),n.d(r,"compare",(function(){return Kr})),n.d(r,"countpattern",(function(){return ei})),n.d(r,"cross",(function(){return ri})),n.d(r,"density",(function(){return si})),n.d(r,"dotbin",(function(){return di})),n.d(r,"expression",(function(){return pi})),n.d(r,"extent",(function(){return mi})),n.d(r,"facet",(function(){return bi})),n.d(r,"field",(function(){return xi})),n.d(r,"filter",(function(){return Ai})),n.d(r,"flatten",(function(){return Oi})),n.d(r,"fold",(function(){return Mi})),n.d(r,"formula",(function(){return ki})),n.d(r,"generate",(function(){return Ei})),n.d(r,"impute",(function(){return Ci})),n.d(r,"joinaggregate",(function(){return Fi})),n.d(r,"kde",(function(){return Bi})),n.d(r,"key",(function(){return Ti})),n.d(r,"load",(function(){return zi})),n.d(r,"lookup",(function(){return Pi})),n.d(r,"multiextent",(function(){return Li})),n.d(r,"multivalues",(function(){return qi})),n.d(r,"params",(function(){return $i})),n.d(r,"pivot",(function(){return Yi})),n.d(r,"prefacet",(function(){return Vi})),n.d(r,"project",(function(){return Hi})),n.d(r,"proxy",(function(){return Xi})),n.d(r,"quantile",(function(){return Zi})),n.d(r,"relay",(function(){return Qi})),n.d(r,"sample",(function(){return Ki})),n.d(r,"sequence",(function(){return ta})),n.d(r,"sieve",(function(){return ea})),n.d(r,"subflow",(function(){return vi})),n.d(r,"tupleindex",(function(){return na})),n.d(r,"values",(function(){return ra})),n.d(r,"window",(function(){return la}));var i={};n.r(i),n.d(i,"bound",(function(){return Uc})),n.d(i,"identifier",(function(){return $c})),n.d(i,"mark",(function(){return Yc})),n.d(i,"overlap",(function(){return Wc})),n.d(i,"render",(function(){return Kc})),n.d(i,"viewlayout",(function(){return Af}));var a={};n.r(a),n.d(a,"interpolate",(function(){return Xd})),n.d(a,"interpolateArray",(function(){return Nd})),n.d(a,"interpolateBasis",(function(){return kd})),n.d(a,"interpolateBasisClosed",(function(){return Ed})),n.d(a,"interpolateDate",(function(){return Pd})),n.d(a,"interpolateDiscrete",(function(){return Gd})),n.d(a,"interpolateHue",(function(){return Zd})),n.d(a,"interpolateNumber",(function(){return Ld})),n.d(a,"interpolateObject",(function(){return Ud})),n.d(a,"interpolateRound",(function(){return Jd})),n.d(a,"interpolateString",(function(){return Hd})),n.d(a,"interpolateTransformCss",(function(){return np})),n.d(a,"interpolateTransformSvg",(function(){return rp})),n.d(a,"interpolateZoom",(function(){return up})),n.d(a,"interpolateRgb",(function(){return Bd})),n.d(a,"interpolateRgbBasis",(function(){return Rd})),n.d(a,"interpolateRgbBasisClosed",(function(){return zd})),n.d(a,"interpolateHsl",(function(){return sp})),n.d(a,"interpolateHslLong",(function(){return lp})),n.d(a,"interpolateLab",(function(){return Cp})),n.d(a,"interpolateHcl",(function(){return Sp})),n.d(a,"interpolateHclLong",(function(){return Bp})),n.d(a,"interpolateCubehelix",(function(){return $p})),n.d(a,"interpolateCubehelixLong",(function(){return Yp})),n.d(a,"piecewise",(function(){return Wp})),n.d(a,"quantize",(function(){return Vp}));var u={};n.r(u),n.d(u,"axisticks",(function(){return Jg})),n.d(u,"datajoin",(function(){return Qg})),n.d(u,"encode",(function(){return em})),n.d(u,"legendentries",(function(){return lm})),n.d(u,"linkpath",(function(){return gm})),n.d(u,"pie",(function(){return bm})),n.d(u,"scale",(function(){return Am})),n.d(u,"sortitems",(function(){return Em})),n.d(u,"stack",(function(){return Dm})),n.d(u,"validTicks",(function(){return Xg}));var o={};n.r(o),n.d(o,"contour",(function(){return lv})),n.d(o,"geojson",(function(){return hv})),n.d(o,"geopath",(function(){return Rx})),n.d(o,"geopoint",(function(){return zx})),n.d(o,"geoshape",(function(){return Nx})),n.d(o,"graticule",(function(){return Px})),n.d(o,"projection",(function(){return Lx}));var s={};n.r(s),n.d(s,"force",(function(){return zw}));var l={};n.r(l),n.d(l,"nest",(function(){return LA})),n.d(l,"pack",(function(){return WA})),n.d(l,"partition",(function(){return XA})),n.d(l,"stratify",(function(){return ZA})),n.d(l,"tree",(function(){return KA})),n.d(l,"treelinks",(function(){return eO})),n.d(l,"treemap",(function(){return iO}));var c={};n.r(c),n.d(c,"loess",(function(){return oO})),n.d(c,"regression",(function(){return lO}));var f={};n.r(f),n.d(f,"voronoi",(function(){return FO}));var h={};n.r(h),n.d(h,"wordcloud",(function(){return HO}));var d={};n.r(d),n.d(d,"crossfilter",(function(){return eM})),n.d(d,"resolvefilter",(function(){return rM}));var p=n(0);function g(t){var e=t||p.v,n=[],r={};return n.add=function(t){var i=e(t);return r[i]||(r[i]=1,n.push(t)),n},n.remove=function(t){var i,a=e(t);return r[a]&&(r[a]=0,(i=n.indexOf(t))>=0&&n.splice(i,1)),n},n}var m=async function(t,e){try{await e(t)}catch(e){t.error(e)}},v=Symbol("vega_id"),y=1;function b(t){return!(!t||!_(t))}function _(t){return t[v]}function x(t,e){return t[v]=e,t}function w(t){var e=t===Object(t)?t:{data:t};return _(e)?e:x(e,y++)}function A(t){return O(t,w({}))}function O(t,e){for(var n in t)e[n]=t[n];return e}function M(t,e){return x(e,_(t))}function k(t,e){return t?e?(n,r)=>t(n,r)||_(e(n))-_(e(r)):(e,n)=>t(e,n)||_(e)-_(n):null}function E(t){return t&&t.constructor===j}function j(){var t=[],e=[],n=[],r=[],i=[],a=!1;return{constructor:j,insert:function(e){for(var n=Object(p.g)(e),r=0,i=n.length;r<i;++r)t.push(n[r]);return this},remove:function(t){for(var n=Object(p.B)(t)?r:e,i=Object(p.g)(t),a=0,u=i.length;a<u;++a)n.push(i[a]);return this},modify:function(t,e,r){var a={field:e,value:Object(p.j)(r)};return Object(p.B)(t)?(a.filter=t,i.push(a)):(a.tuple=t,n.push(a)),this},encode:function(t,e){return Object(p.B)(t)?i.push({filter:t,field:e}):n.push({tuple:t,field:e}),this},reflow:function(){return a=!0,this},pulse:function(u,o){var s,l,c,f,h,d,p={},g={};for(s=0,l=o.length;s<l;++s)p[_(o[s])]=1;for(s=0,l=e.length;s<l;++s)p[_(h=e[s])]=-1;for(s=0,l=r.length;s<l;++s)f=r[s],o.forEach((function(t){f(t)&&(p[_(t)]=-1)}));for(s=0,l=t.length;s<l;++s)d=_(h=t[s]),p[d]?p[d]=1:u.add.push(w(t[s]));for(s=0,l=o.length;s<l;++s)h=o[s],p[_(h)]<0&&u.rem.push(h);function m(t,e,n){n?t[e]=n(t):u.encode=e,a||(g[_(t)]=t)}for(s=0,l=n.length;s<l;++s)h=(c=n[s]).tuple,f=c.field,(d=p[_(h)])>0&&(m(h,f,c.value),u.modifies(f));for(s=0,l=i.length;s<l;++s)c=i[s],f=c.filter,o.forEach((function(t){f(t)&&p[_(t)]>0&&m(t,c.field,c.value)})),u.modifies(c.field);if(a)u.mod=e.length||r.length?o.filter((function(t){return p[_(t)]>0})):o.slice();else for(d in g)u.mod.push(g[d]);return u}}}var D="_:mod:_";function C(){Object.defineProperty(this,D,{writable:!0,value:{}})}var F=C.prototype;F.set=function(t,e,n,r){var i=this,a=i[t],u=i[D];return null!=e&&e>=0?(a[e]!==n||r)&&(a[e]=n,u[e+":"+t]=-1,u[t]=-1):(a!==n||r)&&(i[t]=n,u[t]=Object(p.y)(n)?1+n.length:-1),i},F.modified=function(t,e){var n,r=this[D];if(!arguments.length){for(n in r)if(r[n])return!0;return!1}if(Object(p.y)(t)){for(n=0;n<t.length;++n)if(r[t[n]])return!0;return!1}return null!=e&&e>=0?e+1<r[t]||!!r[e+":"+t]:!!r[t]},F.clear=function(){return this[D]={},this};var S=0,B=new C;function T(t,e,n,r){this.id=++S,this.value=t,this.stamp=-1,this.rank=-1,this.qrank=-1,this.flags=0,e&&(this._update=e),n&&this.parameters(n,r)}var R=T.prototype;function z(t){return function(e){var n=this.flags;return 0===arguments.length?!!(n&t):(this.flags=e?n|t:n&~t,this)}}R.targets=function(){return this._targets||(this._targets=g(p.u))},R.set=function(t){return this.value!==t?(this.value=t,1):0},R.skip=z(1),R.modified=z(2),R.parameters=function(t,e,n){e=!1!==e;var r,i,a,u,o=this,s=o._argval=o._argval||new C,l=o._argops=o._argops||[],c=[];function f(t,n,r){r instanceof T?(r!==o&&(e&&r.targets().add(o),c.push(r)),l.push({op:r,name:t,index:n})):s.set(t,n,r)}for(r in t)if(i=t[r],"pulse"===r)Object(p.g)(i).forEach((function(t){t instanceof T?t!==o&&(t.targets().add(o),c.push(t)):Object(p.l)("Pulse parameters must be operator instances.")})),o.source=i;else if(Object(p.y)(i))for(s.set(r,-1,Array(a=i.length)),u=0;u<a;++u)f(r,u,i[u]);else f(r,-1,i);return this.marshall().clear(),n&&(l.initonly=!0),c},R.marshall=function(t){var e,n,r,i,a,u=this._argval||B,o=this._argops;if(o){for(n=0,r=o.length;n<r;++n)a=(i=(e=o[n]).op).modified()&&i.stamp===t,u.set(e.name,e.index,i.value,a);if(o.initonly){for(n=0;n<r;++n)(e=o[n]).op.targets().remove(this);this._argops=null,this._update=null}}return u},R.evaluate=function(t){var e=this._update;if(e){var n=this.marshall(t.stamp),r=e.call(this,n,t);if(n.clear(),r!==this.value)this.value=r;else if(!this.modified())return t.StopPropagation}},R.run=function(t){return t.stamp<this.stamp?t.StopPropagation:(this.skip()?(this.skip(!1),e=0):e=this.evaluate(t),this.pulse=e||t);var e};var N=0;function P(t,e,n){this.id=++N,this.value=null,n&&(this.receive=n),t&&(this._filter=t),e&&(this._apply=e)}function L(t,e,n){return new P(t,e,n)}var U=P.prototype;U._filter=p.cb,U._apply=p.v,U.targets=function(){return this._targets||(this._targets=g(p.u))},U.consume=function(t){return arguments.length?(this._consume=!!t,this):!!this._consume},U.receive=function(t){if(this._filter(t)){for(var e=this.value=this._apply(t),n=this._targets,r=n?n.length:0,i=0;i<r;++i)n[i].receive(e);this._consume&&(t.preventDefault(),t.stopPropagation())}},U.filter=function(t){var e=L(t);return this.targets().add(e),e},U.apply=function(t){var e=L(null,t);return this.targets().add(e),e},U.merge=function(){var t=L();this.targets().add(t);for(var e=0,n=arguments.length;e<n;++e)arguments[e].targets().add(t);return t},U.throttle=function(t){var e=-1;return this.filter((function(){var n=Date.now();return n-e>t?(e=n,1):0}))},U.debounce=function(t){var e=L();return this.targets().add(L(null,null,Object(p.k)(t,(function(t){var n=t.dataflow;e.receive(t),n&&n.run&&n.run()})))),e},U.between=function(t,e){var n=!1;return t.targets().add(L(null,null,(function(){n=!0}))),e.targets().add(L(null,null,(function(){n=!1}))),this.filter((function(){return n}))};const q=/^([A-Za-z]+:)?\/\//,I=/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i,$=/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g,Y="file://";async function W(t,e){const n=await this.sanitize(t,e),r=n.href;return n.localFile?this.file(r):this.http(r,e)}async function V(t,e){e=Object(p.m)({},this.options,e);const n=this.fileAccess,r={href:null};let i,a,u;const o=I.test(t.replace($,""));null!=t&&"string"==typeof t&&o||Object(p.l)("Sanitize failure, invalid URI: "+Object(p.V)(t));const s=q.test(t);return(u=e.baseURL)&&!s&&(t.startsWith("/")||"/"===u[u.length-1]||(t="/"+t),t=u+t),a=(i=t.startsWith(Y))||"file"===e.mode||"http"!==e.mode&&!s&&n,i?t=t.slice(Y.length):t.startsWith("//")&&("file"===e.defaultProtocol?(t=t.slice(2),a=!0):t=(e.defaultProtocol||"http")+":"+t),Object.defineProperty(r,"localFile",{value:!!a}),r.href=t,e.target&&(r.target=e.target+""),e.rel&&(r.rel=e.rel+""),r}function H(t){return t?function(e){return new Promise((function(n,r){t.readFile(e,(function(t,e){t?r(t):n(e)}))}))}:X}async function X(){Object(p.l)("No file system access.")}function G(t){return t?async function(e,n){const r=Object(p.m)({},this.options.http,n),i=n&&n.response,a=await t(e,r);return a.ok?Object(p.B)(a[i])?a[i]():a.text():Object(p.l)(a.status+""+a.statusText)}:Z}async function Z(){Object(p.l)("No HTTP fetch method available.")}var J={boolean:p.W,integer:p.Y,number:p.Y,date:p.X,string:p.ab,unknown:p.v},Q=[function(t){return"true"===t||"false"===t||!0===t||!1===t},function(t){return et(t)&&Number.isInteger(+t)},et,function(t){return!Number.isNaN(Date.parse(t))}],K=["boolean","integer","number","date"];function tt(t,e){return e.reduce((function(e,n){return e[n]=function(t,e){if(!t||!t.length)return"unknown";var n,r,i,a,u=0,o=t.length,s=Q.length,l=Q.map((function(t,e){return e+1}));for(r=0,o=t.length;r<o;++r)for(n=e?t[r][e]:t[r],i=0;i<s;++i)if(l[i]&&(null!=(a=n)&&a==a)&&!Q[i](n)&&(l[i]=0,++u===Q.length))return"string";return u=l.reduce((function(t,e){return 0===t?e:t}),0)-1,K[u]}(t,n),e}),{})}function et(t){return!(Number.isNaN(+t)||t instanceof Date)}var nt={},rt={},it=34,at=10,ut=13;function ot(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function st(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function lt(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function ct(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+lt(-e,6):e>9999?"+"+lt(e,6):lt(e,4))+"-"+lt(t.getUTCMonth()+1,2)+"-"+lt(t.getUTCDate(),2)+(a?"T"+lt(n,2)+":"+lt(r,2)+":"+lt(i,2)+"."+lt(a,3)+"Z":i?"T"+lt(n,2)+":"+lt(r,2)+":"+lt(i,2)+"Z":r||n?"T"+lt(n,2)+":"+lt(r,2)+"Z":"")}var ft=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],a=t.length,u=0,o=0,s=a<=0,l=!1;function c(){if(s)return rt;if(l)return l=!1,nt;var e,r,i=u;if(t.charCodeAt(i)===it){for(;u++<a&&t.charCodeAt(u)!==it||t.charCodeAt(++u)===it;);return(e=u)>=a?s=!0:(r=t.charCodeAt(u++))===at?l=!0:r===ut&&(l=!0,t.charCodeAt(u)===at&&++u),t.slice(i+1,e-1).replace(/""/g,'"')}for(;u<a;){if((r=t.charCodeAt(e=u++))===at)l=!0;else if(r===ut)l=!0,t.charCodeAt(u)===at&&++u;else if(r!==n)continue;return t.slice(i,e)}return s=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===at&&--a,t.charCodeAt(a-1)===ut&&--a;(r=c())!==rt;){for(var f=[];r!==nt&&r!==rt;)f.push(r),r=c();e&&null==(f=e(f,o++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return u(e[t])})).join(t)}))}function a(e){return e.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?ct(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,a=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=ot(t);return function(r,i){return e(n(r),i,t)}}(t,e):ot(t)}));return a.columns=i||[],a},parseRows:r,format:function(e,n){return null==n&&(n=st(e)),[n.map(u).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=st(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},ht=ft(","),dt=(ht.parse,ht.parseRows,ht.format,ht.formatBody,ht.formatRows,ft("\t"));dt.parse,dt.parseRows,dt.format,dt.formatBody,dt.formatRows;function pt(t){const e=function(e,n){const r={delimiter:t};return gt(e,n?Object(p.m)(n,r):r)};return e.responseType="text",e}function gt(t,e){return e.header&&(t=e.header.map(p.V).join(e.delimiter)+"\n"+t),ft(e.delimiter).parse(t+"")}gt.responseType="text";var mt=n(3),vt=function(t){return t},yt=function(t){if(null==t)return vt;var e,n,r=t.scale[0],i=t.scale[1],a=t.translate[0],u=t.translate[1];return function(t,o){o||(e=n=0);var s=2,l=t.length,c=new Array(l);for(c[0]=(e+=t[0])*r+a,c[1]=(n+=t[1])*i+u;s<l;)c[s]=t[s],++s;return c}},bt=function(t,e){for(var n,r=t.length,i=r-e;i<--r;)n=t[i],t[i++]=t[r],t[r]=n},_t=function(t,e){return"GeometryCollection"===e.type?{type:"FeatureCollection",features:e.geometries.map((function(e){return xt(t,e)}))}:xt(t,e)};function xt(t,e){var n=e.id,r=e.bbox,i=null==e.properties?{}:e.properties,a=wt(t,e);return null==n&&null==r?{type:"Feature",properties:i,geometry:a}:null==r?{type:"Feature",id:n,properties:i,geometry:a}:{type:"Feature",id:n,bbox:r,properties:i,geometry:a}}function wt(t,e){var n=yt(t.transform),r=t.arcs;function i(t,e){e.length&&e.pop();for(var i=r[t<0?~t:t],a=0,u=i.length;a<u;++a)e.push(n(i[a],a));t<0&&bt(e,u)}function a(t){return n(t)}function u(t){for(var e=[],n=0,r=t.length;n<r;++n)i(t[n],e);return e.length<2&&e.push(e[0]),e}function o(t){for(var e=u(t);e.length<4;)e.push(e[0]);return e}function s(t){return t.map(o)}return function t(e){var n,r=e.type;switch(r){case"GeometryCollection":return{type:r,geometries:e.geometries.map(t)};case"Point":n=a(e.coordinates);break;case"MultiPoint":n=e.coordinates.map(a);break;case"LineString":n=u(e.arcs);break;case"MultiLineString":n=e.arcs.map(u);break;case"Polygon":n=s(e.arcs);break;case"MultiPolygon":n=e.arcs.map(s);break;default:return null}return{type:r,coordinates:n}}(e)}var At=function(t,e){var n={},r={},i={},a=[],u=-1;function o(t,e){for(var r in t){var i=t[r];delete e[i.start],delete i.start,delete i.end,i.forEach((function(t){n[t<0?~t:t]=1})),a.push(i)}}return e.forEach((function(n,r){var i,a=t.arcs[n<0?~n:n];a.length<3&&!a[1][0]&&!a[1][1]&&(i=e[++u],e[u]=n,e[r]=i)})),e.forEach((function(e){var n,a,u=function(e){var n,r=t.arcs[e<0?~e:e],i=r[0];t.transform?(n=[0,0],r.forEach((function(t){n[0]+=t[0],n[1]+=t[1]}))):n=r[r.length-1];return e<0?[n,i]:[i,n]}(e),o=u[0],s=u[1];if(n=i[o])if(delete i[n.end],n.push(e),n.end=s,a=r[s]){delete r[a.start];var l=a===n?n:n.concat(a);r[l.start=n.start]=i[l.end=a.end]=l}else r[n.start]=i[n.end]=n;else if(n=r[s])if(delete r[n.start],n.unshift(e),n.start=o,a=i[o]){delete i[a.end];var c=a===n?n:a.concat(n);r[c.start=a.start]=i[c.end=n.end]=c}else r[n.start]=i[n.end]=n;else r[(n=[e]).start=o]=i[n.end=s]=n})),o(i,r),o(r,i),e.forEach((function(t){n[t<0?~t:t]||a.push([t])})),a},Ot=function(t){return wt(t,Mt.apply(this,arguments))};function Mt(t,e,n){var r,i,a;if(arguments.length>1)r=function(t,e,n){var r,i=[],a=[];function u(t){var e=t<0?~t:t;(a[e]||(a[e]=[])).push({i:t,g:r})}function o(t){t.forEach(u)}function s(t){t.forEach(o)}return function t(e){switch(r=e,e.type){case"GeometryCollection":e.geometries.forEach(t);break;case"LineString":o(e.arcs);break;case"MultiLineString":case"Polygon":s(e.arcs);break;case"MultiPolygon":!function(t){t.forEach(s)}(e.arcs)}}(e),a.forEach(null==n?function(t){i.push(t[0].i)}:function(t){n(t[0].g,t[t.length-1].g)&&i.push(t[0].i)}),i}(0,e,n);else for(i=0,r=new Array(a=t.arcs.length);i<a;++i)r[i]=i;return{type:"MultiLineString",arcs:At(t,r)}}const kt={interior:(t,e)=>t!==e,exterior:(t,e)=>t===e};function Et(t,e){let n,r,i,a;return t=Object(mt.a)(t,e),e&&e.feature?(n=_t,i=e.feature):e&&e.mesh?(n=Ot,i=e.mesh,a=kt[e.filter]):Object(p.l)("Missing TopoJSON feature or mesh parameter."),(r=(r=t.objects[i])?n(t,r,a):Object(p.l)("Invalid TopoJSON object: "+i))&&r.features||[r]}Et.responseType="json";const jt={dsv:gt,csv:pt(","),tsv:pt("\t"),json:mt.a,topojson:Et};function Dt(t,e){return arguments.length>1?(jt[t]=e,this):Object(p.t)(jt,t)?jt[t]:null}function Ct(t){const e=Dt(t);return e&&e.responseType||"text"}var Ft=new Date,St=new Date;function Bt(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var u,o=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return o;do{o.push(u=new Date(+n)),e(n,a),t(n)}while(u<n&&n<r);return o},i.filter=function(n){return Bt((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return Ft.setTime(+e),St.setTime(+r),t(Ft),t(St),Math.floor(n(Ft,St))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Tt=6e4,Rt=6048e5;function zt(t){return Bt((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/Rt}))}var Nt=zt(0),Pt=zt(1),Lt=zt(2),Ut=zt(3),qt=zt(4),It=zt(5),$t=zt(6),Yt=(Nt.range,Pt.range,Lt.range,Ut.range,qt.range,It.range,$t.range,Bt((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Wt=Yt;Yt.range;function Vt(t){return Bt((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Tt)/Rt}))}var Ht=Vt(0),Xt=Vt(1),Gt=Vt(2),Zt=Vt(3),Jt=Vt(4),Qt=Vt(5),Kt=Vt(6),te=(Ht.range,Xt.range,Gt.range,Zt.range,Jt.range,Qt.range,Kt.range,Bt((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Tt)/864e5}),(function(t){return t.getDate()-1}))),ee=te,ne=(te.range,Bt((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));ne.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bt((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var re=ne,ie=(ne.range,Bt((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));ie.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bt((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var ae=ie;ie.range;function ue(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function oe(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function se(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var le,ce,fe,he,de,pe={"-":"",_:" ",0:"0"},ge=/^\s*\d+/,me=/^%/,ve=/[\\^$*+?|[\]().{}]/g;function ye(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function be(t){return t.replace(ve,"\\$&")}function _e(t){return new RegExp("^(?:"+t.map(be).join("|")+")","i")}function xe(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function we(t,e,n){var r=ge.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ae(t,e,n){var r=ge.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Oe(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Me(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function ke(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Ee(t,e,n){var r=ge.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function je(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function De(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ce(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Fe(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Se(t,e,n){var r=ge.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Be(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Te(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Re(t,e,n){var r=ge.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ze(t,e,n){var r=ge.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Ne(t,e,n){var r=ge.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Pe(t,e,n){var r=me.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Le(t,e,n){var r=ge.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Ue(t,e,n){var r=ge.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function qe(t,e){return ye(t.getDate(),e,2)}function Ie(t,e){return ye(t.getHours(),e,2)}function $e(t,e){return ye(t.getHours()%12||12,e,2)}function Ye(t,e){return ye(1+ee.count(re(t),t),e,3)}function We(t,e){return ye(t.getMilliseconds(),e,3)}function Ve(t,e){return We(t,e)+"000"}function He(t,e){return ye(t.getMonth()+1,e,2)}function Xe(t,e){return ye(t.getMinutes(),e,2)}function Ge(t,e){return ye(t.getSeconds(),e,2)}function Ze(t){var e=t.getDay();return 0===e?7:e}function Je(t,e){return ye(Ht.count(re(t),t),e,2)}function Qe(t,e){var n=t.getDay();return t=n>=4||0===n?Jt(t):Jt.ceil(t),ye(Jt.count(re(t),t)+(4===re(t).getDay()),e,2)}function Ke(t){return t.getDay()}function tn(t,e){return ye(Xt.count(re(t),t),e,2)}function en(t,e){return ye(t.getFullYear()%100,e,2)}function nn(t,e){return ye(t.getFullYear()%1e4,e,4)}function rn(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ye(e/60|0,"0",2)+ye(e%60,"0",2)}function an(t,e){return ye(t.getUTCDate(),e,2)}function un(t,e){return ye(t.getUTCHours(),e,2)}function on(t,e){return ye(t.getUTCHours()%12||12,e,2)}function sn(t,e){return ye(1+Wt.count(ae(t),t),e,3)}function ln(t,e){return ye(t.getUTCMilliseconds(),e,3)}function cn(t,e){return ln(t,e)+"000"}function fn(t,e){return ye(t.getUTCMonth()+1,e,2)}function hn(t,e){return ye(t.getUTCMinutes(),e,2)}function dn(t,e){return ye(t.getUTCSeconds(),e,2)}function pn(t){var e=t.getUTCDay();return 0===e?7:e}function gn(t,e){return ye(Nt.count(ae(t),t),e,2)}function mn(t,e){var n=t.getUTCDay();return t=n>=4||0===n?qt(t):qt.ceil(t),ye(qt.count(ae(t),t)+(4===ae(t).getUTCDay()),e,2)}function vn(t){return t.getUTCDay()}function yn(t,e){return ye(Pt.count(ae(t),t),e,2)}function bn(t,e){return ye(t.getUTCFullYear()%100,e,2)}function _n(t,e){return ye(t.getUTCFullYear()%1e4,e,4)}function xn(){return"+0000"}function wn(){return"%"}function An(t){return+t}function On(t){return Math.floor(+t/1e3)}le=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,u=t.shortDays,o=t.months,s=t.shortMonths,l=_e(i),c=xe(i),f=_e(a),h=xe(a),d=_e(u),p=xe(u),g=_e(o),m=xe(o),v=_e(s),y=xe(s),b={a:function(t){return u[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:qe,e:qe,f:Ve,H:Ie,I:$e,j:Ye,L:We,m:He,M:Xe,p:function(t){return i[+(t.getHours()>=12)]},Q:An,s:On,S:Ge,u:Ze,U:Je,V:Qe,w:Ke,W:tn,x:null,X:null,y:en,Y:nn,Z:rn,"%":wn},_={a:function(t){return u[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:an,e:an,f:cn,H:un,I:on,j:sn,L:ln,m:fn,M:hn,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:An,s:On,S:dn,u:pn,U:gn,V:mn,w:vn,W:yn,x:null,X:null,y:bn,Y:_n,Z:xn,"%":wn},x={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return O(t,e,n,r)},d:Fe,e:Fe,f:Ne,H:Be,I:Be,j:Se,L:ze,m:Ce,M:Te,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},Q:Le,s:Ue,S:Re,u:Ae,U:Oe,V:Me,w:we,W:ke,x:function(t,e,r){return O(t,n,e,r)},X:function(t,e,n){return O(t,r,e,n)},y:je,Y:Ee,Z:De,"%":Pe};function w(t,e){return function(n){var r,i,a,u=[],o=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++o<l;)37===t.charCodeAt(o)&&(u.push(t.slice(s,o)),null!=(i=pe[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),u.push(r),s=o+1);return u.push(t.slice(s,o)),u.join("")}}function A(t,e){return function(n){var r,i,a=se(1900);if(O(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=oe(se(a.y))).getUTCDay(),r=i>4||0===i?Pt.ceil(r):Pt(r),r=Wt.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=e(se(a.y))).getDay(),r=i>4||0===i?Xt.ceil(r):Xt(r),r=ee.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?oe(se(a.y)).getUTCDay():e(se(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,oe(a)):e(a)}}function O(t,e,n,r){for(var i,a,u=0,o=e.length,s=n.length;u<o;){if(r>=s)return-1;if(37===(i=e.charCodeAt(u++))){if(i=e.charAt(u++),!(a=x[i in pe?e.charAt(u++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(b.x=w(n,b),b.X=w(r,b),b.c=w(e,b),_.x=w(n,_),_.X=w(r,_),_.c=w(e,_),{format:function(t){var e=w(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=A(t+="",ue);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=A(t,oe);return e.toString=function(){return t},e}})}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),ce=le.format,fe=le.parse,he=le.utcFormat,de=le.utcParse;Date.prototype.toISOString||he("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||de("%Y-%m-%dT%H:%M:%S.%LZ");var Mn=function(t,e){return function(n){return{options:n||{},sanitize:V,load:W,fileAccess:!!e,file:H(e),http:G(t)}}}("undefined"!=typeof fetch&&fetch,null);const kn=function(t,e,n){const r=Dt((e=e||{}).type||"json");return r||Object(p.l)("Unknown data format type: "+e.type),t=r(t,e),e.parse&&function(t,e,n){if(!t.length)return;n=n||fe;var r,i,a,u,o,s,l,c=t.columns||Object.keys(t[0]);"auto"===e&&(e=tt(t,c));for(c=Object.keys(e),r=c.map((function(t){var r,i,a=e[t];if(a&&(0===a.indexOf("date:")||0===a.indexOf("utc:")))return("'"===(i=(r=a.split(/:(.+)?/,2))[1])[0]&&"'"===i[i.length-1]||'"'===i[0]&&'"'===i[i.length-1])&&(i=i.slice(1,-1)),"utc"===r[0]?de(i):n(i);if(!J[a])throw Error("Illegal format pattern: "+t+":"+a);return J[a]})),u=0,s=t.length,l=c.length;u<s;++u)for(i=t[u],o=0;o<l;++o)a=c[o],i[a]=r[o](i[a])}(t,e.parse,n),Object(p.t)(t,"columns")&&delete t.columns,t};var En={skip:!0};function jn(t,e,n,r,i,a){var u,o,s=Object(p.m)({},a,En);Object(p.B)(n)||(n=Object(p.j)(n)),void 0===r?u=e=>t.touch(n(e)):Object(p.B)(r)?(o=new T(null,r,i,!1),u=e=>{o.evaluate(e);const r=n(e),i=o.value;E(i)?t.pulse(r,i,a):t.update(r,i,s)}):u=e=>t.update(n(e),r,s),e.apply(u)}function Dn(t,e,n,r,i,a){if(void 0===r)e.targets().add(n);else{const u=a||{},o=new T(null,function(t,e){return e=Object(p.B)(e)?e:Object(p.j)(e),t?function(n,r){const i=e(n,r);return t.skip()||(t.skip(i!==this.value).value=i),i}:e}(n,r),i,!1);o.modified(u.force),o.rank=e.rank,e.targets().add(o),n&&(o.skip(!0),o.value=n.value,o.targets().add(n),t.connect(n,[o]))}}var Cn={};function Fn(t,e,n){this.dataflow=t,this.stamp=null==e?-1:e,this.add=[],this.rem=[],this.mod=[],this.fields=null,this.encode=n||null}var Sn=Fn.prototype;function Bn(t,e){return t?function(n,r){return t(n,r)&&e(n,r)}:e}function Tn(t,e){var n=[];return Object(p.eb)(t,e,(function(t){n.push(t)})),n}function Rn(t,e){var n={};return t.visit(e,(function(t){n[_(t)]=1})),function(t){return n[_(t)]?null:t}}function zn(t,e,n,r){var i,a,u,o,s,l=this,c=0;for(this.dataflow=t,this.stamp=e,this.fields=null,this.encode=r||null,this.pulses=n,u=0,o=n.length;u<o;++u)if((i=n[u]).stamp===e){if(i.fields)for(s in a=l.fields||(l.fields={}),i.fields)a[s]=1;i.changed(l.ADD)&&(c|=l.ADD),i.changed(l.REM)&&(c|=l.REM),i.changed(l.MOD)&&(c|=l.MOD)}this.changes=c}Sn.StopPropagation=Cn,Sn.ADD=1,Sn.REM=2,Sn.MOD=4,Sn.ADD_REM=3,Sn.ADD_MOD=5,Sn.ALL=7,Sn.REFLOW=8,Sn.SOURCE=16,Sn.NO_SOURCE=32,Sn.NO_FIELDS=64,Sn.fork=function(t){return new Fn(this.dataflow).init(this,t)},Sn.clone=function(){var t=this.fork(7);return t.add=t.add.slice(),t.rem=t.rem.slice(),t.mod=t.mod.slice(),t.source&&(t.source=t.source.slice()),t.materialize(23)},Sn.addAll=function(){var t=this;return this.source&&this.source.length!==this.add.length?((t=new Fn(this.dataflow).init(this)).add=t.source,t):t},Sn.init=function(t,e){var n=this;return n.stamp=t.stamp,n.encode=t.encode,!t.fields||64&e||(n.fields=t.fields),1&e?(n.addF=t.addF,n.add=t.add):(n.addF=null,n.add=[]),2&e?(n.remF=t.remF,n.rem=t.rem):(n.remF=null,n.rem=[]),4&e?(n.modF=t.modF,n.mod=t.mod):(n.modF=null,n.mod=[]),32&e?(n.srcF=null,n.source=null):(n.srcF=t.srcF,n.source=t.source),n},Sn.runAfter=function(t){this.dataflow.runAfter(t)},Sn.changed=function(t){var e=t||7;return 1&e&&this.add.length||2&e&&this.rem.length||4&e&&this.mod.length},Sn.reflow=function(t){if(t)return this.fork(7).reflow();var e=this.add.length,n=this.source&&this.source.length;return n&&n!==e&&(this.mod=this.source,e&&this.filter(4,Rn(this,1))),this},Sn.modifies=function(t){var e=Object(p.g)(t),n=this.fields||(this.fields={});return e.forEach((function(t){n[t]=!0})),this},Sn.modified=function(t,e){var n=this.fields;return!(!e&&!this.mod.length||!n)&&(arguments.length?Object(p.y)(t)?t.some((function(t){return n[t]})):n[t]:!!n)},Sn.filter=function(t,e){var n=this;return 1&t&&(n.addF=Bn(n.addF,e)),2&t&&(n.remF=Bn(n.remF,e)),4&t&&(n.modF=Bn(n.modF,e)),16&t&&(n.srcF=Bn(n.srcF,e)),n},Sn.materialize=function(t){var e=this;return 1&(t=t||7)&&e.addF&&(e.add=Tn(e.add,e.addF),e.addF=null),2&t&&e.remF&&(e.rem=Tn(e.rem,e.remF),e.remF=null),4&t&&e.modF&&(e.mod=Tn(e.mod,e.modF),e.modF=null),16&t&&e.srcF&&(e.source=e.source.filter(e.srcF),e.srcF=null),e},Sn.visit=function(t,e){var n,r,i=this,a=e;return 16&t?(Object(p.eb)(i.source,i.srcF,a),i):(1&t&&Object(p.eb)(i.add,i.addF,a),2&t&&Object(p.eb)(i.rem,i.remF,a),4&t&&Object(p.eb)(i.mod,i.modF,a),8&t&&(n=i.source)&&((r=i.add.length+i.mod.length)===n.length||(r?Object(p.eb)(n,Rn(i,5),a):Object(p.eb)(n,i.srcF,a))),i)};var Nn=Object(p.w)(zn,Fn);function Pn(t){return t.error("Dataflow already running. Use runAsync() to chain invocations."),t}Nn.fork=function(t){var e=new Fn(this.dataflow).init(this,t&this.NO_FIELDS);return void 0!==t&&(t&e.ADD&&this.visit(e.ADD,(function(t){return e.add.push(t)})),t&e.REM&&this.visit(e.REM,(function(t){return e.rem.push(t)})),t&e.MOD&&this.visit(e.MOD,(function(t){return e.mod.push(t)}))),e},Nn.changed=function(t){return this.changes&t},Nn.modified=function(t){var e=this,n=e.fields;return n&&e.changes&e.MOD?Object(p.y)(t)?t.some((function(t){return n[t]})):n[t]:0},Nn.filter=function(){Object(p.l)("MultiPulse does not support filtering.")},Nn.materialize=function(){Object(p.l)("MultiPulse does not support materialization.")},Nn.visit=function(t,e){var n=this,r=n.pulses,i=r.length,a=0;if(t&n.SOURCE)for(;a<i;++a)r[a].visit(t,e);else for(;a<i;++a)r[a].stamp===n.stamp&&r[a].visit(t,e);return n};var Ln={skip:!1,force:!1};function Un(t){var e=[];return{clear:()=>e=[],size:()=>e.length,peek:()=>e[0],push:n=>(e.push(n),qn(e,0,e.length-1,t)),pop:()=>{var n,r=e.pop();return e.length?(n=e[0],e[0]=r,function(t,e,n){var r,i=e,a=t.length,u=t[e],o=1+(e<<1);for(;o<a;)(r=o+1)<a&&n(t[o],t[r])>=0&&(o=r),t[e]=t[o],o=1+((e=o)<<1);t[e]=u,qn(t,i,e,n)}(e,0,t)):n=r,n}}}function qn(t,e,n,r){var i,a,u;for(i=t[n];n>e&&r(i,a=t[u=n-1>>1])<0;)t[n]=a,n=u;return t[n]=i}function In(){this.logger(Object(p.I)()),this.logLevel(p.b),this._clock=0,this._rank=0;try{this._loader=Mn()}catch(t){}this._touched=g(p.u),this._input={},this._pulse=null,this._heap=Un((t,e)=>t.qrank-e.qrank),this._postrun=[]}var $n=In.prototype;function Yn(t){return function(){return this._log[t].apply(this,arguments)}}function Wn(t,e){T.call(this,t,null,e)}$n.stamp=function(){return this._clock},$n.loader=function(t){return arguments.length?(this._loader=t,this):this._loader},$n.cleanThreshold=1e4,$n.add=function(t,e,n,r){var i,a=1;return t instanceof T?i=t:t&&t.prototype instanceof T?i=new t:Object(p.B)(t)?i=new T(null,t):(a=0,i=new T(t,e)),this.rank(i),a&&(r=n,n=e),n&&this.connect(i,i.parameters(n,r)),this.touch(i),i},$n.connect=function(t,e){var n,r,i=t.rank;for(n=0,r=e.length;n<r;++n)if(i<e[n].rank)return void this.rerank(t)},$n.rank=function(t){t.rank=++this._rank},$n.rerank=function(t){for(var e,n,r,i=[t];i.length;)if(this.rank(e=i.pop()),n=e._targets)for(r=n.length;--r>=0;)i.push(e=n[r]),e===t&&Object(p.l)("Cycle detected in dataflow graph.")},$n.pulse=function(t,e,n){this.touch(t,n||Ln);var r=new Fn(this,this._clock+(this._pulse?0:1)),i=t.pulse&&t.pulse.source||[];return r.target=t,this._input[t.id]=e.pulse(r,i),this},$n.touch=function(t,e){var n=e||Ln;return this._pulse?this._enqueue(t):this._touched.add(t),n.skip&&t.skip(!0),this},$n.update=function(t,e,n){var r=n||Ln;return(t.set(e)||r.force)&&this.touch(t,r),this},$n.changeset=j,$n.ingest=function(t,e,n){return this.pulse(t,this.changeset().insert(kn(e,n)))},$n.parse=kn,$n.preload=async function(t,e,n){const r=this,i=r._pending||function(t){var e,n=new Promise((function(t){e=t}));return n.requests=0,n.done=function(){0==--n.requests&&(t._pending=null,e(t))},t._pending=n}(r);i.requests+=1;const a=await r.request(e,n);return r.pulse(t,r.changeset().remove(p.cb).insert(a.data||[])),i.done(),a},$n.request=async function(t,e){const n=this;let r,i=0;try{r=await n.loader().load(t,{context:"dataflow",response:Ct(e&&e.type)});try{r=kn(r,e)}catch(e){i=-2,n.warn("Data ingestion failed",t,e)}}catch(e){i=-1,n.warn("Loading failed",t,e)}return{data:r,status:i}},$n.events=function(t,e,n,r){for(var i,a=this,u=L(n,r),o=function(t){t.dataflow=a;try{u.receive(t)}catch(t){a.error(t)}finally{a.run()}},s=0,l=(i="string"==typeof t&&"undefined"!=typeof document?document.querySelectorAll(t):Object(p.g)(t)).length;s<l;++s)i[s].addEventListener(e,o);return u},$n.on=function(t,e,n,r,i){return(t instanceof T?Dn:jn)(this,t,e,n,r,i),this},$n.evaluate=async function(t,e,n){const r=this,i=r.logLevel();if(r._pulse)return Pn(r);if(r._pending&&await r._pending,e&&await m(r,e),!r._touched.length)return r.info("Dataflow invoked, but nothing to do."),r;let a,u,o,s,l=++r._clock,c=0;r._pulse=new Fn(r,l,t),i>=p.c&&(o=Date.now(),r.debug("-- START PROPAGATION ("+l+") -----")),r._touched.forEach(t=>r._enqueue(t,!0)),r._touched=g(p.u);try{for(;r._heap.size()>0;)(a=r._heap.pop()).rank===a.qrank?((u=a.run(r._getPulse(a,t))).then&&(u=await u),i>=p.a&&r.debug(a.id,u===Cn?"STOP":u,a),u!==Cn&&a._targets&&a._targets.forEach(t=>r._enqueue(t)),++c):r._enqueue(a,!0)}catch(t){r._heap.clear(),s=t}if(r._input={},r._pulse=null,i>=p.c&&(o=Date.now()-o,r.info("> Pulse "+l+": "+c+" operators; "+o+"ms")),s&&(r._postrun=[],r.error(s)),r._postrun.length){const t=r._postrun.sort((t,e)=>e.priority-t.priority);r._postrun=[];for(let e=0;e<t.length;++e)await m(r,t[e].callback)}return n&&await m(r,n),r},$n.run=function(t,e,n){return this._pulse?Pn(this):(this.evaluate(t,e,n),this)},$n.runAsync=async function(t,e,n){for(;this._running;)await this._running;const r=()=>this._running=null;return(this._running=this.evaluate(t,e,n)).then(r,r),this._running},$n.runAfter=function(t,e,n){if(this._pulse||e)this._postrun.push({priority:n||0,callback:t});else try{t(this)}catch(t){this.error(t)}},$n._enqueue=function(t,e){var n=t.stamp<this._clock;n&&(t.stamp=this._clock),(n||e)&&(t.qrank=t.rank,this._heap.push(t))},$n._getPulse=function(t,e){var n=t.source,r=this._clock;return n&&Object(p.y)(n)?new zn(this,r,n.map(t=>t.pulse),e):this._input[t.id]||function(t,e){if(e&&e.stamp===t.stamp)return e;t=t.fork(),e&&e!==Cn&&(t.source=e.source);return t}(this._pulse,n&&n.pulse)},$n.logger=function(t){return arguments.length?(this._log=t,this):this._log},$n.error=Yn("error"),$n.warn=Yn("warn"),$n.info=Yn("info"),$n.debug=Yn("debug"),$n.logLevel=Yn("level");var Vn=Object(p.w)(Wn,T);Vn.run=function(t){return t.stamp<this.stamp?t.StopPropagation:(this.skip()?this.skip(!1):e=this.evaluate(t),(e=e||t).then?e=e.then(t=>this.pulse=t):e!==t.StopPropagation&&(this.pulse=e),e);var e},Vn.evaluate=function(t){var e=this.marshall(t.stamp),n=this.transform(e,t);return e.clear(),n},Vn.transform=function(){};var Hn={};function Xn(t){var e=function(t){return t=t&&t.toLowerCase(),Object(p.t)(Hn,t)?Hn[t]:null}(t);return e&&e.Definition||null}function Gn(t){return t&&t.length?1===t.length?t[0]:(e=t,function(t){for(var n=e.length,r=1,i=String(e[0](t));r<n;++r)i+="|"+e[r](t);return i}):function(){return""};var e}function Zn(t,e,n){return n||t+(e?"_"+e:"")}var Jn={values:tr({name:"values",init:"cell.store = true;",set:"cell.data.values()",idx:-1}),count:tr({name:"count",set:"cell.num"}),__count__:tr({name:"count",set:"this.missing + this.valid"}),missing:tr({name:"missing",set:"this.missing"}),valid:tr({name:"valid",set:"this.valid"}),sum:tr({name:"sum",init:"this.sum = 0;",add:"this.sum += +v;",rem:"this.sum -= v;",set:"this.sum"}),mean:tr({name:"mean",init:"this.mean = 0;",add:"var d = v - this.mean; this.mean += d / this.valid;",rem:"var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;",set:"this.valid ? this.mean : undefined"}),average:tr({name:"average",set:"this.valid ? this.mean : undefined",req:["mean"],idx:1}),variance:tr({name:"variance",init:"this.dev = 0;",add:"this.dev += d * (v - this.mean);",rem:"this.dev -= d * (v - this.mean);",set:"this.valid > 1 ? this.dev / (this.valid-1) : undefined",req:["mean"],idx:1}),variancep:tr({name:"variancep",set:"this.valid > 1 ? this.dev / this.valid : undefined",req:["variance"],idx:2}),stdev:tr({name:"stdev",set:"this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined",req:["variance"],idx:2}),stdevp:tr({name:"stdevp",set:"this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined",req:["variance"],idx:2}),stderr:tr({name:"stderr",set:"this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined",req:["variance"],idx:2}),distinct:tr({name:"distinct",set:"cell.data.distinct(this.get)",req:["values"],idx:3}),ci0:tr({name:"ci0",set:"cell.data.ci0(this.get)",req:["values"],idx:3}),ci1:tr({name:"ci1",set:"cell.data.ci1(this.get)",req:["values"],idx:3}),median:tr({name:"median",set:"cell.data.q2(this.get)",req:["values"],idx:3}),q1:tr({name:"q1",set:"cell.data.q1(this.get)",req:["values"],idx:3}),q3:tr({name:"q3",set:"cell.data.q3(this.get)",req:["values"],idx:3}),argmin:tr({name:"argmin",init:"this.argmin = undefined;",add:"if (v < this.min) this.argmin = t;",rem:"if (v <= this.min) this.argmin = undefined;",set:"this.argmin || cell.data.argmin(this.get)",req:["min"],str:["values"],idx:3}),argmax:tr({name:"argmax",init:"this.argmax = undefined;",add:"if (v > this.max) this.argmax = t;",rem:"if (v >= this.max) this.argmax = undefined;",set:"this.argmax || cell.data.argmax(this.get)",req:["max"],str:["values"],idx:3}),min:tr({name:"min",init:"this.min = undefined;",add:"if (v < this.min || this.min === undefined) this.min = v;",rem:"if (v <= this.min) this.min = NaN;",set:"this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)",str:["values"],idx:4}),max:tr({name:"max",init:"this.max = undefined;",add:"if (v > this.max || this.max === undefined) this.max = v;",rem:"if (v >= this.max) this.max = NaN;",set:"this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)",str:["values"],idx:4})},Qn=Object.keys(Jn);function Kn(t,e){return Jn[t](e)}function tr(t){return function(e){var n=Object(p.m)({init:"",add:"",rem:"",idx:0},t);return n.out=e||t.name,n}}function er(t,e){return t.idx-e.idx}function nr(t,e){var n=e||p.v,r=function(t,e){var n,r=t.reduce((function t(n,r){function i(e){n[e]||t(n,n[e]=Jn[e]())}return r.req&&r.req.forEach(i),e&&r.str&&r.str.forEach(i),n}),t.reduce((function(t,e){return t[e.name]=e,t}),{})),i=[];for(n in r)i.push(r[n]);return i.sort(er)}(t,!0),i="var cell = this.cell; this.valid = 0; this.missing = 0;",a="this.cell = cell; this.init();",u="if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;",o="if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;",s="var cell = this.cell;";return r.forEach((function(t){i+=t.init,u+=t.add,o+=t.rem})),t.slice().sort(er).forEach((function(t){s+="t["+Object(p.V)(t.out)+"]="+t.set+";"})),s+="return t;",(a=Function("cell",a)).prototype.init=Function(i),a.prototype.add=Function("v","t",u),a.prototype.rem=Function("v","t",o),a.prototype.set=Function("t",s),a.prototype.get=n,a.fields=t.map((function(t){return t.out})),a}var rr=function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}},ir=Math.random;var ar=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},ur=function(t){return null===t?NaN:+t};function*or(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}function sr(t,e,n){return(t=Float64Array.from(or(t,n))).sort(ar),lr(t,e)}function lr(t,e,n=ur){if(r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,a=Math.floor(i),u=+n(t[a],a,t);return u+(+n(t[a+1],a+1,t)-u)*(i-a)}}var cr=function(t,e,n,r){r=r||(t=>t);let i,a=0,u=1,o=t.length,s=new Float64Array(o),l=r(t[0]),c=l,f=l+e;for(;u<o;++u){if((i=r(t[u]))>=f){for(c=(l+c)/2;a<u;++a)s[a]=c;f=i+e,l=i}c=i}for(c=(l+c)/2;a<u;++a)s[a]=c;return n?function(t,e){let n,r,i=t.length,a=0,u=1;for(;t[a]===t[u];)++u;for(;u<i;){for(n=u+1;t[u]===t[n];)++n;if(t[u]-t[u-1]<e){for(r=u+(a+n-u-u>>1);r<u;)t[r++]=t[u];for(;r>u;)t[r--]=t[a]}a=u,u=n}return t}(s,e+e/4):s};var fr=function(t,e,n){var r=Float64Array.from(rr(t,n));return r.sort(ar),e.map(t=>lr(r,t))},hr=function(t,e){return fr(t,[.25,.5,.75],e)};const dr=Math.sqrt(2*Math.PI),pr=Math.SQRT2;let gr=NaN;function mr(t,e){t=t||0,e=null==e?1:e;let n,r,i=0,a=0;if(gr==gr)i=gr,gr=NaN;else{do{n=(i=2*ir()-1)*i+(a=2*ir()-1)*a}while(0===n||n>1);i*=r=Math.sqrt(-2*Math.log(n)/n),gr=a*r}return t+i*e}function vr(t,e,n){const r=(t-(e||0))/(n=null==n?1:n);return Math.exp(-.5*r*r)/(n*dr)}function yr(t,e,n){let r,i=(t-(e=e||0))/(n=null==n?1:n),a=Math.abs(i);if(a>37)r=0;else{let t,e=Math.exp(-a*a/2);a<7.07106781186547?(r=e*(t=(t=(t=(t=(t=(t=.0352624965998911*a+.700383064443688)*a+6.37396220353165)*a+33.912866078383)*a+112.079291497871)*a+221.213596169931)*a+220.206867912376),r/=t=(t=(t=(t=(t=(t=(t=.0883883476483184*a+1.75566716318264)*a+16.064177579207)*a+86.7807322029461)*a+296.564248779674)*a+637.333633378831)*a+793.826512519948)*a+440.413735824752):r=e/(t=a+1/(t=a+2/(t=a+3/(t=a+4/(t=a+.65)))))/2.506628274631}return i>0?1-r:r}function br(t,e,n){return t<0||t>1?NaN:(e||0)+(null==n?1:n)*pr*function(t){let e,n=-Math.log((1-t)*(1+t));n<6.25?e=1.6536545626831027+(e=.24015818242558962+(e=(e=(e=.00018673420803405714+(e=(e=(e=4.2347877827932404e-7+(e=(e=(e=1.0512122733215323e-9+(e=(e=(e=26335093153082323e-28+(e=(e=(e=6637638134358324e-30+(e=20972767875968562e-33+(e=(e=11157877678025181e-33+(e=128584807152564e-32+(e=(e=-364441206401782e-35)*(n-=3.125)-16850591381820166e-35)*n)*n)*n-1333171662854621e-31)*n)*n)*n-4054566272975207e-29)*n-8151934197605472e-29)*n)*n-12975133253453532e-27)*n-5415412054294628e-26)*n)*n-4.112633980346984e-9)*n-2.9070369957882005e-8)*n)*n-13654692000834679e-22)*n-13882523362786469e-21)*n)*n-.000740702534166267)*n-.006033670871430149)*n)*n:n<16?(n=Math.sqrt(n)-3.25,e=3.0838856104922208+(e=1.0052589676941592+(e=.005370914553590064+(e=(e=.002491442096107851+(e=(e=.0009532893797373805+(e=(e=24031110387097894e-21+(e=6828485145957318e-20+(e=(e=12475304481671779e-21+(e=29234449089955446e-22+(e=(e=15027403968909828e-22+(e=1.8239629214389228e-8+(e=(e=9.075656193888539e-8+(e=2.2137376921775787e-9)*n)*n-2.7517406297064545e-7)*n)*n)*n-4013867526981546e-21)*n)*n)*n-47318229009055734e-21)*n)*n)*n-.0003550375203628475)*n)*n-.0016882755560235047)*n)*n-.003751208507569241)*n)*n)*n):Number.isFinite(n)?(n=Math.sqrt(n)-5,e=4.849906401408584+(e=1.0103004648645344+(e=(e=(e=7599527703001776e-20+(e=(e=4526062597223154e-21+(e=(e=2.2900482228026655e-7+(e=(e=2.914795345090108e-8+(e=(e=7.61570120807834e-9+(e=(e=1.5076572693500548e-9+(e=(e=-27109920616438573e-27)*n-2.555641816996525e-10)*n)*n-3.789465440126737e-9)*n)*n-1.496002662714924e-8)*n)*n-6.771199775845234e-8)*n)*n-9.9298272942317e-7)*n)*n-1968177810553167e-20)*n)*n-.00021503011930044477)*n-.00013871931833623122)*n)*n):e=1/0;return e*t}(2*t-1)}var _r=function(t,e){var n,r,i={mean:function(t){return arguments.length?(n=t||0,i):n},stdev:function(t){return arguments.length?(r=null==t?1:t,i):r},sample:()=>mr(n,r),pdf:t=>vr(t,n,r),cdf:t=>yr(t,n,r),icdf:t=>br(t,n,r)};return i.mean(t).stdev(e)};var xr=function(t,e){var n=_r(),r={},i=0;return r.data=function(n){return arguments.length?(t=n,i=n?n.length:0,r.bandwidth(e)):t},r.bandwidth=function(n){return arguments.length?(!(e=n)&&t&&(e=wr(t)),r):e},r.sample=function(){return t[~~(ir()*i)]+e*n.sample()},r.pdf=function(r){for(var a=0,u=0;u<i;++u)a+=n.pdf((r-t[u])/e);return a/e/i},r.cdf=function(r){for(var a=0,u=0;u<i;++u)a+=n.cdf((r-t[u])/e);return a/i},r.icdf=function(){throw Error("KDE icdf not supported.")},r.data(t)};function wr(t){var e=t.length,n=hr(t),r=(n[2]-n[0])/1.34;return 1.06*Math.min(Math.sqrt(function(t,e){let n,r=0,i=0,a=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(a+=(n=e-i)*(e-(i+=n/++r)));else{let u=-1;for(let o of t)null!=(o=e(o,++u,t))&&(o=+o)>=o&&(a+=(n=o-i)*(o-(i+=n/++r)))}if(r>1)return a/(r-1)}(t)),r)*Math.pow(e,-.2)}function Ar(t,e){return t=t||0,e=null==e?1:e,Math.exp(t+mr()*e)}function Or(t,e,n){if(t<=0)return 0;e=e||0,n=null==n?1:n;const r=(Math.log(t)-e)/n;return Math.exp(-.5*r*r)/(n*dr*t)}function Mr(t,e,n){return yr(Math.log(t),e,n)}function kr(t,e,n){return Math.exp(br(t,e,n))}function Er(t,e){return null==e&&(e=null==t?1:t,t=0),t+(e-t)*ir()}function jr(t,e,n){return null==n&&(n=null==e?1:e,e=0),t>=e&&t<=n?1/(n-e):0}function Dr(t,e,n){return null==n&&(n=null==e?1:e,e=0),t<e?0:t>n?1:(t-e)/(n-e)}function Cr(t,e,n){return null==n&&(n=null==e?1:e,e=0),t>=0&&t<=1?e+t*(n-e):NaN}var Fr=function(t,e,n,r){const i=r-t*t,a=Math.abs(i)<1e-24?0:(n-t*e)/i;return[e-a*t,a]};function Sr(t,e,n,r){t=t.filter(t=>{let r=e(t),i=n(t);return null!=r&&(r=+r)>=r&&null!=i&&(i=+i)>=i}),r&&t.sort((t,n)=>e(t)-e(n));const i=new Float64Array(t.length),a=new Float64Array(t.length);let u=0;for(let r of t)i[u]=e(r),a[u]=n(r),++u;return[i,a]}function Br(t,e,n,r){let i,a,u=-1,o=-1;for(let s of t)i=e(s,++u,t),a=n(s,u,t),null!=i&&(i=+i)>=i&&null!=a&&(a=+a)>=a&&r(i,a,++o)}var Tr=function(t,e,n,r,i){let a=0,u=0;return Br(t,e,n,(t,e)=>{const n=e-i(t),o=e-r;a+=n*n,u+=o*o}),1-a/u},Rr=function(t,e,n){let r=0,i=0,a=0,u=0,o=0;Br(t,e,n,(t,e)=>{r+=t,i+=e,a+=t*e,u+=t*t,++o});const s=Fr(r/o,i/o,a/o,u/o),l=t=>s[0]+s[1]*t;return{coef:s,predict:l,rSquared:Tr(t,e,n,i/o,l)}},zr=function(t,e,n){let r=0,i=0,a=0,u=0,o=0,s=0,l=0,c=0;Br(t,e,n,(t,e)=>{const n=t*t;r+=t,i+=e,a+=n,u+=n*t,o+=n*n,s+=t*e,l+=n*e,++c});const f=a-r*r/c,h=u-a*r/c,d=o-a*a/c,p=f*d-h*h,g=((l-=a*(i/=c))*f-(s-=r*i)*h)/p,m=(s*d-l*h)/p,v=i-m*(r/c)-g*(a/c),y=t=>g*t*t+m*t+v;return{coef:[v,m,g],predict:y,rSquared:Tr(t,e,n,i,y)}};function Nr(t,e,n=0,r=t.length-1,i=ar){for(;r>n;){if(r-n>600){const a=r-n+1,u=e-n+1,o=Math.log(a),s=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*s*(a-s)/a)*(u-a/2<0?-1:1);Nr(t,e,Math.max(n,Math.floor(e-u*s/a+l)),Math.min(r,Math.floor(e+(a-u)*s/a+l)),i)}const a=t[e];let u=n,o=r;for(Pr(t,n,e),i(t[r],a)>0&&Pr(t,n,r);u<o;){for(Pr(t,u,o),++u,--o;i(t[u],a)<0;)++u;for(;i(t[o],a)>0;)--o}0===i(t[n],a)?Pr(t,n,o):Pr(t,++o,r),o<=e&&(n=o+1),e<=o&&(r=o-1)}return t}function Pr(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}var Lr=function(t,e){if(!(t=Float64Array.from(or(t,e))).length)return;const n=t.length,r=n>>1;return Nr(t,r-1,0),0==(1&n)&&Nr(t,r,r),sr(t,.5)};function Ur(t){return(t=1-t*t*t)*t*t}function qr(t,e,n){let r=t[e],i=n[0],a=n[1]+1;if(!(a>=t.length))for(;e>i&&t[a]-r<=r-t[i];)n[0]=++i,n[1]=a,++a}const Ir=.1*Math.PI/180;var $r=function(t,e,n,r){n=n||25,r=Math.max(n,r||200);const i=e=>[e,t(e)],a=e[0],u=e[1],o=u-a,s=o/r,l=[i(a)],c=[];if(n===r){for(let t=1;t<r;++t)l.push(i(a+t/n*o));return l.push(i(u)),l}c.push(i(u));for(let t=n;--t>0;)c.push(i(a+t/n*o));let f=l[0],h=c[c.length-1];for(;h;){const t=i((f[0]+h[0])/2);t[0]-f[0]>=s&&Yr(f,t,h)>Ir?c.push(t):(f=h,l.push(h),c.pop()),h=c[c.length-1]}return l};function Yr(t,e,n){const r=Math.atan2(n[1]-t[1],n[0]-t[0]),i=Math.atan2(e[1]-t[1],e[0]-t[0]);return Math.abs(r-i)}function Wr(t){this._key=t?Object(p.r)(t):_,this.reset()}var Vr=Wr.prototype;function Hr(t){Wn.call(this,null,t),this._adds=[],this._mods=[],this._alen=0,this._mlen=0,this._drop=!0,this._cross=!1,this._dims=[],this._dnames=[],this._measures=[],this._countOnly=!1,this._counts=null,this._prev=null,this._inputs=null,this._outputs=null}Vr.reset=function(){this._add=[],this._rem=[],this._ext=null,this._get=null,this._q=null},Vr.add=function(t){this._add.push(t)},Vr.rem=function(t){this._rem.push(t)},Vr.values=function(){if(this._get=null,0===this._rem.length)return this._add;var t,e,n,r=this._add,i=this._rem,a=this._key,u=r.length,o=i.length,s=Array(u-o),l={};for(t=0;t<o;++t)l[a(i[t])]=1;for(t=0,e=0;t<u;++t)l[a(n=r[t])]?l[a(n)]=0:s[e++]=n;return this._rem=[],this._add=s},Vr.distinct=function(t){for(var e,n=this.values(),r=n.length,i={},a=0;--r>=0;)e=t(n[r])+"",Object(p.t)(i,e)||(i[e]=1,++a);return a},Vr.extent=function(t){if(this._get!==t||!this._ext){var e=this.values(),n=Object(p.o)(e,t);this._ext=[e[n[0]],e[n[1]]],this._get=t}return this._ext},Vr.argmin=function(t){return this.extent(t)[0]||{}},Vr.argmax=function(t){return this.extent(t)[1]||{}},Vr.min=function(t){var e=this.extent(t)[0];return null!=e?t(e):void 0},Vr.max=function(t){var e=this.extent(t)[1];return null!=e?t(e):void 0},Vr.quartile=function(t){return this._get===t&&this._q||(this._q=hr(this.values(),t),this._get=t),this._q},Vr.q1=function(t){return this.quartile(t)[0]},Vr.q2=function(t){return this.quartile(t)[1]},Vr.q3=function(t){return this.quartile(t)[2]},Vr.ci=function(t){return this._get===t&&this._ci||(this._ci=function(t,e,n,r){if(!t.length)return[void 0,void 0];var i,a,u,o,s=Float64Array.from(rr(t,r)),l=s.length,c=e;for(u=0,o=Array(c);u<c;++u){for(i=0,a=0;a<l;++a)i+=s[~~(ir()*l)];o[u]=i/l}return o.sort(ar),[sr(o,n/2),sr(o,1-n/2)]}(this.values(),1e3,.05,t),this._get=t),this._ci},Vr.ci0=function(t){return this.ci(t)[0]},Vr.ci1=function(t){return this.ci(t)[1]},Hr.Definition={type:"Aggregate",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:Qn},{name:"fields",type:"field",null:!0,array:!0},{name:"as",type:"string",null:!0,array:!0},{name:"drop",type:"boolean",default:!0},{name:"cross",type:"boolean",default:!1},{name:"key",type:"field"}]};var Xr=Object(p.w)(Hr,Wn);Xr.transform=function(t,e){var n=this,r=e.fork(e.NO_SOURCE|e.NO_FIELDS),i=t.modified();return n.stamp=r.stamp,n.value&&(i||e.modified(n._inputs,!0))?(n._prev=n.value,n.value=i?n.init(t):{},e.visit(e.SOURCE,t=>n.add(t))):(n.value=n.value||n.init(t),e.visit(e.REM,t=>n.rem(t)),e.visit(e.ADD,t=>n.add(t))),r.modifies(n._outputs),n._drop=!1!==t.drop,t.cross&&n._dims.length>1&&(n._drop=!1,n.cross()),n.changes(r)},Xr.cross=function(){var t=this,e=t.value,n=t._dnames,r=n.map((function(){return{}})),i=n.length;function a(t){var e,a,u,o;for(e in t)for(u=t[e].tuple,a=0;a<i;++a)r[a][o=u[n[a]]]=o}a(t._prev),a(e),function a(u,o,s){var l,c,f=n[s],h=r[s++];for(l in h)o[f]=h[l],c=u?u+"|"+l:l,s<i?a(c,o,s):e[c]||t.cell(c,o)}("",{},0)},Xr.init=function(t){var e=this._inputs=[],n=this._outputs=[],r={};function i(t){for(var n,i=Object(p.g)(Object(p.e)(t)),a=0,u=i.length;a<u;++a)r[n=i[a]]||(r[n]=1,e.push(n))}this._dims=Object(p.g)(t.groupby),this._dnames=this._dims.map((function(t){var e=Object(p.f)(t);return i(t),n.push(e),e})),this.cellkey=t.key?t.key:Gn(this._dims),this._countOnly=!0,this._counts=[],this._measures=[];var a,u,o,s,l,c,f=t.fields||[null],h=t.ops||["count"],d=t.as||[],g=f.length,m={};for(g!==h.length&&Object(p.l)("Unmatched number of fields and aggregate ops."),c=0;c<g;++c)a=f[c],u=h[c],null==a&&"count"!==u&&Object(p.l)("Null aggregate field specified."),l=Zn(u,s=Object(p.f)(a),d[c]),n.push(l),"count"!==u?((o=m[s])||(i(a),(o=m[s]=[]).field=a,this._measures.push(o)),"count"!==u&&(this._countOnly=!1),o.push(Kn(u,l))):this._counts.push(l);return this._measures=this._measures.map((function(t){return nr(t,t.field)})),{}},Xr.cellkey=Gn(),Xr.cell=function(t,e){var n=this.value[t];return n?0===n.num&&this._drop&&n.stamp<this.stamp?(n.stamp=this.stamp,this._adds[this._alen++]=n):n.stamp<this.stamp&&(n.stamp=this.stamp,this._mods[this._mlen++]=n):(n=this.value[t]=this.newcell(t,e),this._adds[this._alen++]=n),n},Xr.newcell=function(t,e){var n={key:t,num:0,agg:null,tuple:this.newtuple(e,this._prev&&this._prev[t]),stamp:this.stamp,store:!1};if(!this._countOnly){var r,i=this._measures,a=i.length;for(n.agg=Array(a),r=0;r<a;++r)n.agg[r]=new i[r](n)}return n.store&&(n.data=new Wr),n},Xr.newtuple=function(t,e){var n,r,i=this._dnames,a=this._dims,u={};for(n=0,r=a.length;n<r;++n)u[i[n]]=a[n](t);return e?M(e.tuple,u):w(u)},Xr.add=function(t){var e,n,r,i=this.cellkey(t),a=this.cell(i,t);if(a.num+=1,!this._countOnly)for(a.store&&a.data.add(t),n=0,r=(e=a.agg).length;n<r;++n)e[n].add(e[n].get(t),t)},Xr.rem=function(t){var e,n,r,i=this.cellkey(t),a=this.cell(i,t);if(a.num-=1,!this._countOnly)for(a.store&&a.data.rem(t),n=0,r=(e=a.agg).length;n<r;++n)e[n].rem(e[n].get(t),t)},Xr.celltuple=function(t){var e,n,r,i=t.tuple,a=this._counts;for(t.store&&t.data.values(),n=0,r=a.length;n<r;++n)i[a[n]]=t.num;if(!this._countOnly)for(n=0,r=(e=t.agg).length;n<r;++n)e[n].set(i);return i},Xr.changes=function(t){var e,n,r,i,a=this._adds,u=this._mods,o=this._prev,s=this._drop,l=t.add,c=t.rem,f=t.mod;if(o)for(n in o)e=o[n],s&&!e.num||c.push(e.tuple);for(r=0,i=this._alen;r<i;++r)l.push(this.celltuple(a[r])),a[r]=null;for(r=0,i=this._mlen;r<i;++r)(0===(e=u[r]).num&&s?c:f).push(this.celltuple(e)),u[r]=null;return this._alen=this._mlen=0,this._prev=null,t};function Gr(t){Wn.call(this,null,t)}Gr.Definition={type:"Bin",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"anchor",type:"number"},{name:"maxbins",type:"number",default:20},{name:"base",type:"number",default:10},{name:"divide",type:"number",array:!0,default:[5,2]},{name:"extent",type:"number",array:!0,length:2,required:!0},{name:"span",type:"number"},{name:"step",type:"number"},{name:"steps",type:"number",array:!0},{name:"minstep",type:"number",default:0},{name:"nice",type:"boolean",default:!0},{name:"name",type:"string"},{name:"as",type:"string",array:!0,length:2,default:["bin0","bin1"]}]};var Zr=Object(p.w)(Gr,Wn);Zr.transform=function(t,e){var n,r=this._bins(t),i=r.start,a=r.step,u=t.as||["bin0","bin1"],o=u[0],s=u[1];return n=t.modified()?(e=e.reflow(!0)).SOURCE:e.modified(Object(p.e)(t.field))?e.ADD_MOD:e.ADD,e.visit(n,(function(t){var e=r(t);t[o]=e,t[s]=null==e?null:i+a*(1+(e-i)/a)})),e.modifies(u)},Zr._bins=function(t){if(this.value&&!t.modified())return this.value;var e,n,r=t.field,i=function(t){var e,n,r,i,a,u,o,s,l=t.maxbins||20,c=t.base||10,f=Math.log(c),h=t.divide||[5,2],d=t.extent[0],p=t.extent[1],g=t.span||p-d||Math.abs(d)||1;if(t.step)e=t.step;else if(t.steps){for(a=g/l,u=0,o=t.steps.length;u<o&&t.steps[u]<a;++u);e=t.steps[Math.max(0,u-1)]}else{for(n=Math.ceil(Math.log(l)/f),r=t.minstep||0,e=Math.max(r,Math.pow(c,Math.round(Math.log(g)/f)-n));Math.ceil(g/e)>l;)e*=c;for(u=0,o=h.length;u<o;++u)(a=e/h[u])>=r&&g/a<=l&&(e=a)}return i=(a=Math.log(e))>=0?0:1+~~(-a/f),s=Math.pow(c,-i-1),(t.nice||void 0===t.nice)&&(d=d<(a=Math.floor(d/e+s)*e)?a-e:a,p=Math.ceil(p/e)*e),{start:d,stop:p===d?d+e:p,step:e}}(t),a=i.start,u=i.stop,o=i.step;null!=(e=t.anchor)&&(n=e-(a+o*Math.floor((e-a)/o)),a+=n,u+=n);var s=function(t){var e=r(t);return null==e?null:(e=Math.max(a,Math.min(+e,u-o)),a+o*Math.floor(1e-14+(e-a)/o))};return s.start=a,s.stop=u,s.step=o,this.value=Object(p.d)(s,Object(p.e)(r),t.name||"bin_"+Object(p.f)(r))};var Jr=function(t,e,n){var r=t,i=e||[],a=n||[],u={},o=0;return{add:function(t){a.push(t)},remove:function(t){u[r(t)]=++o},size:function(){return i.length},data:function(t,e){return o&&(i=i.filter((function(t){return!u[r(t)]})),u={},o=0),e&&t&&i.sort(t),a.length&&(i=t?Object(p.J)(t,i,a.sort(t)):i.concat(a),a=[]),i}}};function Qr(t){Wn.call(this,[],t)}function Kr(t){T.call(this,null,ti,t)}function ti(t){return this.value&&!t.modified()?this.value:Object(p.i)(t.fields,t.orders)}function ei(t){Wn.call(this,null,t)}Qr.Definition={type:"Collect",metadata:{source:!0},params:[{name:"sort",type:"compare"}]},Object(p.w)(Qr,Wn).transform=function(t,e){var n=e.fork(e.ALL),r=Jr(_,this.value,n.materialize(n.ADD).add),i=t.sort,a=e.changed()||i&&(t.modified("sort")||e.modified(i.fields));return n.visit(n.REM,r.remove),this.modified(a),this.value=n.source=r.data(k(i),a),e.source&&e.source.root&&(this.value.root=e.source.root),n},Object(p.w)(Kr,T),ei.Definition={type:"CountPattern",metadata:{generates:!0,changes:!0},params:[{name:"field",type:"field",required:!0},{name:"case",type:"enum",values:["upper","lower","mixed"],default:"mixed"},{name:"pattern",type:"string",default:'[\\w"]+'},{name:"stopwords",type:"string",default:""},{name:"as",type:"string",array:!0,length:2,default:["text","count"]}]};var ni=Object(p.w)(ei,Wn);function ri(t){Wn.call(this,null,t)}ni.transform=function(t,e){function n(e){return function(n){for(var r,i=function(t,e,n){switch(e){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase()}return t.match(n)}(o(n),t.case,a)||[],s=0,l=i.length;s<l;++s)u.test(r=i[s])||e(r)}}var r=this._parameterCheck(t,e),i=this._counts,a=this._match,u=this._stop,o=t.field,s=t.as||["text","count"],l=n((function(t){i[t]=1+(i[t]||0)})),c=n((function(t){i[t]-=1}));return r?e.visit(e.SOURCE,l):(e.visit(e.ADD,l),e.visit(e.REM,c)),this._finish(e,s)},ni._parameterCheck=function(t,e){var n=!1;return!t.modified("stopwords")&&this._stop||(this._stop=new RegExp("^"+(t.stopwords||"")+"$","i"),n=!0),!t.modified("pattern")&&this._match||(this._match=new RegExp(t.pattern||"[\\w']+","g"),n=!0),(t.modified("field")||e.modified(t.field.fields))&&(n=!0),n&&(this._counts={}),n},ni._finish=function(t,e){var n,r,i,a=this._counts,u=this._tuples||(this._tuples={}),o=e[0],s=e[1],l=t.fork(t.NO_SOURCE|t.NO_FIELDS);for(n in a)r=u[n],i=a[n]||0,!r&&i?(u[n]=r=w({}),r[o]=n,r[s]=i,l.add.push(r)):0===i?(r&&l.rem.push(r),a[n]=null,u[n]=null):r[s]!==i&&(r[s]=i,l.mod.push(r));return l.modifies(e)},ri.Definition={type:"Cross",metadata:{generates:!0},params:[{name:"filter",type:"expr"},{name:"as",type:"string",array:!0,length:2,default:["a","b"]}]},Object(p.w)(ri,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE),r=this.value,i=t.as||["a","b"],a=i[0],u=i[1];return!r||e.changed(e.ADD_REM)||t.modified("as")||t.modified("filter")?(r&&(n.rem=r),r=e.materialize(e.SOURCE).source,n.add=this.value=function(t,e,n,r){for(var i,a,u=[],o={},s=t.length,l=0;l<s;++l)for(o[e]=a=t[l],i=0;i<s;++i)o[n]=t[i],r(o)&&(u.push(w(o)),(o={})[e]=a);return u}(r,a,u,t.filter||p.cb)):n.mod=r,n.source=this.value,n.modifies(i)};var ii={kde:xr,mixture:function(t,e){var n,r={},i=0;function a(t){var e,n=[],r=0;for(e=0;e<i;++e)r+=n[e]=null==t[e]?1:+t[e];for(e=0;e<i;++e)n[e]/=r;return n}return r.weights=function(t){return arguments.length?(n=a(e=t||[]),r):e},r.distributions=function(n){return arguments.length?(n?(i=n.length,t=n):(i=0,t=[]),r.weights(e)):t},r.sample=function(){for(var e=ir(),r=t[i-1],a=n[0],u=0;u<i-1;a+=n[++u])if(e<a){r=t[u];break}return r.sample()},r.pdf=function(e){for(var r=0,a=0;a<i;++a)r+=n[a]*t[a].pdf(e);return r},r.cdf=function(e){for(var r=0,a=0;a<i;++a)r+=n[a]*t[a].cdf(e);return r},r.icdf=function(){throw Error("Mixture icdf not supported.")},r.distributions(t).weights(e)},normal:_r,lognormal:function(t,e){var n,r,i={mean:function(t){return arguments.length?(n=t||0,i):n},stdev:function(t){return arguments.length?(r=null==t?1:t,i):r},sample:()=>Ar(n,r),pdf:t=>Or(t,n,r),cdf:t=>Mr(t,n,r),icdf:t=>kr(t,n,r)};return i.mean(t).stdev(e)},uniform:function(t,e){var n,r,i={min:function(t){return arguments.length?(n=t||0,i):n},max:function(t){return arguments.length?(r=null==t?1:t,i):r},sample:()=>Er(n,r),pdf:t=>jr(t,n,r),cdf:t=>Dr(t,n,r),icdf:t=>Cr(t,n,r)};return null==e&&(e=null==t?1:t,t=0),i.min(t).max(e)}},ai="distributions",ui="function",oi="field";function si(t){Wn.call(this,null,t)}var li=[{key:{function:"normal"},params:[{name:"mean",type:"number",default:0},{name:"stdev",type:"number",default:1}]},{key:{function:"lognormal"},params:[{name:"mean",type:"number",default:0},{name:"stdev",type:"number",default:1}]},{key:{function:"uniform"},params:[{name:"min",type:"number",default:0},{name:"max",type:"number",default:1}]},{key:{function:"kde"},params:[{name:"field",type:"field",required:!0},{name:"from",type:"data"},{name:"bandwidth",type:"number",default:0}]}],ci={key:{function:"mixture"},params:[{name:"distributions",type:"param",array:!0,params:li},{name:"weights",type:"number",array:!0}]};function fi(t,e){return t?t.map((function(t,n){return e[n]||Object(p.f)(t)})):null}function hi(t,e,n){var r,i,a,u,o,s,l=[],c=function(t){return t(u)};if(null==e)l.push(t.map(n));else for(r={},i=0,a=t.length;i<a;++i)u=t[i],(s=r[o=e.map(c)])||(r[o]=s=[],s.dims=o,l.push(s)),s.push(n(u));return l}si.Definition={type:"Density",metadata:{generates:!0},params:[{name:"extent",type:"number",array:!0,length:2},{name:"steps",type:"number"},{name:"minsteps",type:"number",default:25},{name:"maxsteps",type:"number",default:200},{name:"method",type:"string",default:"pdf",values:["pdf","cdf"]},{name:"distribution",type:"param",params:li.concat(ci)},{name:"as",type:"string",array:!0,default:["value","density"]}]},Object(p.w)(si,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){var r=function t(e,n){var r=e[ui];Object(p.t)(ii,r)||Object(p.l)("Unknown distribution function: "+r);var i=ii[r]();for(var a in e)a===oi?i.data((e.from||n()).map(e[a])):a===ai?i[a](e[a].map((function(e){return t(e,n)}))):typeof i[a]===ui&&i[a](e[a]);return i}(t.distribution,function(t){return function(){return t.materialize(t.SOURCE).source}}(e)),i=t.steps||t.minsteps||25,a=t.steps||t.maxsteps||200,u=t.method||"pdf";"pdf"!==u&&"cdf"!==u&&Object(p.l)("Invalid density method: "+u),t.extent||r.data||Object(p.l)("Missing density extent parameter."),u=r[u];var o=t.as||["value","density"],s=t.extent||Object(p.n)(r.data()),l=$r(u,s,i,a).map(t=>{var e={};return e[o[0]]=t[0],e[o[1]]=t[1],w(e)});this.value&&(n.rem=this.value),this.value=n.add=n.source=l}return n};function di(t){Wn.call(this,null,t)}function pi(t){T.call(this,null,gi,t),this.modified(!0)}function gi(t){var e=t.expr;return this.value&&!t.modified("expr")?this.value:Object(p.d)(n=>e(n,t),Object(p.e)(e),Object(p.f)(e))}function mi(t){Wn.call(this,[void 0,void 0],t)}function vi(t,e){T.call(this,t),this.parent=e}di.Definition={type:"DotBin",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"step",type:"number"},{name:"smooth",type:"boolean",default:!1},{name:"as",type:"string",default:"bin"}]},Object(p.w)(di,Wn).transform=function(t,e){if(this.value&&!t.modified()&&!e.changed())return e;const n=e.materialize(e.SOURCE).source,r=hi(e.source,t.groupby,p.v),i=t.smooth||!1,a=t.field,u=t.step||function(t,e){return Object(p.T)(Object(p.n)(t,e))/30}(n,a),o=k((t,e)=>a(t)-a(e)),s=t.as||"bin",l=r.length;let c,f=1/0,h=-1/0,d=0;for(;d<l;++d){const t=r[d].sort(o);c=-1;for(const e of cr(t,u,i,a))e<f&&(f=e),e>h&&(h=e),t[++c][s]=e}return this.value={start:f,stop:h,step:u},e.reflow(!0).modifies(s)},Object(p.w)(pi,T),mi.Definition={type:"Extent",metadata:{},params:[{name:"field",type:"field",required:!0}]},Object(p.w)(mi,Wn).transform=function(t,e){var n,r=this.value,i=t.field,a=r[0],u=r[1];if(((n=e.changed()||e.modified(i.fields)||t.modified("field"))||null==a)&&(a=1/0,u=-1/0),e.visit(n?e.SOURCE:e.ADD,(function(t){var e=i(t);null!=e&&((e=+e)<a&&(a=e),e>u&&(u=e))})),!Number.isFinite(a)||!Number.isFinite(u)){let t=Object(p.f)(i);t&&(t=` for field "${t}"`),e.dataflow.warn(`Infinite extent${t}: [${a}, ${u}]`),a=u=void 0}this.value=[a,u]};var yi=Object(p.w)(vi,T);function bi(t){Wn.call(this,{},t),this._keys=Object(p.q)();var e=this._targets=[];e.active=0,e.forEach=function(t){for(var n=0,r=e.active;n<r;++n)t(e[n],n,e)}}yi.connect=function(t){return this.targets().add(t),t.source=this},yi.add=function(t){this.value.add.push(t)},yi.rem=function(t){this.value.rem.push(t)},yi.mod=function(t){this.value.mod.push(t)},yi.init=function(t){this.value.init(t,t.NO_SOURCE)},yi.evaluate=function(){return this.value};var _i=Object(p.w)(bi,Wn);function xi(t){T.call(this,null,wi,t)}function wi(t){return this.value&&!t.modified()?this.value:Object(p.y)(t.name)?Object(p.g)(t.name).map((function(t){return Object(p.r)(t)})):Object(p.r)(t.name,t.as)}function Ai(t){Wn.call(this,Object(p.q)(),t)}function Oi(t){Wn.call(this,[],t)}function Mi(t){Wn.call(this,[],t)}function ki(t){Wn.call(this,null,t)}function Ei(t){Wn.call(this,[],t)}_i.activate=function(t){this._targets[this._targets.active++]=t},_i.subflow=function(t,e,n,r){var i,a,u=this.value,o=Object(p.t)(u,t)&&u[t];return o?o.value.stamp<n.stamp&&(o.init(n),this.activate(o)):(a=r||(a=this._group[t])&&a.tuple,o=(i=n.dataflow).add(new vi(n.fork(n.NO_SOURCE),this)).connect(e(i,t,a)),u[t]=o,this.activate(o)),o},_i.transform=function(t,e){var n=e.dataflow,r=this,i=t.key,a=t.subflow,u=this._keys,o=t.modified("key");function s(t){return r.subflow(t,a,e)}return this._group=t.group||{},this._targets.active=0,e.visit(e.REM,(function(t){var e=_(t),n=u.get(e);void 0!==n&&(u.delete(e),s(n).rem(t))})),e.visit(e.ADD,(function(t){var e=i(t);u.set(_(t),e),s(e).add(t)})),o||e.modified(i.fields)?e.visit(e.MOD,(function(t){var e=_(t),n=u.get(e),r=i(t);n===r?s(r).mod(t):(u.set(e,r),s(n).rem(t),s(r).add(t))})):e.changed(e.MOD)&&e.visit(e.MOD,(function(t){s(u.get(_(t))).mod(t)})),o&&e.visit(e.REFLOW,(function(t){var e=_(t),n=u.get(e),r=i(t);n!==r&&(u.set(e,r),s(n).rem(t),s(r).add(t))})),u.empty>n.cleanThreshold&&n.runAfter(u.clean),e},Object(p.w)(xi,T),Ai.Definition={type:"Filter",metadata:{changes:!0},params:[{name:"expr",type:"expr",required:!0}]},Object(p.w)(Ai,Wn).transform=function(t,e){var n=e.dataflow,r=this.value,i=e.fork(),a=i.add,u=i.rem,o=i.mod,s=t.expr,l=!0;function c(e){var n=_(e),i=s(e,t),c=r.get(n);i&&c?(r.delete(n),a.push(e)):i||c?l&&i&&!c&&o.push(e):(r.set(n,1),u.push(e))}return e.visit(e.REM,(function(t){var e=_(t);r.has(e)?r.delete(e):u.push(t)})),e.visit(e.ADD,(function(e){s(e,t)?a.push(e):r.set(_(e),1)})),e.visit(e.MOD,c),t.modified()&&(l=!1,e.visit(e.REFLOW,c)),r.empty>n.cleanThreshold&&n.runAfter(r.clean),i},Oi.Definition={type:"Flatten",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0}]},Object(p.w)(Oi,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE),r=t.fields,i=fi(r,t.as||[]),a=i.length;return n.rem=this.value,e.visit(e.SOURCE,(function(t){for(var e,u,o,s=r.map((function(e){return e(t)})),l=s.reduce((function(t,e){return Math.max(t,e.length)}),0),c=0;c<l;++c){for(u=A(t),e=0;e<a;++e)u[i[e]]=null==(o=s[e][c])?null:o;n.add.push(u)}})),this.value=n.source=n.add,n.modifies(i)},Mi.Definition={type:"Fold",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0,length:2,default:["key","value"]}]},Object(p.w)(Mi,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE),r=t.fields,i=r.map(p.f),a=t.as||["key","value"],u=a[0],o=a[1],s=r.length;return n.rem=this.value,e.visit(e.SOURCE,(function(t){for(var e,a=0;a<s;++a)(e=A(t))[u]=i[a],e[o]=r[a](t),n.add.push(e)})),this.value=n.source=n.add,n.modifies(a)},ki.Definition={type:"Formula",metadata:{modifies:!0},params:[{name:"expr",type:"expr",required:!0},{name:"as",type:"string",required:!0},{name:"initonly",type:"boolean"}]},Object(p.w)(ki,Wn).transform=function(t,e){var n=t.expr,r=t.as,i=t.modified(),a=t.initonly?e.ADD:i?e.SOURCE:e.modified(n.fields)||e.modified(r)?e.ADD_MOD:e.ADD;return i&&(e=e.materialize().reflow(!0)),t.initonly||e.modifies(r),e.visit(a,e=>e[r]=n(e,t))},Object(p.w)(Ei,Wn).transform=function(t,e){var n,r,i,a=this.value,u=e.fork(e.ALL),o=t.size-a.length,s=t.generator;if(o>0){for(n=[];--o>=0;)n.push(i=w(s(t))),a.push(i);u.add=u.add.length?u.materialize(u.ADD).add.concat(n):n}else r=a.slice(0,-o),u.rem=u.rem.length?u.materialize(u.REM).rem.concat(r):r,a=a.slice(-o);return u.source=this.value=a,u};var ji={value:"value",median:Lr,mean:function(t,e){let n=0,r=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(++n,r+=e);else{let i=-1;for(let a of t)null!=(a=e(a,++i,t))&&(a=+a)>=a&&(++n,r+=a)}if(n)return r/n},min:function(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n},max:function(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}},Di=[];function Ci(t){Wn.call(this,[],t)}function Fi(t){Hr.call(this,t)}Ci.Definition={type:"Impute",metadata:{changes:!0},params:[{name:"field",type:"field",required:!0},{name:"key",type:"field",required:!0},{name:"keyvals",array:!0},{name:"groupby",type:"field",array:!0},{name:"method",type:"enum",default:"value",values:["value","mean","median","max","min"]},{name:"value",default:0}]},Object(p.w)(Ci,Wn).transform=function(t,e){var n,r,i,a,u,o,s,l,c,f,h=e.fork(e.ALL),d=function(t){var e,n=t.method||ji.value;if(null!=ji[n])return n===ji.value?(e=void 0!==t.value?t.value:0,function(){return e}):ji[n];Object(p.l)("Unrecognized imputation method: "+n)}(t),g=function(t){var e=t.field;return function(t){return t?e(t):NaN}}(t),m=Object(p.f)(t.field),v=Object(p.f)(t.key),y=(t.groupby||[]).map(p.f),b=function(t,e,n,r){var i,a,u,o,s,l,c,f,h=function(t){return t(f)},d=[],p=r?r.slice():[],g={},m={};for(p.forEach((function(t,e){g[t]=e+1})),o=0,c=t.length;o<c;++o)f=t[o],l=n(f),s=g[l]||(g[l]=p.push(l)),a=(i=e?e.map(h):Di)+"",(u=m[a])||(u=m[a]=[],d.push(u),u.values=i),u[s-1]=f;return d.domain=p,d}(e.source,t.groupby,t.key,t.keyvals),_=[],x=this.value,A=b.domain.length;for(u=0,l=b.length;u<l;++u)for(i=(n=b[u]).values,r=NaN,s=0;s<A;++s)if(null==n[s]){for(a=b.domain[s],f={_impute:!0},o=0,c=i.length;o<c;++o)f[y[o]]=i[o];f[v]=a,f[m]=Number.isNaN(r)?r=d(n,g):r,_.push(w(f))}return _.length&&(h.add=h.materialize(h.ADD).add.concat(_)),x.length&&(h.rem=h.materialize(h.REM).rem.concat(x)),this.value=_,h},Fi.Definition={type:"JoinAggregate",metadata:{modifies:!0},params:[{name:"groupby",type:"field",array:!0},{name:"fields",type:"field",null:!0,array:!0},{name:"ops",type:"enum",array:!0,values:Qn},{name:"as",type:"string",null:!0,array:!0},{name:"key",type:"field"}]};var Si=Object(p.w)(Fi,Hr);function Bi(t){Wn.call(this,null,t)}function Ti(t){T.call(this,null,Ri,t)}function Ri(t){return this.value&&!t.modified()?this.value:Object(p.G)(t.fields,t.flat)}function zi(t){Wn.call(this,[],t)}function Ni(t,e,n){n.forEach(w);const r=e.fork(e.NO_FIELDS&e.NO_SOURCE);return r.rem=t.value,t.value=r.add=r.source=n,r}function Pi(t){Wn.call(this,{},t)}function Li(t){T.call(this,null,Ui,t)}function Ui(t){if(this.value&&!t.modified())return this.value;var e,n,r,i=1/0,a=-1/0,u=t.extents;for(e=0,n=u.length;e<n;++e)(r=u[e])[0]<i&&(i=r[0]),r[1]>a&&(a=r[1]);return[i,a]}function qi(t){T.call(this,null,Ii,t)}function Ii(t){return this.value&&!t.modified()?this.value:t.values.reduce((function(t,e){return t.concat(e)}),[])}function $i(t){Wn.call(this,null,t)}function Yi(t){Hr.call(this,t)}Si.transform=function(t,e){var n,r=this,i=t.modified();return r.value&&(i||e.modified(r._inputs,!0))?(n=r.value=i?r.init(t):{},e.visit(e.SOURCE,(function(t){r.add(t)}))):(n=r.value=r.value||this.init(t),e.visit(e.REM,(function(t){r.rem(t)})),e.visit(e.ADD,(function(t){r.add(t)}))),r.changes(),e.visit(e.SOURCE,(function(t){Object(p.m)(t,n[r.cellkey(t)].tuple)})),e.reflow(i).modifies(this._outputs)},Si.changes=function(){var t,e,n=this._adds,r=this._mods;for(t=0,e=this._alen;t<e;++t)this.celltuple(n[t]),n[t]=null;for(t=0,e=this._mlen;t<e;++t)this.celltuple(r[t]),r[t]=null;this._alen=this._mlen=0},Bi.Definition={type:"KDE",metadata:{generates:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"cumulative",type:"boolean",default:!1},{name:"counts",type:"boolean",default:!1},{name:"bandwidth",type:"number",default:0},{name:"extent",type:"number",array:!0,length:2},{name:"resolve",type:"enum",values:["shared","independent"],default:"independent"},{name:"steps",type:"number"},{name:"minsteps",type:"number",default:25},{name:"maxsteps",type:"number",default:200},{name:"as",type:"string",array:!0,default:["value","density"]}]},Object(p.w)(Bi,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const r=e.materialize(e.SOURCE).source,i=hi(r,t.groupby,t.field),a=(t.groupby||[]).map(p.f),u=t.bandwidth,o=t.cumulative?"cdf":"pdf",s=t.as||["value","density"],l=[];let c=t.extent,f=t.steps||t.minsteps||25,h=t.steps||t.maxsteps||200;"pdf"!==o&&"cdf"!==o&&Object(p.l)("Invalid density method: "+o),"shared"===t.resolve&&(c||(c=Object(p.n)(r,t.field)),f=h=t.steps||h),i.forEach(e=>{const n=xr(e,u)[o],r=t.counts?e.length:1,i=c||Object(p.n)(e);$r(n,i,f,h).forEach(t=>{const n={};for(let t=0;t<a.length;++t)n[a[t]]=e.dims[t];n[s[0]]=t[0],n[s[1]]=t[1]*r,l.push(w(n))})}),this.value&&(n.rem=this.value),this.value=n.add=n.source=l}return n},Object(p.w)(Ti,T),Object(p.w)(zi,Wn).transform=function(t,e){const n=e.dataflow;return t.values?Ni(this,e,n.parse(t.values,t.format)):n.request(t.url,t.format).then(t=>Ni(this,e,Object(p.g)(t.data)))},Pi.Definition={type:"Lookup",metadata:{modifies:!0},params:[{name:"index",type:"index",params:[{name:"from",type:"data",required:!0},{name:"key",type:"field",required:!0}]},{name:"values",type:"field",array:!0},{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0},{name:"default",default:null}]},Object(p.w)(Pi,Wn).transform=function(t,e){var n,r,i=e,a=t.as,u=t.fields,o=t.index,s=t.values,l=null==t.default?null:t.default,c=t.modified(),f=c?e.SOURCE:e.ADD,h=u.length;return s?(r=s.length,h>1&&!a&&Object(p.l)('Multi-field lookup requires explicit "as" parameter.'),a&&a.length!==h*r&&Object(p.l)('The "as" parameter has too few output field names.'),a=a||s.map(p.f),n=function(t){for(var e,n,i=0,c=0;i<h;++i)if(null==(n=o.get(u[i](t))))for(e=0;e<r;++e,++c)t[a[c]]=l;else for(e=0;e<r;++e,++c)t[a[c]]=s[e](n)}):(a||Object(p.l)("Missing output field names."),n=function(t){for(var e,n=0;n<h;++n)e=o.get(u[n](t)),t[a[n]]=null==e?l:e}),c?i=e.reflow(!0):f|=u.some((function(t){return e.modified(t.fields)}))?e.MOD:0,e.visit(f,n),i.modifies(a)},Object(p.w)(Li,T),Object(p.w)(qi,T),Object(p.w)($i,Wn),$i.prototype.transform=function(t,e){return this.modified(t.modified()),this.value=t,e.fork(e.NO_SOURCE|e.NO_FIELDS)},Yi.Definition={type:"Pivot",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"value",type:"field",required:!0},{name:"op",type:"enum",values:Qn,default:"sum"},{name:"limit",type:"number",default:0},{name:"key",type:"field"}]};var Wi=Object(p.w)(Yi,Hr);function Vi(t){bi.call(this,t)}function Hi(t){Wn.call(this,null,t)}function Xi(t){Wn.call(this,null,t)}Wi._transform=Wi.transform,Wi.transform=function(t,e){return this._transform(function(t,e){var n=t.field,r=t.value,i=("count"===t.op?"__count__":t.op)||"sum",a=Object(p.e)(n).concat(Object(p.e)(r)),u=function(t,e,n){var r={},i=[];return n.visit(n.SOURCE,(function(e){var n=t(e);r[n]||(r[n]=1,i.push(n))})),i.sort((function(t,e){return(t<e||null==t)&&null!=e?-1:(t>e||null==e)&&null!=t?1:(e=e instanceof Date?+e:e,(t=t instanceof Date?+t:t)!==t&&e==e?-1:e!=e&&t==t?1:0)})),e?i.slice(0,e):i}(n,t.limit||0,e);e.changed()&&t.set("__pivot__",null,null,!0);return{key:t.key,groupby:t.groupby,ops:u.map((function(){return i})),fields:u.map((function(t){return function(t,e,n,r){return Object(p.d)((function(r){return e(r)===t?n(r):NaN}),r,t+"")}(t,n,r,a)})),as:u.map((function(t){return t+""})),modified:t.modified.bind(t)}}(t,e),e)},Object(p.w)(Vi,bi).transform=function(t,e){var n=this,r=t.subflow,i=t.field;return(t.modified("field")||i&&e.modified(Object(p.e)(i)))&&Object(p.l)("PreFacet does not support field modification."),this._targets.active=0,e.visit(e.MOD,(function(t){var a=n.subflow(_(t),r,e,t);i?i(t).forEach((function(t){a.mod(t)})):a.mod(t)})),e.visit(e.ADD,(function(t){var a=n.subflow(_(t),r,e,t);i?i(t).forEach((function(t){a.add(w(t))})):a.add(t)})),e.visit(e.REM,(function(t){var a=n.subflow(_(t),r,e,t);i?i(t).forEach((function(t){a.rem(t)})):a.rem(t)})),e},Hi.Definition={type:"Project",metadata:{generates:!0,changes:!0},params:[{name:"fields",type:"field",array:!0},{name:"as",type:"string",null:!0,array:!0}]},Object(p.w)(Hi,Wn).transform=function(t,e){var n,r,i=t.fields,a=fi(t.fields,t.as||[]),u=i?function(t,e){return function(t,e,n,r){for(var i=0,a=n.length;i<a;++i)e[r[i]]=n[i](t);return e}(t,e,i,a)}:O;return this.value?r=this.value:(e=e.addAll(),r=this.value={}),n=e.fork(e.NO_SOURCE),e.visit(e.REM,(function(t){var e=_(t);n.rem.push(r[e]),r[e]=null})),e.visit(e.ADD,(function(t){var e=u(t,w({}));r[_(t)]=e,n.add.push(e)})),e.visit(e.MOD,(function(t){n.mod.push(u(t,r[_(t)]))})),n},Object(p.w)(Xi,Wn).transform=function(t,e){return this.value=t.value,t.modified("value")?e.fork(e.NO_SOURCE|e.NO_FIELDS):e.StopPropagation};var Gi=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a};function Zi(t){Wn.call(this,null,t)}Zi.Definition={type:"Quantile",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"probs",type:"number",array:!0},{name:"step",type:"number",default:.01},{name:"as",type:"string",array:!0,default:["prob","value"]}]};var Ji=Object(p.w)(Zi,Wn);function Qi(t){Wn.call(this,null,t)}function Ki(t){Wn.call(this,[],t),this.count=0}function ta(t){Wn.call(this,null,t)}function ea(t){Wn.call(this,null,t),this.modified(!0)}function na(t){Wn.call(this,Object(p.q)(),t)}function ra(t){Wn.call(this,null,t)}Ji.transform=function(t,e){var n=e.fork(e.NO_SOURCE|e.NO_FIELDS),r=t.as||["prob","value"];if(this.value&&!t.modified()&&!e.changed())return n.source=this.value,n;const i=hi(e.materialize(e.SOURCE).source,t.groupby,t.field),a=(t.groupby||[]).map(p.f),u=[],o=t.step||.01,s=t.probs||Gi(o/2,1-1e-14,o),l=s.length;return i.forEach(t=>{const e=fr(t,s);for(let n=0;n<l;++n){const i={};for(let e=0;e<a.length;++e)i[a[e]]=t.dims[e];i[r[0]]=s[n],i[r[1]]=e[n],u.push(w(i))}}),this.value&&(n.rem=this.value),this.value=n.add=n.source=u,n},Object(p.w)(Qi,Wn).transform=function(t,e){var n,r;return this.value?r=this.value:(n=e=e.addAll(),r=this.value={}),t.derive&&(n=e.fork(e.NO_SOURCE),e.visit(e.REM,t=>{var e=_(t);n.rem.push(r[e]),r[e]=null}),e.visit(e.ADD,t=>{var e=A(t);r[_(t)]=e,n.add.push(e)}),e.visit(e.MOD,t=>{n.mod.push(O(t,r[_(t)]))}),e.mod.length&&(e.materialize(e.MOD),n.modifies(Object.keys(e.mod[0])))),n},Ki.Definition={type:"Sample",metadata:{},params:[{name:"size",type:"number",default:1e3}]},Object(p.w)(Ki,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE),r=t.modified("size"),i=t.size,a=this.value,u=this.count,o=0,s=a.reduce((function(t,e){return t[_(e)]=1,t}),{});function l(t){var e,r;a.length<i?a.push(t):(r=~~((u+1)*ir()))<a.length&&r>=o&&(e=a[r],s[_(e)]&&n.rem.push(e),a[r]=t),++u}if(e.rem.length&&(e.visit(e.REM,(function(t){var e=_(t);s[e]&&(s[e]=-1,n.rem.push(t)),--u})),a=a.filter((function(t){return-1!==s[_(t)]}))),(e.rem.length||r)&&a.length<i&&e.source&&(o=u=a.length,e.visit(e.SOURCE,(function(t){s[_(t)]||l(t)})),o=-1),r&&a.length>i){for(var c=0,f=a.length-i;c<f;++c)s[_(a[c])]=-1,n.rem.push(a[c]);a=a.slice(f)}return e.mod.length&&e.visit(e.MOD,(function(t){s[_(t)]&&n.mod.push(t)})),e.add.length&&e.visit(e.ADD,l),(e.add.length||o<0)&&(n.add=a.filter((function(t){return!s[_(t)]}))),this.count=u,this.value=n.source=a,n},ta.Definition={type:"Sequence",metadata:{generates:!0,changes:!0},params:[{name:"start",type:"number",required:!0},{name:"stop",type:"number",required:!0},{name:"step",type:"number",default:1},{name:"as",type:"string",default:"data"}]},Object(p.w)(ta,Wn).transform=function(t,e){if(!this.value||t.modified()){var n=e.materialize().fork(e.MOD),r=t.as||"data";return n.rem=this.value?e.rem.concat(this.value):e.rem,this.value=Gi(t.start,t.stop,t.step||1).map((function(t){var e={};return e[r]=t,w(e)})),n.add=e.add.concat(this.value),n}},Object(p.w)(ea,Wn).transform=function(t,e){return this.value=e.source,e.changed()?e.fork(e.NO_SOURCE|e.NO_FIELDS):e.StopPropagation},Object(p.w)(na,Wn).transform=function(t,e){var n=e.dataflow,r=t.field,i=this.value,a=!0;function u(t){i.set(r(t),t)}return t.modified("field")||e.modified(r.fields)?(i.clear(),e.visit(e.SOURCE,u)):e.changed()?(e.visit(e.REM,(function(t){i.delete(r(t))})),e.visit(e.ADD,u)):a=!1,this.modified(a),i.empty>n.cleanThreshold&&n.runAfter(i.clean),e.fork()},Object(p.w)(ra,Wn).transform=function(t,e){(!this.value||t.modified("field")||t.modified("sort")||e.changed()||t.sort&&e.modified(t.sort.fields))&&(this.value=(t.sort?e.source.slice().sort(k(t.sort)):e.source).map(t.field))};const ia={row_number:function(){return{next:t=>t.index+1}},rank:function(){let t;return{init:()=>t=1,next:e=>{let n=e.index,r=e.data;return n&&e.compare(r[n-1],r[n])?t=n+1:t}}},dense_rank:function(){let t;return{init:()=>t=1,next:e=>{let n=e.index,r=e.data;return n&&e.compare(r[n-1],r[n])?++t:t}}},percent_rank:function(){let t=ia.rank(),e=t.next;return{init:t.init,next:t=>(e(t)-1)/(t.data.length-1)}},cume_dist:function(){let t;return{init:()=>t=0,next:e=>{let n=e.index,r=e.data,i=e.compare;if(t<n){for(;n+1<r.length&&!i(r[n],r[n+1]);)++n;t=n}return(1+t)/r.length}}},ntile:function(t,e){(e=+e)>0||Object(p.l)("ntile num must be greater than zero.");let n=ia.cume_dist(),r=n.next;return{init:n.init,next:t=>Math.ceil(e*r(t))}},lag:function(t,e){return e=+e||1,{next:n=>{let r=n.index-e;return r>=0?t(n.data[r]):null}}},lead:function(t,e){return e=+e||1,{next:n=>{let r=n.index+e,i=n.data;return r<i.length?t(i[r]):null}}},first_value:function(t){return{next:e=>t(e.data[e.i0])}},last_value:function(t){return{next:e=>t(e.data[e.i1-1])}},nth_value:function(t,e){return(e=+e)>0||Object(p.l)("nth_value nth must be greater than zero."),{next:n=>{let r=n.i0+(e-1);return r<n.i1?t(n.data[r]):null}}},prev_value:function(t){let e=null;return{next:n=>{let r=t(n.data[n.index]);return null!=r?e=r:e}}},next_value:function(t){let e=null,n=-1;return{next:r=>{let i=r.data;return r.index<=n?e:(n=function(t,e,n){for(let r=e.length;n<r;++n){if(null!=t(e[n]))return n}return-1}(t,i,r.index))<0?(n=i.length,e=null):e=t(i[n])}}}};var aa=Object.keys(ia);function ua(t){let e=this,n=Object(p.g)(t.ops),r=Object(p.g)(t.fields),i=Object(p.g)(t.params),a=Object(p.g)(t.as),u=e.outputs=[],o=e.windows=[],s={},l={},c=!0,f=[],h=[];function d(t){Object(p.g)(Object(p.e)(t)).forEach(t=>s[t]=1)}d(t.sort),n.forEach((function(t,e){let n=r[e],s=Object(p.f)(n),g=Zn(t,s,a[e]);if(d(n),u.push(g),Object(p.t)(ia,t))o.push(function(t,e,n,r){let i=ia[t](e,n);return{init:i.init||p.fb,update:function(t,e){e[r]=i.next(t)}}}(t,r[e],i[e],g));else{if(null==n&&"count"!==t&&Object(p.l)("Null aggregate field specified."),"count"===t)return void f.push(g);c=!1;let e=l[s];e||((e=l[s]=[]).field=n,h.push(e)),e.push(Kn(t,g))}})),(f.length||h.length)&&(e.cell=function(t,e,n){t=t.map(t=>nr(t,t.field));let r={num:0,agg:null,store:!1,count:e};if(!n)for(var i=t.length,a=r.agg=Array(i),u=0;u<i;++u)a[u]=new t[u](r);if(r.store)var o=r.data=new Wr;return r.add=function(t){if(r.num+=1,!n){o&&o.add(t);for(let e=0;e<i;++e)a[e].add(a[e].get(t),t)}},r.rem=function(t){if(r.num-=1,!n){o&&o.rem(t);for(let e=0;e<i;++e)a[e].rem(a[e].get(t),t)}},r.set=function(t){let i,u;for(o&&o.values(),i=0,u=e.length;i<u;++i)t[e[i]]=r.num;if(!n)for(i=0,u=a.length;i<u;++i)a[i].set(t)},r.init=function(){r.num=0,o&&o.reset();for(let t=0;t<i;++t)a[t].init()},r}(h,f,c)),e.inputs=Object.keys(s)}const oa=ua.prototype;oa.init=function(){this.windows.forEach(t=>t.init()),this.cell&&this.cell.init()},oa.update=function(t,e){let n,r=this.cell,i=this.windows,a=t.data,u=i&&i.length;if(r){for(n=t.p0;n<t.i0;++n)r.rem(a[n]);for(n=t.p1;n<t.i1;++n)r.add(a[n]);r.set(e)}for(n=0;n<u;++n)i[n].update(t,e)};var sa=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return ar(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)<0?r=a+1:i=a}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)>0?i=a:r=a+1}return r}}};function la(t){Wn.call(this,{},t),this._mlen=0,this._mods=[]}la.Definition={type:"Window",metadata:{modifies:!0},params:[{name:"sort",type:"compare"},{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:aa.concat(Qn)},{name:"params",type:"number",null:!0,array:!0},{name:"fields",type:"field",null:!0,array:!0},{name:"as",type:"string",null:!0,array:!0},{name:"frame",type:"number",null:!0,array:!0,length:2,default:[null,0]},{name:"ignorePeers",type:"boolean",default:!1}]};var ca=Object(p.w)(la,Wn);function fa(t,e,n,r){var i=r.sort,a=i&&!r.ignorePeers,u=r.frame||[null,0],o=t.data(n),s=o.length,l=0,c=a?sa(i):null,f={i0:0,i1:0,p0:0,p1:0,index:0,data:o,compare:i||Object(p.j)(-1)};for(e.init();l<s;++l)ha(f,u,l,s),a&&da(f,c),e.update(f,o[l])}function ha(t,e,n,r){t.p0=t.i0,t.p1=t.i1,t.i0=null==e[0]?0:Math.max(0,n-Math.abs(e[0])),t.i1=null==e[1]?r:Math.min(r,n+Math.abs(e[1])+1),t.index=n}function da(t,e){var n=t.i0,r=t.i1-1,i=t.compare,a=t.data,u=a.length-1;n>0&&!i(a[n],a[n-1])&&(t.i0=e.left(a,a[n])),r<u&&!i(a[r],a[r+1])&&(t.i1=e.right(a,a[r]))}ca.transform=function(t,e){var n,r,i=this,a=i.state,u=t.modified(),o=k(t.sort);this.stamp=e.stamp,a&&!u||(a=i.state=new ua(t));var s=Gn(t.groupby);function l(t){return i.group(s(t))}for(u||e.modified(a.inputs)?(i.value={},e.visit(e.SOURCE,(function(t){l(t).add(t)}))):(e.visit(e.REM,(function(t){l(t).remove(t)})),e.visit(e.ADD,(function(t){l(t).add(t)}))),n=0,r=i._mlen;n<r;++n)fa(i._mods[n],a,o,t);return i._mlen=0,i._mods=[],e.reflow(u).modifies(a.outputs)},ca.group=function(t){var e=this.value[t];return e||((e=this.value[t]=Jr(_)).stamp=-1),e.stamp<this.stamp&&(e.stamp=this.stamp,this._mods[this._mlen++]=e),e};const pa="top",ga="left",ma="right",va="bottom",ya="top-left",ba="top-right",_a="bottom-left",xa="bottom-right",wa="start",Aa="middle",Oa="end",Ma="x",ka="y",Ea="group",ja="axis",Da="title",Ca="frame",Fa="scope",Sa="legend",Ba="row-header",Ta="row-footer",Ra="row-title",za="column-header",Na="column-footer",Pa="column-title",La="padding",Ua="symbol",qa="fit",Ia="fit-x",$a="fit-y",Ya="pad",Wa="none",Va="all",Ha="each",Xa="flush",Ga="column",Za="row";function Ja(t){this.clear(),t&&this.union(t)}var Qa=Ja.prototype;Qa.clone=function(){return new Ja(this)},Qa.clear=function(){return this.x1=+Number.MAX_VALUE,this.y1=+Number.MAX_VALUE,this.x2=-Number.MAX_VALUE,this.y2=-Number.MAX_VALUE,this},Qa.empty=function(){return this.x1===+Number.MAX_VALUE&&this.y1===+Number.MAX_VALUE&&this.x2===-Number.MAX_VALUE&&this.y2===-Number.MAX_VALUE},Qa.equals=function(t){return this.x1===t.x1&&this.y1===t.y1&&this.x2===t.x2&&this.y2===t.y2},Qa.set=function(t,e,n,r){return n<t?(this.x2=t,this.x1=n):(this.x1=t,this.x2=n),r<e?(this.y2=e,this.y1=r):(this.y1=e,this.y2=r),this},Qa.add=function(t,e){return t<this.x1&&(this.x1=t),e<this.y1&&(this.y1=e),t>this.x2&&(this.x2=t),e>this.y2&&(this.y2=e),this},Qa.expand=function(t){return this.x1-=t,this.y1-=t,this.x2+=t,this.y2+=t,this},Qa.round=function(){return this.x1=Math.floor(this.x1),this.y1=Math.floor(this.y1),this.x2=Math.ceil(this.x2),this.y2=Math.ceil(this.y2),this},Qa.translate=function(t,e){return this.x1+=t,this.x2+=t,this.y1+=e,this.y2+=e,this},Qa.rotate=function(t,e,n){const r=this.rotatedPoints(t,e,n);return this.clear().add(r[0],r[1]).add(r[2],r[3]).add(r[4],r[5]).add(r[6],r[7])},Qa.rotatedPoints=function(t,e,n){var{x1:r,y1:i,x2:a,y2:u}=this,o=Math.cos(t),s=Math.sin(t),l=e-e*o+n*s,c=n-e*s-n*o;return[o*r-s*i+l,s*r+o*i+c,o*r-s*u+l,s*r+o*u+c,o*a-s*i+l,s*a+o*i+c,o*a-s*u+l,s*a+o*u+c]},Qa.union=function(t){return t.x1<this.x1&&(this.x1=t.x1),t.y1<this.y1&&(this.y1=t.y1),t.x2>this.x2&&(this.x2=t.x2),t.y2>this.y2&&(this.y2=t.y2),this},Qa.intersect=function(t){return t.x1>this.x1&&(this.x1=t.x1),t.y1>this.y1&&(this.y1=t.y1),t.x2<this.x2&&(this.x2=t.x2),t.y2<this.y2&&(this.y2=t.y2),this},Qa.encloses=function(t){return t&&this.x1<=t.x1&&this.x2>=t.x2&&this.y1<=t.y1&&this.y2>=t.y2},Qa.alignsWith=function(t){return t&&(this.x1==t.x1||this.x2==t.x2||this.y1==t.y1||this.y2==t.y2)},Qa.intersects=function(t){return t&&!(this.x2<t.x1||this.x1>t.x2||this.y2<t.y1||this.y1>t.y2)},Qa.contains=function(t,e){return!(t<this.x1||t>this.x2||e<this.y1||e>this.y2)},Qa.width=function(){return this.x2-this.x1},Qa.height=function(){return this.y2-this.y1};var Ka=0;const tu="p_";function eu(t){return t&&t.gradient}function nu(t,e,n){let r=t.id,i=t.gradient,a="radial"===i?tu:"";return r||(r=t.id="gradient_"+Ka++,"radial"===i?(t.x1=ru(t.x1,.5),t.y1=ru(t.y1,.5),t.r1=ru(t.r1,0),t.x2=ru(t.x2,.5),t.y2=ru(t.y2,.5),t.r2=ru(t.r2,.5),a=tu):(t.x1=ru(t.x1,0),t.y1=ru(t.y1,0),t.x2=ru(t.x2,1),t.y2=ru(t.y2,0))),e[r]=t,"url("+(n||"")+"#"+a+r+")"}function ru(t,e){return null!=t?t:e}function iu(t){this.mark=t,this.bounds=this.bounds||new Ja}function au(t){iu.call(this,t),this.items=this.items||[]}function uu(t,e){if("undefined"!=typeof document&&document.createElement){var n=document.createElement("canvas");if(n&&n.getContext)return n.width=t,n.height=e,n}return null}function ou(){return"undefined"!=typeof Image?Image:null}function su(t){this._pending=0,this._loader=t||Mn()}Object(p.w)(au,iu);var lu=su.prototype;function cu(t){t._pending+=1}function fu(t){t._pending-=1}lu.pending=function(){return this._pending},lu.sanitizeURL=function(t){var e=this;return cu(e),e._loader.sanitize(t,{context:"href"}).then((function(t){return fu(e),t})).catch((function(){return fu(e),null}))},lu.loadImage=function(t){var e=this,n=ou();return cu(e),e._loader.sanitize(t,{context:"image"}).then((function(t){var r=t.href;if(!r||!n)throw{url:r};var i=new n;return i.onload=function(){fu(e),i.loaded=!0},i.onerror=function(){fu(e),i.loaded=!1},i.src=r,i})).catch((function(t){return fu(e),{loaded:!1,width:0,height:0,src:t&&t.url||""}}))},lu.ready=function(){var t=this;return new Promise((function(e){!function n(r){t.pending()?setTimeout((function(){n(!0)}),10):e(r)}(!1)}))};var hu=Math.PI,du=2*hu,pu=du-1e-6;function gu(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function mu(){return new gu}gu.prototype=mu.prototype={constructor:gu,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,u=this._y1,o=n-t,s=r-e,l=a-t,c=u-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*o-s*l)>1e-6&&i){var h=n-a,d=r-u,p=o*o+s*s,g=h*h+d*d,m=Math.sqrt(p),v=Math.sqrt(f),y=i*Math.tan((hu-Math.acos((p+f-g)/(2*m*v)))/2),b=y/v,_=y/m;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*l)+","+(e+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*d)+","+(this._x1=t+_*o)+","+(this._y1=e+_*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e,a=!!a;var u=(n=+n)*Math.cos(r),o=n*Math.sin(r),s=t+u,l=e+o,c=1^a,f=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),n&&(f<0&&(f=f%du+du),f>pu?this._+="A"+n+","+n+",0,1,"+c+","+(t-u)+","+(e-o)+"A"+n+","+n+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=hu)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var vu=mu,yu=function(t){return function(){return t}},bu=Math.abs,_u=Math.atan2,xu=Math.cos,wu=Math.max,Au=Math.min,Ou=Math.sin,Mu=Math.sqrt,ku=1e-12,Eu=Math.PI,ju=Eu/2,Du=2*Eu;function Cu(t){return t>=1?ju:t<=-1?-ju:Math.asin(t)}function Fu(t){return t.innerRadius}function Su(t){return t.outerRadius}function Bu(t){return t.startAngle}function Tu(t){return t.endAngle}function Ru(t){return t&&t.padAngle}function zu(t,e,n,r,i,a,u){var o=t-n,s=e-r,l=(u?a:-a)/Mu(o*o+s*s),c=l*s,f=-l*o,h=t+c,d=e+f,p=n+c,g=r+f,m=(h+p)/2,v=(d+g)/2,y=p-h,b=g-d,_=y*y+b*b,x=i-a,w=h*g-p*d,A=(b<0?-1:1)*Mu(wu(0,x*x*_-w*w)),O=(w*b-y*A)/_,M=(-w*y-b*A)/_,k=(w*b+y*A)/_,E=(-w*y+b*A)/_,j=O-m,D=M-v,C=k-m,F=E-v;return j*j+D*D>C*C+F*F&&(O=k,M=E),{cx:O,cy:M,x01:-c,y01:-f,x11:O*(i/x-1),y11:M*(i/x-1)}}function Nu(t){this._context=t}Nu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Pu=function(t){return new Nu(t)};function Lu(t){return t[0]}function Uu(t){return t[1]}var qu=function(){var t=Lu,e=Uu,n=yu(!0),r=null,i=Pu,a=null;function u(u){var o,s,l,c=u.length,f=!1;for(null==r&&(a=i(l=vu())),o=0;o<=c;++o)!(o<c&&n(s=u[o],o,u))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+t(s,o,u),+e(s,o,u));if(l)return a=null,l+""||null}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:yu(+e),u):t},u.y=function(t){return arguments.length?(e="function"==typeof t?t:yu(+t),u):e},u.defined=function(t){return arguments.length?(n="function"==typeof t?t:yu(!!t),u):n},u.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),u):r},u},Iu=function(){var t=Lu,e=null,n=yu(0),r=Uu,i=yu(!0),a=null,u=Pu,o=null;function s(s){var l,c,f,h,d,p=s.length,g=!1,m=new Array(p),v=new Array(p);for(null==a&&(o=u(d=vu())),l=0;l<=p;++l){if(!(l<p&&i(h=s[l],l,s))===g)if(g=!g)c=l,o.areaStart(),o.lineStart();else{for(o.lineEnd(),o.lineStart(),f=l-1;f>=c;--f)o.point(m[f],v[f]);o.lineEnd(),o.areaEnd()}g&&(m[l]=+t(h,l,s),v[l]=+n(h,l,s),o.point(e?+e(h,l,s):m[l],r?+r(h,l,s):v[l]))}if(d)return o=null,d+""||null}function l(){return qu().defined(i).curve(u).context(a)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:yu(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:yu(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:yu(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:yu(+t),r=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:yu(+t),s):n},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:yu(+t),s):r},s.lineX0=s.lineY0=function(){return l().x(t).y(n)},s.lineY1=function(){return l().x(t).y(r)},s.lineX1=function(){return l().x(e).y(n)},s.defined=function(t){return arguments.length?(i="function"==typeof t?t:yu(!!t),s):i},s.curve=function(t){return arguments.length?(u=t,null!=a&&(o=u(a)),s):u},s.context=function(t){return arguments.length?(null==t?a=o=null:o=u(a=t),s):a},s};Yu(Pu);function $u(t){this._curve=t}function Yu(t){function e(e){return new $u(t(e))}return e._curve=t,e}$u.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;var Wu={draw:function(t,e){var n=Math.sqrt(e/Eu);t.moveTo(n,0),t.arc(0,0,n,0,Du)}},Vu=(Math.sqrt(1/3),Math.sin(Eu/10)/Math.sin(7*Eu/10)),Hu=(Math.sin(Du/10),Math.cos(Du/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Xu(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Gu(t){this._context=t}Gu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Xu(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Xu(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Zu(t){this._context=t}Zu.prototype={areaStart:Hu,areaEnd:Hu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Xu(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Ju(t){this._context=t}Ju.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Xu(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Qu(t,e){this._basis=new Gu(t),this._beta=e}Qu.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],a=e[0],u=t[n]-i,o=e[n]-a,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*u),this._beta*e[s]+(1-this._beta)*(a+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Ku=function t(e){function n(t){return 1===e?new Gu(t):new Qu(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function to(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function eo(t,e){this._context=t,this._k=(1-e)/6}eo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:to(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:to(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var no=function t(e){function n(t){return new eo(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ro(t,e){this._context=t,this._k=(1-e)/6}ro.prototype={areaStart:Hu,areaEnd:Hu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:to(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var io=function t(e){function n(t){return new ro(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ao(t,e){this._context=t,this._k=(1-e)/6}ao.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:to(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var uo=function t(e){function n(t){return new ao(t,e)}return n.tension=function(e){return t(+e)},n}(0);function oo(t,e,n){var r=t._x1,i=t._y1,a=t._x2,u=t._y2;if(t._l01_a>ku){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>ku){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*l+t._x1*t._l23_2a-e*t._l12_2a)/c,u=(u*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,a,u,t._x2,t._y2)}function so(t,e){this._context=t,this._alpha=e}so.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:oo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var lo=function t(e){function n(t){return e?new so(t,e):new eo(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function co(t,e){this._context=t,this._alpha=e}co.prototype={areaStart:Hu,areaEnd:Hu,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:oo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var fo=function t(e){function n(t){return e?new co(t,e):new ro(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function ho(t,e){this._context=t,this._alpha=e}ho.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:oo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var po=function t(e){function n(t){return e?new ho(t,e):new ao(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function go(t){this._context=t}go.prototype={areaStart:Hu,areaEnd:Hu,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function mo(t){return t<0?-1:1}function vo(t,e,n){var r=t._x1-t._x0,i=e-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),u=(n-t._y1)/(i||r<0&&-0),o=(a*i+u*r)/(r+i);return(mo(a)+mo(u))*Math.min(Math.abs(a),Math.abs(u),.5*Math.abs(o))||0}function yo(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function bo(t,e,n){var r=t._x0,i=t._y0,a=t._x1,u=t._y1,o=(a-r)/3;t._context.bezierCurveTo(r+o,i+o*e,a-o,u-o*n,a,u)}function _o(t){this._context=t}function xo(t){this._context=new wo(t)}function wo(t){this._context=t}function Ao(t){this._context=t}function Oo(t){var e,n,r=t.length-1,i=new Array(r),a=new Array(r),u=new Array(r);for(i[0]=0,a[0]=2,u[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,a[e]=4,u[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,a[r-1]=7,u[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/a[e-1],a[e]-=n,u[e]-=n*u[e-1];for(i[r-1]=u[r-1]/a[r-1],e=r-2;e>=0;--e)i[e]=(u[e]-i[e+1])/a[e];for(a[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)a[e]=2*t[e+1]-i[e+1];return[i,a]}_o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:bo(this,this._t0,yo(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,bo(this,yo(this,n=vo(this,t,e)),n);break;default:bo(this,this._t0,n=vo(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(xo.prototype=Object.create(_o.prototype)).point=function(t,e){_o.prototype.point.call(this,e,t)},wo.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,a){this._context.bezierCurveTo(e,t,r,n,a,i)}},Ao.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Oo(t),i=Oo(e),a=0,u=1;u<n;++a,++u)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[u],e[u]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function Mo(t,e){this._context=t,this._t=e}Mo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var ko={basis:{curve:function(t){return new Gu(t)}},"basis-closed":{curve:function(t){return new Zu(t)}},"basis-open":{curve:function(t){return new Ju(t)}},bundle:{curve:Ku,tension:"beta",value:.85},cardinal:{curve:no,tension:"tension",value:0},"cardinal-open":{curve:uo,tension:"tension",value:0},"cardinal-closed":{curve:io,tension:"tension",value:0},"catmull-rom":{curve:lo,tension:"alpha",value:.5},"catmull-rom-closed":{curve:fo,tension:"alpha",value:.5},"catmull-rom-open":{curve:po,tension:"alpha",value:.5},linear:{curve:Pu},"linear-closed":{curve:function(t){return new go(t)}},monotone:{horizontal:function(t){return new xo(t)},vertical:function(t){return new _o(t)}},natural:{curve:function(t){return new Ao(t)}},step:{curve:function(t){return new Mo(t,.5)}},"step-after":{curve:function(t){return new Mo(t,1)}},"step-before":{curve:function(t){return new Mo(t,0)}}};function Eo(t,e,n){var r=Object(p.t)(ko,t)&&ko[t],i=null;return r&&(i=r.curve||r[e||"vertical"],r.tension&&null!=n&&(i=i[r.tension](n))),i}var jo={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},Do=[/([MLHVCSQTAZmlhvcsqtaz])/g,/###/,/(\d)([-+])/g,/\s|,|###/],Co=function(t){var e,n,r,i,a,u,o,s,l,c,f,h=[];for(s=0,c=(e=t.slice().replace(Do[0],"###$1").split(Do[1]).slice(1)).length;s<c;++s){for(r=(n=e[s]).slice(1).trim().replace(Do[2],"$1###$2").split(Do[3]),i=[u=n.charAt(0)],l=0,f=r.length;l<f;++l)(a=+r[l])===a&&i.push(a);if(o=jo[u.toLowerCase()],i.length-1>o)for(l=1,f=i.length;l<f;l+=o)h.push([u].concat(i.slice(l,l+o)));else h.push(i)}return h},Fo=Math.PI/180,So=Math.PI/2,Bo=2*Math.PI,To=Math.sqrt(3)/2,Ro={},zo={},No=[].join;function Po(t){var e=No.call(t);if(zo[e])return zo[e];var n=t[0],r=t[1],i=t[2],a=t[3],u=t[4],o=t[5],s=t[6],l=t[7],c=l*u,f=-s*o,h=s*u,d=l*o,p=Math.cos(i),g=Math.sin(i),m=Math.cos(a),v=Math.sin(a),y=.5*(a-i),b=Math.sin(.5*y),_=8/3*b*b/Math.sin(y),x=n+p-_*g,w=r+g+_*p,A=n+m,O=r+v,M=A+_*v,k=O-_*m;return zo[e]=[c*x+f*w,h*x+d*w,c*M+f*k,h*M+d*k,c*A+f*O,h*A+d*O]}var Lo=["l",0,0,0,0,0,0,0];function Uo(t,e){var n=Lo[0]=t[0];if("a"===n||"A"===n)Lo[1]=e*t[1],Lo[2]=e*t[2],Lo[3]=t[3],Lo[4]=t[4],Lo[5]=t[5],Lo[6]=e*t[6],Lo[7]=e*t[7];else for(var r=1,i=t.length;r<i;++r)Lo[r]=e*t[r];return Lo}var qo=function(t,e,n,r,i){var a,u,o,s,l,c=null,f=0,h=0,d=0,p=0;null==n&&(n=0),null==r&&(r=0),null==i&&(i=1),t.beginPath&&t.beginPath();for(var g=0,m=e.length;g<m;++g){switch(a=e[g],1!==i&&(a=Uo(a,i)),a[0]){case"l":f+=a[1],h+=a[2],t.lineTo(f+n,h+r);break;case"L":f=a[1],h=a[2],t.lineTo(f+n,h+r);break;case"h":f+=a[1],t.lineTo(f+n,h+r);break;case"H":f=a[1],t.lineTo(f+n,h+r);break;case"v":h+=a[1],t.lineTo(f+n,h+r);break;case"V":h=a[1],t.lineTo(f+n,h+r);break;case"m":f+=a[1],h+=a[2],t.moveTo(f+n,h+r);break;case"M":f=a[1],h=a[2],t.moveTo(f+n,h+r);break;case"c":u=f+a[5],o=h+a[6],d=f+a[3],p=h+a[4],t.bezierCurveTo(f+a[1]+n,h+a[2]+r,d+n,p+r,u+n,o+r),f=u,h=o;break;case"C":f=a[5],h=a[6],d=a[3],p=a[4],t.bezierCurveTo(a[1]+n,a[2]+r,d+n,p+r,f+n,h+r);break;case"s":u=f+a[3],o=h+a[4],d=2*f-d,p=2*h-p,t.bezierCurveTo(d+n,p+r,f+a[1]+n,h+a[2]+r,u+n,o+r),d=f+a[1],p=h+a[2],f=u,h=o;break;case"S":u=a[3],o=a[4],d=2*f-d,p=2*h-p,t.bezierCurveTo(d+n,p+r,a[1]+n,a[2]+r,u+n,o+r),f=u,h=o,d=a[1],p=a[2];break;case"q":u=f+a[3],o=h+a[4],d=f+a[1],p=h+a[2],t.quadraticCurveTo(d+n,p+r,u+n,o+r),f=u,h=o;break;case"Q":u=a[3],o=a[4],t.quadraticCurveTo(a[1]+n,a[2]+r,u+n,o+r),f=u,h=o,d=a[1],p=a[2];break;case"t":u=f+a[1],o=h+a[2],null===c[0].match(/[QqTt]/)?(d=f,p=h):"t"===c[0]?(d=2*f-s,p=2*h-l):"q"===c[0]&&(d=2*f-d,p=2*h-p),s=d,l=p,t.quadraticCurveTo(d+n,p+r,u+n,o+r),h=o,d=(f=u)+a[1],p=h+a[2];break;case"T":u=a[1],o=a[2],d=2*f-d,p=2*h-p,t.quadraticCurveTo(d+n,p+r,u+n,o+r),f=u,h=o;break;case"a":Io(t,f+n,h+r,[a[1],a[2],a[3],a[4],a[5],a[6]+f+n,a[7]+h+r]),f+=a[6],h+=a[7];break;case"A":Io(t,f+n,h+r,[a[1],a[2],a[3],a[4],a[5],a[6]+n,a[7]+r]),f=a[6],h=a[7];break;case"z":case"Z":t.closePath()}c=a}};function Io(t,e,n,r){for(var i=function(t,e,n,r,i,a,u,o,s){var l=No.call(arguments);if(Ro[l])return Ro[l];var c=u*Fo,f=Math.sin(c),h=Math.cos(c),d=h*(o-t)*.5+f*(s-e)*.5,p=h*(s-e)*.5-f*(o-t)*.5,g=d*d/((n=Math.abs(n))*n)+p*p/((r=Math.abs(r))*r);g>1&&(n*=g=Math.sqrt(g),r*=g);var m=h/n,v=f/n,y=-f/r,b=h/r,_=m*o+v*s,x=y*o+b*s,w=m*t+v*e,A=y*t+b*e,O=1/((w-_)*(w-_)+(A-x)*(A-x))-.25;O<0&&(O=0);var M=Math.sqrt(O);a==i&&(M=-M);var k=.5*(_+w)-M*(A-x),E=.5*(x+A)+M*(w-_),j=Math.atan2(x-E,_-k),D=Math.atan2(A-E,w-k)-j;D<0&&1===a?D+=Bo:D>0&&0===a&&(D-=Bo);for(var C=Math.ceil(Math.abs(D/(So+.001))),F=[],S=0;S<C;++S){var B=j+S*D/C,T=j+(S+1)*D/C;F[S]=[k,E,B,T,n,r,f,h]}return Ro[l]=F}(r[5],r[6],r[0],r[1],r[3],r[4],r[2],e,n),a=0;a<i.length;++a){var u=Po(i[a]);t.bezierCurveTo(u[0],u[1],u[2],u[3],u[4],u[5])}}var $o={circle:{draw:function(t,e){var n=Math.sqrt(e)/2;t.moveTo(n,0),t.arc(0,0,n,0,Bo)}},cross:{draw:function(t,e){var n=Math.sqrt(e)/2,r=n/2.5;t.moveTo(-n,-r),t.lineTo(-n,r),t.lineTo(-r,r),t.lineTo(-r,n),t.lineTo(r,n),t.lineTo(r,r),t.lineTo(n,r),t.lineTo(n,-r),t.lineTo(r,-r),t.lineTo(r,-n),t.lineTo(-r,-n),t.lineTo(-r,-r),t.closePath()}},diamond:{draw:function(t,e){var n=Math.sqrt(e)/2;t.moveTo(-n,0),t.lineTo(0,-n),t.lineTo(n,0),t.lineTo(0,n),t.closePath()}},square:{draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},arrow:{draw:function(t,e){var n=Math.sqrt(e)/2,r=n/7,i=n/2.5,a=n/8;t.moveTo(-r,n),t.lineTo(r,n),t.lineTo(r,-a),t.lineTo(i,-a),t.lineTo(0,-n),t.lineTo(-i,-a),t.lineTo(-r,-a),t.closePath()}},wedge:{draw:function(t,e){var n=Math.sqrt(e)/2,r=To*n,i=r-.5773502691896257*n,a=n/4;t.moveTo(0,-r-i),t.lineTo(-a,r-i),t.lineTo(a,r-i),t.closePath()}},triangle:{draw:function(t,e){var n=Math.sqrt(e)/2,r=To*n,i=r-.5773502691896257*n;t.moveTo(0,-r-i),t.lineTo(-n,r-i),t.lineTo(n,r-i),t.closePath()}},"triangle-up":{draw:function(t,e){var n=Math.sqrt(e)/2,r=To*n;t.moveTo(0,-r),t.lineTo(-n,r),t.lineTo(n,r),t.closePath()}},"triangle-down":{draw:function(t,e){var n=Math.sqrt(e)/2,r=To*n;t.moveTo(0,r),t.lineTo(-n,-r),t.lineTo(n,-r),t.closePath()}},"triangle-right":{draw:function(t,e){var n=Math.sqrt(e)/2,r=To*n;t.moveTo(r,0),t.lineTo(-r,-n),t.lineTo(-r,n),t.closePath()}},"triangle-left":{draw:function(t,e){var n=Math.sqrt(e)/2,r=To*n;t.moveTo(-r,0),t.lineTo(r,-n),t.lineTo(r,n),t.closePath()}},stroke:{draw:function(t,e){var n=Math.sqrt(e)/2;t.moveTo(-n,0),t.lineTo(n,0)}}};function Yo(t){return Object(p.t)($o,t)?$o[t]:function(t){if(!Object(p.t)(Wo,t)){var e=Co(t);Wo[t]={draw:function(t,n){qo(t,e,0,0,Math.sqrt(n)/2)}}}return Wo[t]}(t)}var Wo={};function Vo(t){return t.x}function Ho(t){return t.y}function Xo(t){return t.width}function Go(t){return t.height}function Zo(t){return function(){return t}}function Jo(t){return t.x||0}function Qo(t){return t.y||0}function Ko(t){return t.cornerRadius||0}function ts(t){return!(!1===t.defined)}var es=function(){var t=Fu,e=Su,n=yu(0),r=null,i=Bu,a=Tu,u=Ru,o=null;function s(){var s,l,c,f=+t.apply(this,arguments),h=+e.apply(this,arguments),d=i.apply(this,arguments)-ju,p=a.apply(this,arguments)-ju,g=bu(p-d),m=p>d;if(o||(o=s=vu()),h<f&&(l=h,h=f,f=l),h>ku)if(g>Du-ku)o.moveTo(h*xu(d),h*Ou(d)),o.arc(0,0,h,d,p,!m),f>ku&&(o.moveTo(f*xu(p),f*Ou(p)),o.arc(0,0,f,p,d,m));else{var v,y,b=d,_=p,x=d,w=p,A=g,O=g,M=u.apply(this,arguments)/2,k=M>ku&&(r?+r.apply(this,arguments):Mu(f*f+h*h)),E=Au(bu(h-f)/2,+n.apply(this,arguments)),j=E,D=E;if(k>ku){var C=Cu(k/f*Ou(M)),F=Cu(k/h*Ou(M));(A-=2*C)>ku?(x+=C*=m?1:-1,w-=C):(A=0,x=w=(d+p)/2),(O-=2*F)>ku?(b+=F*=m?1:-1,_-=F):(O=0,b=_=(d+p)/2)}var S=h*xu(b),B=h*Ou(b),T=f*xu(w),R=f*Ou(w);if(E>ku){var z,N=h*xu(_),P=h*Ou(_),L=f*xu(x),U=f*Ou(x);if(g<Eu&&(z=function(t,e,n,r,i,a,u,o){var s=n-t,l=r-e,c=u-i,f=o-a,h=f*s-c*l;if(!(h*h<ku))return[t+(h=(c*(e-a)-f*(t-i))/h)*s,e+h*l]}(S,B,L,U,N,P,T,R))){var q=S-z[0],I=B-z[1],$=N-z[0],Y=P-z[1],W=1/Ou(((c=(q*$+I*Y)/(Mu(q*q+I*I)*Mu($*$+Y*Y)))>1?0:c<-1?Eu:Math.acos(c))/2),V=Mu(z[0]*z[0]+z[1]*z[1]);j=Au(E,(f-V)/(W-1)),D=Au(E,(h-V)/(W+1))}}O>ku?D>ku?(v=zu(L,U,S,B,h,D,m),y=zu(N,P,T,R,h,D,m),o.moveTo(v.cx+v.x01,v.cy+v.y01),D<E?o.arc(v.cx,v.cy,D,_u(v.y01,v.x01),_u(y.y01,y.x01),!m):(o.arc(v.cx,v.cy,D,_u(v.y01,v.x01),_u(v.y11,v.x11),!m),o.arc(0,0,h,_u(v.cy+v.y11,v.cx+v.x11),_u(y.cy+y.y11,y.cx+y.x11),!m),o.arc(y.cx,y.cy,D,_u(y.y11,y.x11),_u(y.y01,y.x01),!m))):(o.moveTo(S,B),o.arc(0,0,h,b,_,!m)):o.moveTo(S,B),f>ku&&A>ku?j>ku?(v=zu(T,R,N,P,f,-j,m),y=zu(S,B,L,U,f,-j,m),o.lineTo(v.cx+v.x01,v.cy+v.y01),j<E?o.arc(v.cx,v.cy,j,_u(v.y01,v.x01),_u(y.y01,y.x01),!m):(o.arc(v.cx,v.cy,j,_u(v.y01,v.x01),_u(v.y11,v.x11),!m),o.arc(0,0,f,_u(v.cy+v.y11,v.cx+v.x11),_u(y.cy+y.y11,y.cx+y.x11),m),o.arc(y.cx,y.cy,j,_u(y.y11,y.x11),_u(y.y01,y.x01),!m))):o.arc(0,0,f,w,x,m):o.lineTo(T,R)}else o.moveTo(0,0);if(o.closePath(),s)return o=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-Eu/2;return[xu(r)*n,Ou(r)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:yu(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:yu(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:yu(+t),s):n},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:yu(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:yu(+t),s):i},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:yu(+t),s):a},s.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:yu(+t),s):u},s.context=function(t){return arguments.length?(o=null==t?null:t,s):o},s}().startAngle((function(t){return t.startAngle||0})).endAngle((function(t){return t.endAngle||0})).padAngle((function(t){return t.padAngle||0})).innerRadius((function(t){return t.innerRadius||0})).outerRadius((function(t){return t.outerRadius||0})).cornerRadius(Ko),ns=Iu().x(Jo).y1(Qo).y0((function(t){return(t.y||0)+(t.height||0)})).defined(ts),rs=Iu().y(Qo).x1(Jo).x0((function(t){return(t.x||0)+(t.width||0)})).defined(ts),is=qu().x(Jo).y(Qo).defined(ts),as=function(){var t=Vo,e=Ho,n=Xo,r=Go,i=Zo(0),a=null;function u(u,o,s){var l,c=null!=o?o:+t.call(this,u),f=null!=s?s:+e.call(this,u),h=+n.call(this,u),d=+r.call(this,u),p=+i.call(this,u);if(a||(a=l=vu()),p<=0)a.rect(c,f,h,d);else{var g=c+h,m=f+d;a.moveTo(c+p,f),a.lineTo(g-p,f),a.quadraticCurveTo(g,f,g,f+p),a.lineTo(g,m-p),a.quadraticCurveTo(g,m,g-p,m),a.lineTo(c+p,m),a.quadraticCurveTo(c,m,c,m-p),a.lineTo(c,f+p),a.quadraticCurveTo(c,f,c+p,f),a.closePath()}if(l)return a=null,l+""||null}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:Zo(+e),u):t},u.y=function(t){return arguments.length?(e="function"==typeof t?t:Zo(+t),u):e},u.width=function(t){return arguments.length?(n="function"==typeof t?t:Zo(+t),u):n},u.height=function(t){return arguments.length?(r="function"==typeof t?t:Zo(+t),u):r},u.cornerRadius=function(t){return arguments.length?(i="function"==typeof t?t:Zo(+t),u):i},u.context=function(t){return arguments.length?(a=null==t?null:t,u):a},u}().x(Jo).y(Qo).width((function(t){return t.width||0})).height((function(t){return t.height||0})).cornerRadius(Ko),us=function(){var t=yu(Wu),e=yu(64),n=null;function r(){var r;if(n||(n=r=vu()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:yu(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:yu(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r}().type((function(t){return Yo(t.shape||"circle")})).size((function(t){return null==t.size?64:t.size})),os=function(){var t,e,n,r,i,a,u,o,s=null;function l(t,e,n){var r=n/2;if(i){var l=u-e,c=t-a;if(l||c){var f=Math.sqrt(l*l+c*c),h=(l/=f)*o,d=(c/=f)*o,p=Math.atan2(c,l);s.moveTo(a-h,u-d),s.lineTo(t-l*r,e-c*r),s.arc(t,e,r,p-Math.PI,p),s.lineTo(a+h,u+d),s.arc(a,u,o,p,p+Math.PI)}else s.arc(t,e,r,0,Bo);s.closePath()}else i=1;a=t,u=e,o=r}function c(a){var u,o,c,f=a.length,h=!1;for(null==s&&(s=c=vu()),u=0;u<=f;++u)!(u<f&&r(o=a[u],u,a))===h&&(h=!h)&&(i=0),h&&l(+t(o,u,a),+e(o,u,a),+n(o,u,a));if(c)return s=null,c+""||null}return c.x=function(e){return arguments.length?(t=e,c):t},c.y=function(t){return arguments.length?(e=t,c):e},c.size=function(t){return arguments.length?(n=t,c):n},c.defined=function(t){return arguments.length?(r=t,c):r},c.context=function(t){return arguments.length?(s=null==t?null:t,c):s},c}().x(Jo).y(Qo).defined(ts).size((function(t){return t.size||1}));function ss(t,e,n,r){return as.context(t)(e,n,r)}var ls,cs=function(t,e){return e.stroke&&0!==e.opacity&&0!==e.strokeOpacity&&t.expand(null!=e.strokeWidth?+e.strokeWidth:1),t},fs=Bo-1e-8;function hs(t){return ls=t,hs}function ds(){}function ps(t,e){ls.add(t,e)}hs.beginPath=ds,hs.closePath=ds,hs.moveTo=ps,hs.lineTo=ps,hs.rect=function(t,e,n,r){ps(t,e),ps(t+n,e+r)},hs.quadraticCurveTo=function(t,e,n,r){ps(t,e),ps(n,r)},hs.bezierCurveTo=function(t,e,n,r,i,a){ps(t,e),ps(n,r),ps(i,a)},hs.arc=function(t,e,n,r,i,a){if(Math.abs(i-r)>fs)return ps(t-n,e-n),void ps(t+n,e+n);var u,o,s,l,c=1/0,f=-1/0,h=1/0,d=-1/0;function p(t){s=n*Math.cos(t),l=n*Math.sin(t),s<c&&(c=s),s>f&&(f=s),l<h&&(h=l),l>d&&(d=l)}if(p(r),p(i),i!==r)if((r%=Bo)<0&&(r+=Bo),(i%=Bo)<0&&(i+=Bo),i<r&&(a=!a,u=r,r=i,i=u),a)for(i-=Bo,u=r-r%So,o=0;o<4&&u>i;++o,u-=So)p(u);else for(u=r-r%So+So,o=0;o<4&&u<i;++o,u+=So)p(u);ps(t+c,e+h),ps(t+f,e+d)};var gs=(gs=uu(1,1))?gs.getContext("2d"):null;const ms=new Ja;function vs(t){return function(e,n){if(!gs)return!0;t(gs,e),ms.clear().union(e.bounds).intersect(n).round();const{x1:r,y1:i,x2:a,y2:u}=ms;for(let t=i;t<=u;++t)for(let e=r;e<=a;++e)if(gs.isPointInPath(e,t))return!0;return!1}}function ys(t,e){return e.contains(t.x||0,t.y||0)}function bs(t,e){const n=t.x||0,r=t.y||0,i=t.width||0,a=t.height||0;return e.intersects(ms.set(n,r,n+i,r+a))}function _s(t,e,n,r,i){const{x1:a,y1:u,x2:o,y2:s}=t,l=r-e,c=i-n;let f,h,d,p,g=0,m=1;for(p=0;p<4;++p){if(0===p&&(f=-l,h=-(a-e)),1===p&&(f=l,h=o-e),2===p&&(f=-c,h=-(u-n)),3===p&&(f=c,h=s-n),Math.abs(f)<1e-10&&h<0)return!1;if(d=h/f,f<0){if(d>m)return!1;d>g&&(g=d)}else if(f>0){if(d<g)return!1;d<m&&(m=d)}}return!0}function xs(t,e){return null==t?e:t}var ws=function(t,e,n){return eu(n)?function(t,e,n){const r=n.width(),i=n.height(),a=e.stops,u=a.length,o="radial"===e.gradient?t.createRadialGradient(n.x1+xs(e.x1,.5)*r,n.y1+xs(e.y1,.5)*i,Math.max(r,i)*xs(e.r1,0),n.x1+xs(e.x2,.5)*r,n.y1+xs(e.y2,.5)*i,Math.max(r,i)*xs(e.r2,.5)):t.createLinearGradient(n.x1+xs(e.x1,0)*r,n.y1+xs(e.y1,0)*i,n.x1+xs(e.x2,1)*r,n.y1+xs(e.y2,0)*i);for(let t=0;t<u;++t)o.addColorStop(a[t].offset,a[t].color);return o}(t,n,e.bounds):n},As=function(t,e,n){return(n*=null==e.fillOpacity?1:e.fillOpacity)>0&&(t.globalAlpha=n,t.fillStyle=ws(t,e,e.fill),!0)},Os=[],Ms=function(t,e,n){var r=null!=(r=e.strokeWidth)?r:1;return!(r<=0)&&((n*=null==e.strokeOpacity?1:e.strokeOpacity)>0&&(t.globalAlpha=n,t.strokeStyle=ws(t,e,e.stroke),t.lineWidth=r,t.lineCap=e.strokeCap||"butt",t.lineJoin=e.strokeJoin||"miter",t.miterLimit=e.strokeMiterLimit||10,t.setLineDash&&(t.setLineDash(e.strokeDash||Os),t.lineDashOffset=e.strokeDashOffset||0),!0))};function ks(t,e){return t.zindex-e.zindex||t.index-e.index}function Es(t){if(!t.zdirty)return t.zitems;var e,n,r,i=t.items,a=[];for(n=0,r=i.length;n<r;++n)(e=i[n]).index=n,e.zindex&&a.push(e);return t.zdirty=!1,t.zitems=a.sort(ks)}function js(t,e){var n,r,i=t.items;if(i&&i.length){var a=Es(t);if(a&&a.length){for(n=0,r=i.length;n<r;++n)i[n].zindex||e(i[n]);i=a}for(n=0,r=i.length;n<r;++n)e(i[n])}}function Ds(t,e){var n,r,i=t.items;if(!i||!i.length)return null;var a=Es(t);for(a&&a.length&&(i=a),r=i.length;--r>=0;)if(n=e(i[r]))return n;if(i===a)for(r=(i=t.items).length;--r>=0;)if(!i[r].zindex&&(n=e(i[r])))return n;return null}function Cs(t){return function(e,n,r){js(n,(function(n){r&&!r.intersects(n.bounds)||Fs(t,e,n,n)}))}}function Fs(t,e,n,r){var i=null==n.opacity?1:n.opacity;0!==i&&(t(e,r)||(n.fill&&As(e,n,i)&&e.fill(),n.stroke&&Ms(e,n,i)&&e.stroke()))}function Ss(t){return t=t||p.cb,function(e,n,r,i,a,u){return r*=e.pixelRatio,i*=e.pixelRatio,Ds(n,(function(n){var o=n.bounds;if((!o||o.contains(a,u))&&o)return t(e,n,r,i,a,u)?n:void 0}))}}function Bs(t,e){return function(n,r,i,a){var u,o,s=Array.isArray(r)?r[0]:r,l=null==e?s.fill:e,c=s.stroke&&n.isPointInStroke;return c&&(u=s.strokeWidth,o=s.strokeCap,n.lineWidth=null!=u?u:1,n.lineCap=null!=o?o:"butt"),!t(n,r)&&(l&&n.isPointInPath(i,a)||c&&n.isPointInStroke(i,a))}}function Ts(t){return Ss(Bs(t))}function Rs(t,e){return"translate("+t+","+e+")"}function zs(t){return"rotate("+t+")"}function Ns(t){return Rs(t.x||0,t.y||0)}var Ps=function(t,e,n){function r(t,n){var r=n.x||0,i=n.y||0,a=n.angle||0;t.translate(r,i),a&&t.rotate(a*=Fo),t.beginPath(),e(t,n),a&&t.rotate(-a),t.translate(-r,-i)}return{type:t,tag:"path",nested:!1,attr:function(t,n){t("transform",function(t){return Rs(t.x||0,t.y||0)+(t.angle?" "+zs(t.angle):"")}(n)),t("d",e(null,n))},bound:function(t,n){var r=n.x||0,i=n.y||0;return e(hs(t),n),cs(t,n).translate(r,i),n.angle&&t.rotate(n.angle*Fo,r,i),t},draw:Cs(r),pick:Ts(r),isect:n||vs(r)}},Ls=Ps("arc",(function(t,e){return es.context(t)(e)}));var Us=function(t,e,n){function r(t,n){t.beginPath(),e(t,n)}var i,a=Bs(r);return{type:t,tag:"path",nested:!0,attr:function(t,n){var r=n.mark.items;r.length&&t("d",e(null,r))},bound:function(t,n){var r=n.items;return 0===r.length?t:(e(hs(t),r),cs(t,r[0]))},draw:(i=r,function(t,e,n){!e.items.length||n&&!n.intersects(e.bounds)||Fs(i,t,e.items[0],e.items)}),pick:function(t,e,n,r,i,u){var o=e.items,s=e.bounds;return!o||!o.length||s&&!s.contains(i,u)?null:(n*=t.pixelRatio,r*=t.pixelRatio,a(t,o,n,r)?o[0]:null)},isect:ys,tip:n}},qs=Us("area",(function(t,e){var n=e[0],r=n.interpolate||"linear";return("horizontal"===n.orient?rs:ns).curve(Eo(r,n.orient,n.tension)).context(t)(e)}),(function(t,e){for(var n,r,i="horizontal"===t[0].orient?e[1]:e[0],a="horizontal"===t[0].orient?"y":"x",u=t.length,o=1/0;--u>=0;)!1!==t[u].defined&&(r=Math.abs(t[u][a]-i))<o&&(o=r,n=t[u]);return n})),Is=1;var $s=function(t,e,n){var r=e.clip,i=t._defs,a=e.clip_id||(e.clip_id="clip"+Is++),u=i.clipping[a]||(i.clipping[a]={id:a});return Object(p.B)(r)?u.path=r(null):(u.width=n.width||0,u.height=n.height||0),"url(#"+a+")"},Ys=.5;function Ws(t,e){var n=e.stroke?Ys:0;t.beginPath(),ss(t,e,n,n)}var Vs=Bs(Ws);var Hs={type:"group",tag:"g",nested:!1,attr:function(t,e){t("transform",Ns(e))},bound:function(t,e){if(!e.clip&&e.items)for(var n=e.items,r=0,i=n.length;r<i;++r)t.union(n[r].bounds);return(e.clip||e.width||e.height)&&!e.noBound&&t.add(0,0).add(e.width||0,e.height||0),cs(t,e),t.translate(e.x||0,e.y||0)},draw:function(t,e,n){var r=this;js(e,(function(e){var i,a=e.x||0,u=e.y||0,o=e.width||0,s=e.height||0;t.save(),t.translate(a,u),(e.stroke||e.fill)&&(i=null==e.opacity?1:e.opacity)>0&&(Ws(t,e),e.fill&&As(t,e,i)&&t.fill(),e.stroke&&Ms(t,e,i)&&t.stroke()),e.clip&&(t.beginPath(),t.rect(0,0,o,s),t.clip()),n&&n.translate(-a,-u),js(e,(function(e){r.draw(t,e,n)})),n&&n.translate(a,u),t.restore()}))},pick:function(t,e,n,r,i,a){if(e.bounds&&!e.bounds.contains(i,a)||!e.items)return null;var u=this,o=n*t.pixelRatio,s=r*t.pixelRatio;return Ds(e,(function(l){var c,f,h,d;if(!(d=l.bounds)||d.contains(i,a))return f=l.x||0,h=l.y||0,t.save(),t.translate(f,h),f=i-f,h=a-h,!(c=Ds(l,(function(t){return function(t,e,n){return(!1!==t.interactive||"group"===t.marktype)&&t.bounds&&t.bounds.contains(e,n)}(t,f,h)?u.pick(t,n,r,f,h):null})))&&!1!==e.interactive&&(l.fill||l.stroke)&&Vs(t,l,o,s)&&(c=l),t.restore(),c||null}))},isect:bs,background:function(t,e){var n=e.stroke?Ys:0;t("class","background"),t("d",ss(null,e,n,n))},foreground:function(t,e,n){t("clip-path",e.clip?$s(n,e,e):null)}};function Xs(t,e){var n=t.image;return n&&n.url===t.url||(n={loaded:!1,width:0,height:0},e.loadImage(t.url).then((function(e){t.image=e,t.image.url=t.url}))),n}function Gs(t,e){return null!=t.width?t.width:e&&e.width?!1!==t.aspect&&t.height?t.height*e.width/e.height:e.width:0}function Zs(t,e){return null!=t.height?t.height:e&&e.height?!1!==t.aspect&&t.width?t.width*e.height/e.width:e.height:0}function Js(t,e){return"center"===t?e/2:"right"===t?e:0}function Qs(t,e){return"middle"===t?e/2:"bottom"===t?e:0}var Ks={type:"image",tag:"image",nested:!1,attr:function(t,e,n){var r=Xs(e,n),i=e.x||0,a=e.y||0,u=Gs(e,r),o=Zs(e,r),s=!1===e.aspect?"none":"xMidYMid";i-=Js(e.align,u),a-=Qs(e.baseline,o),t("href",r.src||"","http://www.w3.org/1999/xlink","xlink:href"),t("transform",Rs(i,a)),t("width",u),t("height",o),t("preserveAspectRatio",s)},bound:function(t,e){var n=e.image,r=e.x||0,i=e.y||0,a=Gs(e,n),u=Zs(e,n);return r-=Js(e.align,a),i-=Qs(e.baseline,u),t.set(r,i,r+a,i+u)},draw:function(t,e,n){var r=this;js(e,(function(e){if(!n||n.intersects(e.bounds)){var i,a,u,o,s=Xs(e,r),l=e.x||0,c=e.y||0,f=Gs(e,s),h=Zs(e,s);l-=Js(e.align,f),c-=Qs(e.baseline,h),!1!==e.aspect&&(a=s.width/s.height,u=e.width/e.height,a==a&&u==u&&a!==u&&(u<a?(c+=(h-(o=f/a))/2,h=o):(l+=(f-(o=h*a))/2,f=o))),s.loaded&&(t.globalAlpha=null!=(i=e.opacity)?i:1,t.drawImage(s,l,c,f,h))}}))},pick:Ss(),isect:p.cb,get:Xs,xOffset:Js,yOffset:Qs},tl=Us("line",(function(t,e){var n=e[0],r=n.interpolate||"linear";return is.curve(Eo(r,n.orient,n.tension)).context(t)(e)}),(function(t,e){for(var n,r,i=Math.pow(t[0].strokeWidth||1,2),a=t.length;--a>=0;)if(!1!==t[a].defined&&(n=t[a].x-e[0])*n+(r=t[a].y-e[1])*r<i)return t[a];return null}));function el(t,e){var n=e.path;if(null==n)return!0;var r=e.pathCache;r&&r.path===n||((e.pathCache=r=Co(n)).path=n),qo(t,r,e.x,e.y)}var nl={type:"path",tag:"path",nested:!1,attr:function(t,e){t("transform",Ns(e)),t("d",e.path)},bound:function(t,e){return el(hs(t),e)?t.set(0,0,0,0):cs(t,e)},draw:Cs(el),pick:Ts(el),isect:vs(el)};function rl(t,e){t.beginPath(),ss(t,e)}var il={type:"rect",tag:"path",nested:!1,attr:function(t,e){t("d",ss(null,e))},bound:function(t,e){var n,r;return cs(t.set(n=e.x||0,r=e.y||0,n+e.width||0,r+e.height||0),e)},draw:Cs(rl),pick:Ts(rl),isect:bs};function al(t,e,n){var r,i,a,u;return!(!e.stroke||!Ms(t,e,n))&&(r=e.x||0,i=e.y||0,a=null!=e.x2?e.x2:r,u=null!=e.y2?e.y2:i,t.beginPath(),t.moveTo(r,i),t.lineTo(a,u),!0)}var ul,ol={type:"rule",tag:"line",nested:!1,attr:function(t,e){t("transform",Ns(e)),t("x2",null!=e.x2?e.x2-(e.x||0):0),t("y2",null!=e.y2?e.y2-(e.y||0):0)},bound:function(t,e){var n,r;return cs(t.set(n=e.x||0,r=e.y||0,null!=e.x2?e.x2:n,null!=e.y2?e.y2:r),e)},draw:function(t,e,n){js(e,(function(e){if(!n||n.intersects(e.bounds)){var r=null==e.opacity?1:e.opacity;r&&al(t,e,r)&&t.stroke()}}))},pick:Ss((function(t,e,n,r){return!!t.isPointInStroke&&(al(t,e,1)&&t.isPointInStroke(n,r))})),isect:function(t,e){const n=t.x||0,r=t.y||0;return _s(e,n,r,null!=t.x2?t.x2:n,null!=t.y2?t.y2:r)}},sl=Ps("shape",(function(t,e){return(e.mark.shape||e.shape).context(t)(e)})),ll=Ps("symbol",(function(t,e){return us.context(t)(e)}),ys),cl={height:gl,measureWidth:dl,estimateWidth:fl,width:fl,canvas:ml};function fl(t,e){return ul=gl(t),hl(_l(t,e))}function hl(t){return~~(.8*t.length*ul)}function dl(t,e){return gl(t)<=0?0:(gs.font=wl(t),pl(_l(t,e)))}function pl(t){return gs.measureText(t).width}function gl(t){return null!=t.fontSize?t.fontSize:11}function ml(t){cl.width=t&&gs?dl:fl}function vl(t){return null!=t.lineHeight?t.lineHeight:gl(t)+2}function yl(t){return e=t.lineBreak&&t.text&&!Object(p.y)(t.text)?t.text.split(t.lineBreak):t.text,Object(p.y)(e)?e.length>1?e:e[0]:e;var e}function bl(t){const e=yl(t);return(Object(p.y)(e)?e.length-1:0)*vl(t)}function _l(t,e){return null==e?"":t.limit>0?function(t,e){var n,r=+t.limit,i=e+"";cl.width===dl?(gs.font=wl(t),n=pl):(ul=gl(t),n=hl);if(n(i)<r)return i;var a,u=t.ellipsis||"â€¦",o="rtl"===t.dir,s=0,l=i.length;if(r-=n(u),o){for(;s<l;)a=s+l>>>1,n(i.slice(a))>r?s=a+1:l=a;return u+i.slice(s)}for(;s<l;)a=1+(s+l>>>1),n(i.slice(0,a))<r?s=a:l=a-1;return i.slice(0,s)+u}(t,e):e+""}function xl(t,e){var n=t.font;return(e&&n?String(n).replace(/"/g,"'"):n)||"sans-serif"}function wl(t,e){return(t.fontStyle?t.fontStyle+" ":"")+(t.fontVariant?t.fontVariant+" ":"")+(t.fontWeight?t.fontWeight+" ":"")+gl(t)+"px "+xl(t,e)}function Al(t){var e=t.baseline,n=gl(t);return Math.round("top"===e?.79*n:"middle"===e?.3*n:"bottom"===e?-.21*n:0)}ml(!0);var Ol={left:"start",center:"middle",right:"end"},Ml=new Ja;function kl(t){var e,n=t.x||0,r=t.y||0,i=t.radius||0;return i&&(e=(t.theta||0)-So,n+=i*Math.cos(e),r+=i*Math.sin(e)),Ml.x1=n,Ml.y1=r,Ml}function El(t,e,n){var r,i=cl.height(e),a=e.align,u=kl(e),o=u.x1,s=u.y1,l=e.dx||0,c=(e.dy||0)+Al(e)-Math.round(.8*i),f=yl(e);if(Object(p.y)(f)?(i+=vl(e)*(f.length-1),r=f.reduce((t,n)=>Math.max(t,cl.width(e,n)),0)):r=cl.width(e,f),"center"===a?l-=r/2:"right"===a&&(l-=r),t.set(l+=o,c+=s,l+r,c+i),e.angle&&!n)t.rotate(e.angle*Fo,o,s);else if(2===n)return t.rotatedPoints(e.angle*Fo,o,s);return t}var jl={arc:Ls,area:qs,group:Hs,image:Ks,line:tl,path:nl,rect:il,rule:ol,shape:sl,symbol:ll,text:{type:"text",tag:"text",nested:!1,attr:function(t,e){var n,r=e.dx||0,i=(e.dy||0)+Al(e),a=kl(e),u=a.x1,o=a.y1,s=e.angle||0;t("text-anchor",Ol[e.align]||"start"),s?(n=Rs(u,o)+" "+zs(s),(r||i)&&(n+=" "+Rs(r,i))):n=Rs(u+r,o+i),t("transform",n)},bound:El,draw:function(t,e,n){js(e,(function(e){var r,i,a,u,o,s,l,c=null==e.opacity?1:e.opacity;if(!(n&&!n.intersects(e.bounds)||0===c||e.fontSize<=0||null==e.text||0===e.text.length)){if(t.font=wl(e),t.textAlign=e.align||"left",i=(r=kl(e)).x1,a=r.y1,e.angle&&(t.save(),t.translate(i,a),t.rotate(e.angle*Fo),i=a=0),i+=e.dx||0,a+=(e.dy||0)+Al(e),s=yl(e),Object(p.y)(s))for(o=vl(e),u=0;u<s.length;++u)l=_l(e,s[u]),e.fill&&As(t,e,c)&&t.fillText(l,i,a),e.stroke&&Ms(t,e,c)&&t.strokeText(l,i,a),a+=o;else l=_l(e,s),e.fill&&As(t,e,c)&&t.fillText(l,i,a),e.stroke&&Ms(t,e,c)&&t.strokeText(l,i,a);e.angle&&t.restore()}}))},pick:Ss((function(t,e,n,r,i,a){if(e.fontSize<=0)return!1;if(!e.angle)return!0;var u=kl(e),o=u.x1,s=u.y1,l=El(Ml,e,1),c=-e.angle*Fo,f=Math.cos(c),h=Math.sin(c),d=f*i-h*a+(o-f*o+h*s),p=h*i+f*a+(s-h*o-f*s);return l.contains(d,p)})),isect:function(t,e){var n=El(Ml,t,2);return _s(e,n[0],n[1],n[2],n[3])||_s(e,n[0],n[1],n[4],n[5])||_s(e,n[4],n[5],n[6],n[7])||_s(e,n[2],n[3],n[6],n[7])}},trail:Us("trail",(function(t,e){return os.context(t)(e)}),(function(t,e){for(var n,r,i=t.length;--i>=0;)if(!1!==t[i].defined&&(n=t[i].x-e[0])*n+(r=t[i].y-e[1])*r<(n=t[i].size||1)*n)return t[i];return null}))},Dl=function(t,e,n){var r=jl[t.mark.marktype],i=e||r.bound;return r.nested&&(t=t.mark),i(t.bounds||(t.bounds=new Ja),t,n)},Cl={mark:null},Fl=function(t,e,n){var r,i,a,u,o=jl[t.marktype],s=o.bound,l=t.items,c=l&&l.length;if(o.nested)return c?a=l[0]:(Cl.mark=t,a=Cl),u=Dl(a,s,n),e=e&&e.union(u)||u;if(e=e||t.bounds&&t.bounds.clear()||new Ja,c)for(r=0,i=l.length;r<i;++r)e.union(Dl(l[r],s,n));return t.bounds=e},Sl=["marktype","name","role","interactive","clip","items","zindex","x","y","width","height","align","baseline","fill","fillOpacity","opacity","stroke","strokeOpacity","strokeWidth","strokeCap","strokeDash","strokeDashOffset","startAngle","endAngle","innerRadius","outerRadius","cornerRadius","padAngle","interpolate","tension","orient","defined","url","path","x2","y2","size","shape","text","angle","theta","radius","dir","dx","dy","ellipsis","limit","lineBreak","lineHeight","font","fontSize","fontWeight","fontStyle","fontVariant"];function Bl(t){return function t(e){var n,r,i,a=e.marktype,u=e.items;if(u)for(r=0,i=u.length;r<i;++r)n=a?"mark":"group",u[r][n]=e,u[r].zindex&&(u[r][n].zdirty=!0),"group"===(a||n)&&t(u[r]);a&&Fl(e);return e}("string"==typeof t?JSON.parse(t):t)}function Tl(t){arguments.length?this.root=Bl(t):(this.root=zl({marktype:"group",name:"root",role:"frame"}),this.root.items=[new au(this.root)])}var Rl=Tl.prototype;function zl(t,e){return{bounds:new Ja,clip:!!t.clip,group:e,interactive:!1!==t.interactive,items:[],marktype:t.marktype,name:t.name||void 0,role:t.role||void 0,zindex:t.zindex||0}}function Nl(t,e,n){return!t&&"undefined"!=typeof document&&document.createElement&&(t=document),t?n?t.createElementNS(n,e):t.createElement(e):null}function Pl(t,e){e=e.toLowerCase();for(var n=t.childNodes,r=0,i=n.length;r<i;++r)if(n[r].tagName.toLowerCase()===e)return n[r]}function Ll(t,e,n,r){var i,a=t.childNodes[e];return a&&a.tagName.toLowerCase()===n.toLowerCase()||(i=a||null,a=Nl(t.ownerDocument,n,r),t.insertBefore(a,i)),a}function Ul(t,e){for(var n=t.childNodes,r=n.length;r>e;)t.removeChild(n[--r]);return t}function ql(t){return"mark-"+t.marktype+(t.role?" role-"+t.role:"")+(t.name?" "+t.name:"")}Rl.toJSON=function(t){return function(t,e){return JSON.stringify(t,Sl,e)}(this.root,t||0)},Rl.mark=function(t,e,n){var r=zl(t,e=e||this.root.items[0]);return e.items[n]=r,r.zindex&&(r.group.zdirty=!0),r};var Il=function(t,e){var n=e.getBoundingClientRect();return[t.clientX-n.left-(e.clientLeft||0),t.clientY-n.top-(e.clientTop||0)]};function $l(t,e){this._active=null,this._handlers={},this._loader=t||Mn(),this._tooltip=e||Yl}function Yl(t,e,n,r){t.element().setAttribute("title",r||"")}var Wl=$l.prototype;function Vl(t){this._el=null,this._bgcolor=null,this._loader=new su(t)}Wl.initialize=function(t,e,n){return this._el=t,this._obj=n||null,this.origin(e)},Wl.element=function(){return this._el},Wl.canvas=function(){return this._el&&this._el.firstChild},Wl.origin=function(t){return arguments.length?(this._origin=t||[0,0],this):this._origin.slice()},Wl.scene=function(t){return arguments.length?(this._scene=t,this):this._scene},Wl.on=function(){},Wl.off=function(){},Wl._handlerIndex=function(t,e,n){for(var r=t?t.length:0;--r>=0;)if(t[r].type===e&&(!n||t[r].handler===n))return r;return-1},Wl.handlers=function(t){var e,n=this._handlers,r=[];if(t)r.push.apply(r,n[this.eventName(t)]);else for(e in n)r.push.apply(r,n[e]);return r},Wl.eventName=function(t){var e=t.indexOf(".");return e<0?t:t.slice(0,e)},Wl.handleHref=function(t,e,n){this._loader.sanitize(n,{context:"href"}).then((function(e){var n=new MouseEvent(t.type,t),r=Nl(null,"a");for(var i in e)r.setAttribute(i,e[i]);r.dispatchEvent(n)})).catch((function(){}))},Wl.handleTooltip=function(t,e,n){if(e&&null!=e.tooltip){e=function(t,e,n,r){var i,a,u=t&&t.mark;if(u&&(i=jl[u.marktype]).tip){for((a=Il(e,n))[0]-=r[0],a[1]-=r[1];t=t.mark.group;)a[0]-=t.x||0,a[1]-=t.y||0;t=i.tip(u.items,a)}return t}(e,t,this.canvas(),this._origin);var r=n&&e&&e.tooltip||null;this._tooltip.call(this._obj,this,t,e,r)}},Wl.getItemBoundingClientRect=function(t){if(e=this.canvas()){for(var e,n=e.getBoundingClientRect(),r=this._origin,i=t.bounds,a=i.x1+r[0]+n.left,u=i.y1+r[1]+n.top,o=i.width(),s=i.height();t.mark&&(t=t.mark.group);)a+=t.x||0,u+=t.y||0;return{x:a,y:u,width:o,height:s,left:a,top:u,right:a+o,bottom:u+s}}};var Hl=Vl.prototype;Hl.initialize=function(t,e,n,r,i){return this._el=t,this.resize(e,n,r,i)},Hl.element=function(){return this._el},Hl.canvas=function(){return this._el&&this._el.firstChild},Hl.background=function(t){return 0===arguments.length?this._bgcolor:(this._bgcolor=t,this)},Hl.resize=function(t,e,n,r){return this._width=t,this._height=e,this._origin=n||[0,0],this._scale=r||1,this},Hl.dirty=function(){},Hl.render=function(t){var e=this;return e._call=function(){e._render(t)},e._call(),e._call=null,e},Hl._render=function(){},Hl.renderAsync=function(t){var e=this.render(t);return this._ready?this._ready.then((function(){return e})):Promise.resolve(e)},Hl._load=function(t,e){var n=this,r=n._loader[t](e);if(!n._ready){var i=n._call;n._ready=n._loader.ready().then((function(t){t&&i(),n._ready=null}))}return r},Hl.sanitizeURL=function(t){return this._load("sanitizeURL",t)},Hl.loadImage=function(t){return this._load("loadImage",t)};var Xl="mouseout";function Gl(t,e){$l.call(this,t,e),this._down=null,this._touch=null,this._first=!0}var Zl=Object(p.w)(Gl,$l);function Jl(t,e,n){return function(r){var i=this._active,a=this.pickEvent(r);a===i?this.fire(t,r):(i&&i.exit||this.fire(n,r),this._active=a,this.fire(e,r),this.fire(t,r))}}function Ql(t){return function(e){this.fire(t,e),this._active=null}}Zl.initialize=function(t,e,n){var r=this._canvas=t&&Pl(t,"canvas");if(r){var i=this;this.events.forEach((function(t){r.addEventListener(t,(function(e){Zl[t]?Zl[t].call(i,e):i.fire(t,e)}))}))}return $l.prototype.initialize.call(this,t,e,n)},Zl.canvas=function(){return this._canvas},Zl.context=function(){return this._canvas.getContext("2d")},Zl.events=["keydown","keypress","keyup","dragenter","dragleave","dragover","mousedown","mouseup","mousemove","mouseout","mouseover","click","dblclick","wheel","mousewheel","touchstart","touchmove","touchend"],Zl.DOMMouseScroll=function(t){this.fire("mousewheel",t)},Zl.mousemove=Jl("mousemove","mouseover","mouseout"),Zl.dragover=Jl("dragover","dragenter","dragleave"),Zl.mouseout=Ql("mouseout"),Zl.dragleave=Ql("dragleave"),Zl.mousedown=function(t){this._down=this._active,this.fire("mousedown",t)},Zl.click=function(t){this._down===this._active&&(this.fire("click",t),this._down=null)},Zl.touchstart=function(t){this._touch=this.pickEvent(t.changedTouches[0]),this._first&&(this._active=this._touch,this._first=!1),this.fire("touchstart",t,!0)},Zl.touchmove=function(t){this.fire("touchmove",t,!0)},Zl.touchend=function(t){this.fire("touchend",t,!0),this._touch=null},Zl.fire=function(t,e,n){var r,i,a=n?this._touch:this._active,u=this._handlers[t];if(e.vegaType=t,"click"===t&&a&&a.href?this.handleHref(e,a,a.href):"mousemove"!==t&&t!==Xl||this.handleTooltip(e,a,t!==Xl),u)for(r=0,i=u.length;r<i;++r)u[r].handler.call(this._obj,e,a)},Zl.on=function(t,e){var n=this.eventName(t),r=this._handlers;return this._handlerIndex(r[n],t,e)<0&&(r[n]||(r[n]=[])).push({type:t,handler:e}),this},Zl.off=function(t,e){var n=this.eventName(t),r=this._handlers[n],i=this._handlerIndex(r,t,e);return i>=0&&r.splice(i,1),this},Zl.pickEvent=function(t){var e=Il(t,this._canvas),n=this._origin;return this.pick(this._scene,e[0],e[1],e[0]-n[0],e[1]-n[1])},Zl.pick=function(t,e,n,r,i){var a=this.context();return jl[t.marktype].pick.call(this,a,t,e,n,r,i)};var Kl="undefined"!=typeof window&&window.devicePixelRatio||1;function tc(t){Vl.call(this,t),this._redraw=!1,this._dirty=new Ja}var ec=Object(p.w)(tc,Vl),nc=Vl.prototype,rc=new Ja;function ic(t,e){$l.call(this,t,e);var n=this;n._hrefHandler=uc(n,(function(t,e){e&&e.href&&n.handleHref(t,e,e.href)})),n._tooltipHandler=uc(n,(function(t,e){n.handleTooltip(t,e,t.type!==Xl)}))}ec.initialize=function(t,e,n,r,i,a){return this._options=a,this._canvas=uu(1,1,a&&a.type),t&&(Ul(t,0).appendChild(this._canvas),this._canvas.setAttribute("class","marks")),nc.initialize.call(this,t,e,n,r,i)},ec.resize=function(t,e,n,r){return nc.resize.call(this,t,e,n,r),function(t,e,n,r,i,a){var u,o="undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&null!=t.parentNode,s=t.getContext("2d"),l=o?Kl:i;for(u in t.width=e*l,t.height=n*l,a)s[u]=a[u];o&&1!==l&&(t.style.width=e+"px",t.style.height=n+"px"),s.pixelRatio=l,s.setTransform(l,0,0,l,l*r[0],l*r[1])}(this._canvas,this._width,this._height,this._origin,this._scale,this._options&&this._options.context),this._redraw=!0,this},ec.canvas=function(){return this._canvas},ec.context=function(){return this._canvas?this._canvas.getContext("2d"):null},ec.dirty=function(t){var e=function(t,e){if(null==e)return t;for(var n=rc.clear().union(t);null!=e;e=e.mark.group)n.translate(e.x||0,e.y||0);return n}(t.bounds,t.mark.group);this._dirty.union(e)},ec._render=function(t){var e=this.context(),n=this._origin,r=this._width,i=this._height,a=this._dirty;return e.save(),this._redraw||a.empty()?(this._redraw=!1,a=null):a=function(t,e,n){return e.expand(1).round(),e.translate(-n[0]%1,-n[1]%1),t.beginPath(),t.rect(e.x1,e.y1,e.width(),e.height()),t.clip(),e}(e,a,n),this.clear(-n[0],-n[1],r,i),this.draw(e,t,a),e.restore(),this._dirty.clear(),this},ec.draw=function(t,e,n){var r=jl[e.marktype];e.clip&&function(t,e){var n=e.clip;if(t.save(),t.beginPath(),Object(p.B)(n))n(t);else{var r=e.group;t.rect(0,0,r.width||0,r.height||0)}t.clip()}(t,e),r.draw.call(this,t,e,n),e.clip&&t.restore()},ec.clear=function(t,e,n,r){var i=this.context();i.clearRect(t,e,n,r),null!=this._bgcolor&&(i.fillStyle=this._bgcolor,i.fillRect(t,e,n,r))};var ac=Object(p.w)(ic,$l);function uc(t,e){return function(n){var r=n.target.__data__;n.vegaType=n.type,r=Array.isArray(r)?r[0]:r,e.call(t._obj,n,r)}}function oc(t,e,n){var r,i,a="<"+t;if(e)for(r in e)null!=(i=e[r])&&(a+=" "+r+'="'+i+'"');return n&&(a+=" "+n),a+">"}function sc(t){return"</"+t+">"}ac.initialize=function(t,e,n){var r=this._svg;return r&&(r.removeEventListener("click",this._hrefHandler),r.removeEventListener("mousemove",this._tooltipHandler),r.removeEventListener(Xl,this._tooltipHandler)),this._svg=r=t&&Pl(t,"svg"),r&&(r.addEventListener("click",this._hrefHandler),r.addEventListener("mousemove",this._tooltipHandler),r.addEventListener(Xl,this._tooltipHandler)),$l.prototype.initialize.call(this,t,e,n)},ac.canvas=function(){return this._svg},ac.on=function(t,e){var n=this.eventName(t),r=this._handlers;if(this._handlerIndex(r[n],t,e)<0){var i={type:t,handler:e,listener:uc(this,e)};(r[n]||(r[n]=[])).push(i),this._svg&&this._svg.addEventListener(n,i.listener)}return this},ac.off=function(t,e){var n=this.eventName(t),r=this._handlers[n],i=this._handlerIndex(r,t,e);return i>=0&&(this._svg&&this._svg.removeEventListener(n,r[i].listener),r.splice(i,1)),this};var lc={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},cc={fill:"fill",fillOpacity:"fill-opacity",stroke:"stroke",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",strokeCap:"stroke-linecap",strokeJoin:"stroke-linejoin",strokeDash:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeMiterLimit:"stroke-miterlimit",opacity:"opacity"},fc=Object.keys(cc),hc=lc.xmlns;function dc(t){Vl.call(this,t),this._dirtyID=0,this._dirty=[],this._svg=null,this._root=null,this._defs=null}var pc=Object(p.w)(dc,Vl),gc=Vl.prototype;function mc(t,e,n){var r,i,a;if("radial"===e.gradient){var u=Ll(t,n++,"pattern",hc);u.setAttribute("id",tu+e.id),u.setAttribute("viewBox","0,0,1,1"),u.setAttribute("width","100%"),u.setAttribute("height","100%"),u.setAttribute("preserveAspectRatio","xMidYMid slice"),(u=Ll(u,0,"rect",hc)).setAttribute("width","1"),u.setAttribute("height","1"),u.setAttribute("fill","url("+Mc()+"#"+e.id+")"),(t=Ll(t,n++,"radialGradient",hc)).setAttribute("id",e.id),t.setAttribute("fx",e.x1),t.setAttribute("fy",e.y1),t.setAttribute("fr",e.r1),t.setAttribute("cx",e.x2),t.setAttribute("cy",e.y2),t.setAttribute("r",e.r2)}else(t=Ll(t,n++,"linearGradient",hc)).setAttribute("id",e.id),t.setAttribute("x1",e.x1),t.setAttribute("x2",e.x2),t.setAttribute("y1",e.y1),t.setAttribute("y2",e.y2);for(r=0,i=e.stops.length;r<i;++r)(a=Ll(t,r,"stop",hc)).setAttribute("offset",e.stops[r].offset),a.setAttribute("stop-color",e.stops[r].color);return Ul(t,r),n}function vc(t,e,n){var r;return(t=Ll(t,n,"clipPath",hc)).setAttribute("id",e.id),e.path?(r=Ll(t,0,"path",hc)).setAttribute("d",e.path):((r=Ll(t,0,"rect",hc)).setAttribute("x",0),r.setAttribute("y",0),r.setAttribute("width",e.width),r.setAttribute("height",e.height)),n+1}function yc(t,e){for(;t&&t.dirty!==e;t=t.mark.group){if(t.dirty=e,!t.mark||t.mark.dirty===e)return;t.mark.dirty=e}}function bc(t,e,n,r,i){var a,u=t._svg;if(!u&&(u=Nl(a=e.ownerDocument,r,hc),t._svg=u,t.mark&&(u.__data__=t,u.__values__={fill:"default"},"g"===r))){var o=Nl(a,"path",hc);o.setAttribute("class","background"),u.appendChild(o),o.__data__=t;var s=Nl(a,"g",hc);u.appendChild(s),s.__data__=t}return(u.ownerSVGElement!==i||function(t,e){return t.parentNode&&t.parentNode.childNodes.length>1&&t.previousSibling!=e}(u,n))&&e.insertBefore(u,n?n.nextSibling:e.firstChild),u}pc.initialize=function(t,e,n,r){return t&&(this._svg=Ll(t,0,"svg",hc),this._svg.setAttribute("class","marks"),Ul(t,1),this._root=Ll(this._svg,0,"g",hc),Ul(this._svg,1)),this._defs={gradient:{},clipping:{}},this.background(this._bgcolor),gc.initialize.call(this,t,e,n,r)},pc.background=function(t){return arguments.length&&this._svg&&this._svg.style.setProperty("background-color",t),gc.background.apply(this,arguments)},pc.resize=function(t,e,n,r){return gc.resize.call(this,t,e,n,r),this._svg&&(this._svg.setAttribute("width",this._width*this._scale),this._svg.setAttribute("height",this._height*this._scale),this._svg.setAttribute("viewBox","0 0 "+this._width+" "+this._height),this._root.setAttribute("transform","translate("+this._origin+")")),this._dirty=[],this},pc.canvas=function(){return this._svg},pc.svg=function(){if(!this._svg)return null;var t={class:"marks",width:this._width*this._scale,height:this._height*this._scale,viewBox:"0 0 "+this._width+" "+this._height};for(var e in lc)t[e]=lc[e];var n=this._bgcolor?oc("rect",{width:this._width,height:this._height,style:"fill: "+this._bgcolor+";"})+sc("rect"):"";return oc("svg",t)+n+this._svg.innerHTML+sc("svg")},pc._render=function(t){return this._dirtyCheck()&&(this._dirtyAll&&this._resetDefs(),this.draw(this._root,t),Ul(this._root,1)),this.updateDefs(),this._dirty=[],++this._dirtyID,this},pc.updateDefs=function(){var t,e=this._svg,n=this._defs,r=n.el,i=0;for(t in n.gradient)r||(n.el=r=Ll(e,0,"defs",hc)),i=mc(r,n.gradient[t],i);for(t in n.clipping)r||(n.el=r=Ll(e,0,"defs",hc)),i=vc(r,n.clipping[t],i);r&&(0===i?(e.removeChild(r),n.el=null):Ul(r,i))},pc._resetDefs=function(){var t=this._defs;t.gradient={},t.clipping={}},pc.dirty=function(t){t.dirty!==this._dirtyID&&(t.dirty=this._dirtyID,this._dirty.push(t))},pc.isDirty=function(t){return this._dirtyAll||!t._svg||t.dirty===this._dirtyID},pc._dirtyCheck=function(){this._dirtyAll=!0;var t=this._dirty;if(!t.length||!this._dirtyID)return!0;var e,n,r,i,a,u,o,s=++this._dirtyID;for(a=0,u=t.length;a<u;++a)(n=(e=t[a]).mark).marktype!==r&&(r=n.marktype,i=jl[r]),n.zdirty&&n.dirty!==s&&(this._dirtyAll=!1,yc(e,s),n.items.forEach((function(t){t.dirty=s}))),n.zdirty||(e.exit?(i.nested&&n.items.length?(o=n.items[0])._svg&&this._update(i,o._svg,o):e._svg&&(o=e._svg.parentNode)&&o.removeChild(e._svg),e._svg=null):(e=i.nested?n.items[0]:e)._update!==s&&(e._svg&&e._svg.ownerSVGElement?this._update(i,e._svg,e):(this._dirtyAll=!1,yc(e,s)),e._update=s));return!this._dirtyAll},pc.draw=function(t,e,n){if(!this.isDirty(e))return e._svg;var r,i=this,a=this._svg,u=jl[e.marktype],o=!1===e.interactive?"none":null,s="g"===u.tag,l=null,c=0;function f(t){var e=i.isDirty(t),n=bc(t,r,l,u.tag,a);e&&(i._update(u,n,t),s&&function(t,e,n){e=e.lastChild;var r,i=0;js(n,(function(n){r=t.draw(e,n,r),++i})),Ul(e,1+i)}(i,n,t)),l=n,++c}return(r=bc(e,t,n,"g",a)).setAttribute("class",ql(e)),s||r.style.setProperty("pointer-events",o),e.clip?r.setAttribute("clip-path",$s(i,e,e.group)):r.removeAttribute("clip-path"),u.nested?e.items.length&&f(e.items[0]):js(e,f),Ul(r,c),r};var _c=null,xc=null,wc={group:function(t,e,n){xc=e.__values__,_c=e.childNodes[1],t.foreground(Oc,n,this),_c=e.childNodes[0],t.background(Oc,n,this);var r=!1===n.mark.interactive?"none":null;r!==xc.events&&(_c.style.setProperty("pointer-events",r),xc.events=r)},text:function(t,e,n){var r,i,a,u,o=yl(n);Object(p.y)(o)?(r=(i=o.map(t=>_l(n,t))).join("\n"))!==xc.text&&(Ul(e,0),a=e.ownerDocument,u=vl(n),i.forEach((t,r)=>{const i=Nl(a,"tspan",hc);i.__data__=n,i.textContent=t,r&&(i.setAttribute("x",0),i.setAttribute("dy",u)),e.appendChild(i)}),xc.text=r):(i=_l(n,o))!==xc.text&&(e.textContent=i,xc.text=i),Ac(e,"font-family",xl(n)),Ac(e,"font-size",gl(n)+"px"),Ac(e,"font-style",n.fontStyle),Ac(e,"font-variant",n.fontVariant),Ac(e,"font-weight",n.fontWeight)}};function Ac(t,e,n){n!==xc[e]&&(null==n?t.style.removeProperty(e):t.style.setProperty(e,n+""),xc[e]=n)}function Oc(t,e,n){e!==xc[t]&&(null!=e?n?_c.setAttributeNS(n,t,e):_c.setAttribute(t,e):n?_c.removeAttributeNS(n,t):_c.removeAttribute(t),xc[t]=e)}function Mc(){var t;return"undefined"==typeof window?"":(t=window.location).hash?t.href.slice(0,-t.hash.length):t.href}function kc(t){Vl.call(this,t),this._text={head:"",bg:"",root:"",foot:"",defs:"",body:""},this._defs={gradient:{},clipping:{}}}pc._update=function(t,e,n){_c=e,xc=e.__values__,t.attr(Oc,n,this);var r=wc[t.type];r&&r.call(this,t,e,n),this.style(_c,n)},pc.style=function(t,e){var n,r,i,a,u;if(null!=e)for(n=0,r=fc.length;n<r;++n)u=e[i=fc[n]],"font"===i&&(u=xl(e)),u!==xc[i]&&(a=cc[i],null==u?"fill"===a?t.style.setProperty(a,"none"):t.style.removeProperty(a):(eu(u)&&(u=nu(u,this._defs.gradient,Mc())),t.style.setProperty(a,u+"")),xc[i]=u)};var Ec,jc=Object(p.w)(kc,Vl),Dc=Vl.prototype;function Cc(t,e,n,r){Ec[r||t]=e}function Fc(t,e,n,r){if(null==t)return"";var i,a,u,o,s,l="";for("bgrect"===n&&!1===e.interactive&&(l+="pointer-events: none; "),"text"===n&&(l+="font-family: "+xl(t)+"; ",l+="font-size: "+gl(t)+"px; ",t.fontStyle&&(l+="font-style: "+t.fontStyle+"; "),t.fontVariant&&(l+="font-variant: "+t.fontVariant+"; "),t.fontWeight&&(l+="font-weight: "+t.fontWeight+"; ")),i=0,a=fc.length;i<a;++i)u=fc[i],o=cc[u],null==(s=t[u])?"fill"===o&&(l+="fill: none; "):"transparent"!==s||"fill"!==o&&"stroke"!==o?(eu(s)&&(s=nu(s,r.gradient,"")),l+=o+": "+s+"; "):l+=o+": none; ";return l?'style="'+l.trim()+'"':null}function Sc(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}jc.resize=function(t,e,n,r){Dc.resize.call(this,t,e,n,r);var i=this._origin,a=this._text,u={class:"marks",width:this._width*this._scale,height:this._height*this._scale,viewBox:"0 0 "+this._width+" "+this._height};for(var o in lc)u[o]=lc[o];a.head=oc("svg",u);var s=this._bgcolor;return"transparent"!==s&&"none"!==s||(s=null),a.bg=s?oc("rect",{width:this._width,height:this._height,style:"fill: "+s+";"})+sc("rect"):"",a.root=oc("g",{transform:"translate("+i+")"}),a.foot=sc("g")+sc("svg"),this},jc.background=function(){var t=Dc.background.apply(this,arguments);return arguments.length&&this._text.head&&this.resize(this._width,this._height,this._origin,this._scale),t},jc.svg=function(){var t=this._text;return t.head+t.bg+t.defs+t.root+t.body+t.foot},jc._render=function(t){return this._text.body=this.mark(t),this._text.defs=this.buildDefs(),this},jc.buildDefs=function(){var t,e,n,r,i,a=this._defs,u="";for(e in a.gradient){for(i=(n=a.gradient[e]).stops,"radial"===n.gradient?(u+=oc(r="pattern",{id:tu+e,viewBox:"0,0,1,1",width:"100%",height:"100%",preserveAspectRatio:"xMidYMid slice"}),u+=oc("rect",{width:"1",height:"1",fill:"url(#"+e+")"})+sc("rect"),u+=sc(r),u+=oc(r="radialGradient",{id:e,fx:n.x1,fy:n.y1,fr:n.r1,cx:n.x2,cy:n.y2,r:n.r2})):u+=oc(r="linearGradient",{id:e,x1:n.x1,x2:n.x2,y1:n.y1,y2:n.y2}),t=0;t<i.length;++t)u+=oc("stop",{offset:i[t].offset,"stop-color":i[t].color})+sc("stop");u+=sc(r)}for(e in a.clipping)n=a.clipping[e],u+=oc("clipPath",{id:e}),n.path?u+=oc("path",{d:n.path})+sc("path"):u+=oc("rect",{x:0,y:0,width:n.width,height:n.height})+sc("rect"),u+=sc("clipPath");return u.length>0?oc("defs")+u+sc("defs"):""},jc.attributes=function(t,e){return Ec={},t(Cc,e,this),Ec},jc.href=function(t){var e,n=this,r=t.href;if(r){if(e=n._hrefs&&n._hrefs[r])return e;n.sanitizeURL(r).then((function(t){t["xlink:href"]=t.href,t.href=null,(n._hrefs||(n._hrefs={}))[r]=t}))}return null},jc.mark=function(t){var e,n=this,r=jl[t.marktype],i=r.tag,a=this._defs,u="";function o(o){var s=n.href(o);if(s&&(u+=oc("a",s)),e="g"!==i?Fc(o,t,i,a):null,u+=oc(i,n.attributes(r.attr,o),e),"text"===i){const t=yl(o);if(Object(p.y)(t)){const e={x:0,dy:vl(o)};for(let n=0;n<t.length;++n)u+=oc("tspan",n?e:null)+Sc(_l(o,t[n]))+sc("tspan")}else u+=Sc(_l(o,t))}else"g"===i&&(u+=oc("path",n.attributes(r.background,o),Fc(o,t,"bgrect",a))+sc("path"),u+=oc("g",n.attributes(r.foreground,o))+n.markGroup(o)+sc("g"));u+=sc(i),s&&(u+=sc("a"))}return"g"!==i&&!1===t.interactive&&(e='style="pointer-events: none;"'),u+=oc("g",{class:ql(t),"clip-path":t.clip?$s(n,t,t.group):null},e),r.nested?t.items&&t.items.length&&o(t.items[0]):js(t,o),u+sc("g")},jc.markGroup=function(t){var e=this,n="";return js(t,(function(t){n+=e.mark(t)})),n};var Bc={Canvas:"canvas",PNG:"png",SVG:"svg",None:"none"},Tc={};function Rc(t,e){return t=String(t||"").toLowerCase(),arguments.length>1?(Tc[t]=e,this):Tc[t]}function zc(t,e,n,r){if(function(t,e,n){return t.bounds&&e.intersects(t.bounds)&&("group"===t.marktype||!1!==t.interactive&&(!n||n(t)))}(t,e,n)){const i=t.items,a=t.marktype,u=i.length;let o=0;if("group"===a)for(;o<u;++o)Nc(i[o],e,n,r);else for(const t=jl[a].isect;o<u;++o){let n=i[o];Pc(n,e,t)&&r.push(n)}}return r}function Nc(t,e,n,r){n&&n(t.mark)&&Pc(t,e,jl.group.isect)&&r.push(t);const i=t.items,a=i&&i.length;if(a){const u=t.x||0,o=t.y||0;e.translate(-u,-o);for(let t=0;t<a;++t)zc(i[t],e,n,r);e.translate(u,o)}return r}function Pc(t,e,n){const r=t.bounds;return e.encloses(r)||e.intersects(r)&&n(t,e)}Tc.canvas=Tc.png={renderer:tc,headless:tc,handler:Gl},Tc.svg={renderer:dc,headless:kc,handler:ic},Tc.none={};var Lc=new Ja;function Uc(t){Wn.call(this,null,t)}function qc(t,e,n){return e(t.bounds.clear(),t,n)}Object(p.w)(Uc,Wn).transform=function(t,e){var n,r=e.dataflow,i=t.mark,a=i.marktype,u=jl[a],o=u.bound,s=i.bounds;if(u.nested)i.items.length&&r.dirty(i.items[0]),s=qc(i,o),i.items.forEach((function(t){t.bounds.clear().union(s)}));else if(a===Ea||t.modified())switch(e.visit(e.MOD,(function(t){r.dirty(t)})),s.clear(),i.items.forEach((function(t){s.union(qc(t,o))})),i.role){case ja:case Sa:case Da:e.reflow()}else n=e.changed(e.REM),e.visit(e.ADD,(function(t){s.union(qc(t,o))})),e.visit(e.MOD,(function(t){n=n||s.alignsWith(t.bounds),r.dirty(t),s.union(qc(t,o))})),n&&(s.clear(),i.items.forEach((function(t){s.union(t.bounds)})));return function(t){var e=t.clip;if(Object(p.B)(e))e(hs(Lc.clear()));else{if(!e)return;Lc.set(0,0,t.group.width,t.group.height)}t.bounds.intersect(Lc)}(i),e.modifies("bounds")};var Ic=":vega_identifier:";function $c(t){Wn.call(this,0,t)}function Yc(t){Wn.call(this,null,t)}function Wc(t){Wn.call(this,null,t)}$c.Definition={type:"Identifier",metadata:{modifies:!0},params:[{name:"as",type:"string",required:!0}]},Object(p.w)($c,Wn).transform=function(t,e){var n=function(t){var e=t._signals[Ic];e||(t._signals[Ic]=e=t.add(0));return e}(e.dataflow),r=n.value,i=t.as;return e.visit(e.ADD,(function(t){t[i]||(t[i]=++r)})),n.set(this.value=r),e},Object(p.w)(Yc,Wn).transform=function(t,e){var n=this.value;n||((n=e.dataflow.scenegraph().mark(t.markdef,function(t){var e=t.groups,n=t.parent;return e&&1===e.size?e.get(Object.keys(e.object)[0]):e&&n?e.lookup(n):null}(t),t.index)).group.context=t.context,t.context.group||(t.context.group=n.group),n.source=this.source,n.clip=t.clip,n.interactive=t.interactive,this.value=n);var r=n.marktype===Ea?au:iu;return e.visit(e.ADD,(function(t){r.call(t,n)})),(t.modified("clip")||t.modified("interactive"))&&(n.clip=t.clip,n.interactive=!!t.interactive,n.zdirty=!0,e.reflow()),n.items=e.source,e};var Vc=Object(p.w)(Wc,Wn),Hc={parity:function(t){return t.filter((t,e)=>e%2?t.opacity=0:1)},greedy:function(t,e){var n;return t.filter((t,r)=>r&&Xc(n.bounds,t.bounds,e)?t.opacity=0:(n=t,1))}};function Xc(t,e,n){return n>Math.max(e.x1-t.x2,t.x1-e.x2,e.y1-t.y2,t.y1-e.y2)}function Gc(t,e){for(var n,r=1,i=t.length,a=t[0].bounds;r<i;a=n,++r)if(Xc(a,n=t[r].bounds,e))return!0}function Zc(t){var e=t.bounds;return e.width()>1&&e.height()>1}function Jc(t){return t.forEach(t=>t.opacity=1),t}function Qc(t,e){return t.reflow(e.modified()).modifies("opacity")}function Kc(t){Wn.call(this,null,t)}Vc.transform=function(t,e){var n,r,i,a=Hc[t.method]||Hc.parity,u=e.materialize(e.SOURCE).source,o=t.separation||0;if(u&&u.length){if(!t.method)return t.modified("method")&&(Jc(u),e=Qc(e,t)),e;if(t.sort&&(u=u.slice().sort(t.sort)),n=Jc(u=u.filter(Zc)),e=Qc(e,t),n.length>=3&&Gc(n,o)){do{n=a(n,o)}while(n.length>=3&&Gc(n,o));n.length<3&&!Object(p.R)(u).opacity&&(n.length>1&&(Object(p.R)(n).opacity=0),Object(p.R)(u).opacity=1)}var s,l,c,f,h;return t.boundScale&&t.boundTolerance>=0&&(s=t.boundScale,l=t.boundOrient,c=+t.boundTolerance,f=s.range(),h=new Ja,l===pa||l===va?h.set(f[0],-1/0,f[1],1/0):h.set(-1/0,f[0],1/0,f[1]),h.expand(c||1),r=t=>h.encloses(t.bounds),u.forEach(t=>{r(t)||(t.opacity=0)})),i=n[0].mark.bounds.clear(),u.forEach(t=>{t.opacity&&i.union(t.bounds)}),e}},Object(p.w)(Kc,Wn).transform=function(t,e){var n=e.dataflow;if(e.visit(e.ALL,(function(t){n.dirty(t)})),e.fields&&e.fields.zindex){var r=e.source&&e.source[0];r&&(r.mark.zdirty=!0)}};const tf=new Ja;function ef(t,e,n){return t[e]===n?0:(t[e]=n,1)}const nf=.5;function rf(t){var e=t.items[0].datum.orient;return e===ga||e===ma}function af(t,e,n,r){var i,a,u=e.items[0],o=u.datum,s=o.orient,l=function(t){var e=+t.grid;return[t.ticks?e++:-1,t.labels?e++:-1,e+ +t.domain]}(o),c=u.range,f=u.offset,h=u.position,d=u.minExtent,p=u.maxExtent,g=o.title&&u.items[l[2]].items[0],m=u.titlePadding,v=u.bounds,y=g&&bl(g),b=0,_=0;switch(tf.clear().union(v),v.clear(),(i=l[0])>-1&&v.union(u.items[i].bounds),(i=l[1])>-1&&v.union(u.items[i].bounds),s){case pa:b=h||0,_=-f,a=Math.max(d,Math.min(p,-v.y1)),g&&(a=uf(t,g,a,m,y,0,-1,v)),v.add(0,-a).add(c,0);break;case ga:b=-f,_=h||0,a=Math.max(d,Math.min(p,-v.x1)),g&&(a=uf(t,g,a,m,y,1,-1,v)),v.add(-a,0).add(0,c);break;case ma:b=n+f,_=h||0,a=Math.max(d,Math.min(p,v.x2)),g&&(a=uf(t,g,a,m,y,1,1,v)),v.add(0,0).add(a,c);break;case va:b=h||0,_=r+f,a=Math.max(d,Math.min(p,v.y2)),g&&(a=uf(t,g,a,m,0,0,1,v)),v.add(0,0).add(c,a);break;default:b=u.x,_=u.y}return cs(v.translate(b,_),u),ef(u,"x",b+nf)|ef(u,"y",_+nf)&&(u.bounds=tf,t.dirty(u),u.bounds=v,t.dirty(u)),u.mark.bounds.clear().union(v)}function uf(t,e,n,r,i,a,u,o){var s=e.bounds,l=0,c=0;return e.auto?(t.dirty(e),n+=r,a?l=(e.x||0)-(e.x=u*(n+i)):c=(e.y||0)-(e.y=u*(n+i)),e.mark.bounds.clear().union(s.translate(-l,-c)),t.dirty(e),a?(o.add(0,s.y1).add(0,s.y2),n+=s.width()):(o.add(s.x1,0).add(s.x2,0),n+=s.height())):o.union(s),n}function of(t){return(new Ja).set(0,0,t.width||0,t.height||0)}function sf(t){var e=t.bounds.clone();return e.empty()?e.set(0,0,0,0):e.translate(-(t.x||0),-(t.y||0))}function lf(t,e,n){var r=Object(p.D)(t)?t[e]:t;return null!=r?r:void 0!==n?n:0}function cf(t){return t<0?Math.ceil(-t):0}function ff(t,e,n){var r,i,a,u,o,s,l,c,f,h,d,p=!n.nodirty,g=n.bounds===Xa?of:sf,m=tf.set(0,0,0,0),v=lf(n.align,Ga),y=lf(n.align,Za),b=lf(n.padding,Ga),_=lf(n.padding,Za),x=n.columns||e.length,w=x<0?1:Math.ceil(e.length/x),A=e.length,O=Array(A),M=Array(x),k=0,E=Array(A),j=Array(w),D=0,C=Array(A),F=Array(A),S=Array(A);for(i=0;i<x;++i)M[i]=0;for(i=0;i<w;++i)j[i]=0;for(i=0;i<A;++i)s=e[i],o=S[i]=g(s),s.x=s.x||0,C[i]=0,s.y=s.y||0,F[i]=0,a=i%x,u=~~(i/x),k=Math.max(k,l=Math.ceil(o.x2)),D=Math.max(D,c=Math.ceil(o.y2)),M[a]=Math.max(M[a],l),j[u]=Math.max(j[u],c),O[i]=b+cf(o.x1),E[i]=_+cf(o.y1),p&&t.dirty(e[i]);for(i=0;i<A;++i)i%x==0&&(O[i]=0),i<x&&(E[i]=0);if(v===Ha)for(a=1;a<x;++a){for(d=0,i=a;i<A;i+=x)d<O[i]&&(d=O[i]);for(i=a;i<A;i+=x)O[i]=d+M[a-1]}else if(v===Va){for(d=0,i=0;i<A;++i)i%x&&d<O[i]&&(d=O[i]);for(i=0;i<A;++i)i%x&&(O[i]=d+k)}else for(v=!1,a=1;a<x;++a)for(i=a;i<A;i+=x)O[i]+=M[a-1];if(y===Ha)for(u=1;u<w;++u){for(d=0,r=(i=u*x)+x;i<r;++i)d<E[i]&&(d=E[i]);for(i=u*x;i<r;++i)E[i]=d+j[u-1]}else if(y===Va){for(d=0,i=x;i<A;++i)d<E[i]&&(d=E[i]);for(i=x;i<A;++i)E[i]=d+D}else for(y=!1,u=1;u<w;++u)for(r=(i=u*x)+x;i<r;++i)E[i]+=j[u-1];for(f=0,i=0;i<A;++i)f=O[i]+(i%x?f:0),C[i]+=f-e[i].x;for(a=0;a<x;++a)for(h=0,i=a;i<A;i+=x)h+=E[i],F[i]+=h-e[i].y;if(v&&lf(n.center,Ga)&&w>1)for(i=0;i<A;++i)(f=(o=v===Va?k:M[i%x])-S[i].x2-e[i].x-C[i])>0&&(C[i]+=f/2);if(y&&lf(n.center,Za)&&1!==x)for(i=0;i<A;++i)(h=(o=y===Va?D:j[~~(i/x)])-S[i].y2-e[i].y-F[i])>0&&(F[i]+=h/2);for(i=0;i<A;++i)m.union(S[i].translate(C[i],F[i]));switch(f=lf(n.anchor,Ma),h=lf(n.anchor,ka),lf(n.anchor,Ga)){case Oa:f-=m.width();break;case Aa:f-=m.width()/2}switch(lf(n.anchor,Za)){case Oa:h-=m.height();break;case Aa:h-=m.height()/2}for(f=Math.round(f),h=Math.round(h),m.clear(),i=0;i<A;++i)e[i].mark.bounds.clear();for(i=0;i<A;++i)(s=e[i]).x+=C[i]+=f,s.y+=F[i]+=h,m.union(s.mark.bounds.union(s.bounds.translate(C[i],F[i]))),p&&t.dirty(s);return m}function hf(t,e,n){var r,i,a,u,o,s,l,c=function(t){for(var e,n,r=t.items,i=r.length,a=0,u={marks:[],rowheaders:[],rowfooters:[],colheaders:[],colfooters:[],rowtitle:null,coltitle:null};a<i;++a)if(n=(e=r[a]).items,e.marktype===Ea)switch(e.role){case ja:case Sa:case Da:break;case Ba:u.rowheaders.push(...n);break;case Ta:u.rowfooters.push(...n);break;case za:u.colheaders.push(...n);break;case Na:u.colfooters.push(...n);break;case Ra:u.rowtitle=n[0];break;case Pa:u.coltitle=n[0];break;default:u.marks.push(...n)}return u}(e),f=c.marks,h=n.bounds===Xa?df:pf,d=n.offset,p=n.columns||f.length,g=p<0?1:Math.ceil(f.length/p),m=g*p;const v=ff(t,f,n);c.rowheaders&&(s=lf(n.headerBand,Za,null),r=vf(t,c.rowheaders,f,p,g,-lf(d,"rowHeader"),gf,0,h,"x1",0,p,1,s)),c.colheaders&&(s=lf(n.headerBand,Ga,null),i=vf(t,c.colheaders,f,p,p,-lf(d,"columnHeader"),gf,1,h,"y1",0,1,p,s)),c.rowfooters&&(s=lf(n.footerBand,Za,null),a=vf(t,c.rowfooters,f,p,g,lf(d,"rowFooter"),mf,0,h,"x2",p-1,p,1,s)),c.colfooters&&(s=lf(n.footerBand,Ga,null),u=vf(t,c.colfooters,f,p,p,lf(d,"columnFooter"),mf,1,h,"y2",m-p,1,p,s)),c.rowtitle&&(o=lf(n.titleAnchor,Za),l=lf(d,"rowTitle"),l=o===Oa?a+l:r-l,s=lf(n.titleBand,Za,.5),yf(t,c.rowtitle,l,0,v,s)),c.coltitle&&(o=lf(n.titleAnchor,Ga),l=lf(d,"columnTitle"),l=o===Oa?u+l:i-l,s=lf(n.titleBand,Ga,.5),yf(t,c.coltitle,l,1,v,s))}function df(t,e){return"x1"===e?t.x||0:"y1"===e?t.y||0:"x2"===e?(t.x||0)+(t.width||0):"y2"===e?(t.y||0)+(t.height||0):void 0}function pf(t,e){return t.bounds[e]}function gf(t,e){return Math.floor(Math.min(t,e))}function mf(t,e){return Math.ceil(Math.max(t,e))}function vf(t,e,n,r,i,a,u,o,s,l,c,f,h,d){var p,g,m,v,y,b,_,x,w,A=n.length,O=0,M=0;if(!A)return O;for(p=c;p<A;p+=f)n[p]&&(O=u(O,s(n[p],l)));if(!e.length)return O;for(e.length>i&&(t.warn("Grid headers exceed limit: "+i),e=e.slice(0,i)),O+=a,g=0,v=e.length;g<v;++g)t.dirty(e[g]),e[g].mark.bounds.clear();for(p=c,g=0,v=e.length;g<v;++g,p+=f){for(y=(b=e[g]).mark.bounds,m=p;m>=0&&null==(_=n[m]);m-=h);o?(x=null==d?_.x:Math.round(_.bounds.x1+d*_.bounds.width()),w=O):(x=O,w=null==d?_.y:Math.round(_.bounds.y1+d*_.bounds.height())),y.union(b.bounds.translate(x-(b.x||0),w-(b.y||0))),b.x=x,b.y=w,t.dirty(b),M=u(M,y[l])}return M}function yf(t,e,n,r,i,a){if(e){t.dirty(e);var u=n,o=n;r?u=Math.round(i.x1+a*i.width()):o=Math.round(i.y1+a*i.height()),e.bounds.translate(u-(e.x||0),o-(e.y||0)),e.mark.bounds.clear().union(e.bounds),e.x=u,e.y=o,t.dirty(e)}}function bf(t,e,n,r,i,a,u){const o=function(t,e){const n=t[e]||{};return(e,r)=>null!=n[e]?n[e]:null!=t[e]?t[e]:r}(n,e),s=(f=t,h=o("offset",0),d=-1/0,f.forEach(t=>{null!=t.offset&&(d=Math.max(d,t.offset))}),d>-1/0?d:h),l=o("anchor",wa),c=l===Oa?1:l===Aa?.5:0;var f,h,d;const p={align:Ha,bounds:o("bounds",Xa),columns:"vertical"===o("direction")?1:t.length,padding:o("margin",8),center:o("center"),nodirty:!0};switch(e){case ga:p.anchor={x:Math.floor(r.x1)-s,column:Oa,y:c*(u||r.height()+2*r.y1),row:l};break;case ma:p.anchor={x:Math.ceil(r.x2)+s,y:c*(u||r.height()+2*r.y1),row:l};break;case pa:p.anchor={y:Math.floor(i.y1)-s,row:Oa,x:c*(a||i.width()+2*i.x1),column:l};break;case va:p.anchor={y:Math.ceil(i.y2)+s,x:c*(a||i.width()+2*i.x1),column:l};break;case ya:p.anchor={x:s,y:s};break;case ba:p.anchor={x:a-s,y:s,column:Oa};break;case _a:p.anchor={x:s,y:u-s,row:Oa};break;case xa:p.anchor={x:a-s,y:u-s,column:Oa,row:Oa}}return p}function _f(t,e){var n,r,i,a,u=e.items[0],o=u.datum,s=u.orient,l=u.bounds,c=u.x,f=u.y;return u._bounds?u._bounds.clear().union(l):u._bounds=l.clone(),l.clear(),function(t,e,n){var r=e.padding,i=r-n.x,a=r-n.y;if(e.datum.title){var u=e.items[1].items[0],o=u.anchor,s=e.titlePadding||0,l=r-u.x,c=r-u.y;switch(u.orient){case ga:i+=Math.ceil(u.bounds.width())+s;break;case ma:case va:break;default:a+=u.bounds.height()+s}switch((i||a)&&wf(t,n,i,a),u.orient){case ga:c+=xf(e,n,u,o,1,1);break;case ma:l+=xf(e,n,u,Oa,0,0)+s,c+=xf(e,n,u,o,1,1);break;case va:l+=xf(e,n,u,o,0,0),c+=xf(e,n,u,Oa,-1,0,1)+s;break;default:l+=xf(e,n,u,o,0,0)}(l||c)&&wf(t,u,l,c),(l=Math.round(u.bounds.x1-r))<0&&(wf(t,n,-l,0),wf(t,u,-l,0))}else(i||a)&&wf(t,n,i,a)}(t,u,u.items[0].items[0]),l=function(t,e){return t.items.forEach(t=>e.union(t.bounds)),e.x1=t.padding,e.y1=t.padding,e}(u,l),n=2*u.padding,r=2*u.padding,l.empty()||(n=Math.ceil(l.width()+n),r=Math.ceil(l.height()+r)),o.type===Ua&&(i=u.items[0].items[0].items[0].items,a=i.reduce((function(t,e){return t[e.column]=Math.max(e.bounds.x2-e.x,t[e.column]||0),t}),{}),i.forEach((function(t){t.width=a[t.column],t.height=t.bounds.y2-t.y}))),s!==Wa&&(u.x=c=0,u.y=f=0),u.width=n,u.height=r,cs(l.set(c,f,c+n,f+r),u),u.mark.bounds.clear().union(l),u}function xf(t,e,n,r,i,a,u){const o="symbol"!==t.datum.type,s=n.datum.vgrad,l=(!o||!a&&s||u?e:e.items[0]).bounds[i?"y2":"x2"]-t.padding,c=s&&a?l:0,f=s&&a?0:l,h=i<=0?0:bl(n);return Math.round(r===wa?c:r===Oa?f-h:.5*(l-h))}function wf(t,e,n,r){e.x+=n,e.y+=r,e.bounds.translate(n,r),e.mark.bounds.translate(n,r),t.dirty(e)}function Af(t){Wn.call(this,null,t)}Object(p.w)(Af,Wn).transform=function(t,e){var n=e.dataflow;return t.mark.items.forEach((function(e){t.layout&&hf(n,e,t.layout),function(t,e,n){var r,i,a,u,o,s=e.items,l=Math.max(0,e.width||0),c=Math.max(0,e.height||0),f=(new Ja).set(0,0,l,c),h=f.clone(),d=f.clone(),p=[];for(u=0,o=s.length;u<o;++u)switch((i=s[u]).role){case ja:(rf(i)?h:d).union(af(t,i,l,c));break;case Da:r=i;break;case Sa:p.push(_f(t,i));break;case Ca:case Fa:case Ba:case Ta:case Ra:case za:case Na:case Pa:h.union(i.bounds),d.union(i.bounds);break;default:f.union(i.bounds)}if(p.length){const e={};p.forEach(t=>{(a=t.orient||ma)!==Wa&&(e[a]||(e[a]=[])).push(t)});for(let r in e){const i=e[r];ff(t,i,bf(i,r,n.legends,h,d,l,c))}p.forEach(e=>{const r=e.bounds;if(r.equals(e._bounds)||(e.bounds=e._bounds,t.dirty(e),e.bounds=r,t.dirty(e)),n.autosize&&n.autosize.type===qa)switch(e.orient){case ga:case ma:f.add(r.x1,0).add(r.x2,0);break;case pa:case va:f.add(0,r.y1).add(0,r.y2)}else f.union(r)})}f.union(h).union(d),r&&f.union(function(t,e,n,r,i){var a,u=e.items[0],o=u.frame,s=u.orient,l=u.anchor,c=u.offset,f=u.padding,h=u.items[0].items[0],d=u.items[1]&&u.items[1].items[0],p=s===ga||s===ma?r:n,g=0,m=0,v=0,y=0,b=0;if(o!==Ea?s===ga?(g=i.y2,p=i.y1):s===ma?(g=i.y1,p=i.y2):(g=i.x1,p=i.x2):s===ga&&(g=r,p=0),a=l===wa?g:l===Oa?p:(g+p)/2,d&&d.text){switch(s){case pa:case va:b=h.bounds.height()+f;break;case ga:y=h.bounds.width()+f;break;case ma:y=-h.bounds.width()-f}tf.clear().union(d.bounds),tf.translate(y-(d.x||0),b-(d.y||0)),ef(d,"x",y)|ef(d,"y",b)&&(t.dirty(d),d.bounds.clear().union(tf),d.mark.bounds.clear().union(tf),t.dirty(d)),tf.clear().union(d.bounds)}else tf.clear();switch(tf.union(h.bounds),s){case pa:m=a,v=i.y1-tf.height()-c;break;case ga:m=i.x1-tf.width()-c,v=a;break;case ma:m=i.x2+tf.width()+c,v=a;break;case va:m=a,v=i.y2+c;break;default:m=u.x,v=u.y}return ef(u,"x",m)|ef(u,"y",v)&&(tf.translate(m,v),t.dirty(u),u.bounds.clear().union(tf),e.bounds.clear().union(tf),t.dirty(u)),u.bounds}(t,r,l,c,f));e.clip&&f.set(0,0,e.width||0,e.height||0);!function(t,e,n,r){var i=r.autosize||{},a=i.type,u=t._width,o=t._height,s=t.padding();if(t._autosize<1||!a)return;var l=Math.max(0,e.width||0),c=Math.max(0,Math.ceil(-n.x1)),f=Math.max(0,Math.ceil(n.x2-l)),h=Math.max(0,e.height||0),d=Math.max(0,Math.ceil(-n.y1)),p=Math.max(0,Math.ceil(n.y2-h));i.contains===La&&(u-=s.left+s.right,o-=s.top+s.bottom);a===Wa?(c=0,d=0,l=u,h=o):a===qa?(l=Math.max(0,u-c-f),h=Math.max(0,o-d-p)):a===Ia?(l=Math.max(0,u-c-f),o=h+d+p):a===$a?(u=l+c+f,h=Math.max(0,o-d-p)):a===Ya&&(u=l+c+f,o=h+d+p);t._resizeView(u,o,l,h,[c,d],i.resize)}(t,e,f,n)}(n,e,t)})),t.modified()&&e.reflow(),e};var Of=function(t,e,n){var r=t-e+2*n;return t?r>0?r:1:0};const Mf="identity",kf="linear",Ef="log",jf="pow",Df="sqrt",Cf="symlog",Ff="time",Sf="utc",Bf="sequential",Tf="diverging",Rf="quantile",zf="quantize",Nf="threshold",Pf="ordinal",Lf="point",Uf="band",qf="bin-ordinal";function If(t){return t===Rf}function $f(t){return function(t){return t&&t.startsWith(Bf)}(t)||function(t){return t&&t.startsWith(Tf)}(t)}function Yf(t){return t===Ef||t.endsWith("-log")}function Wf(t){switch(t){case kf:case Ef:case jf:case Df:case Cf:case Ff:case Sf:case Bf:return!0}return!1}function Vf(t){return t===qf||t===Pf||t===Uf||t===Lf}function Hf(t){return t===qf||t===Rf||t===zf||t===Nf}var Xf=Bt((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));Xf.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Bt((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Xf:null};var Gf=Xf,Zf=(Xf.range,Bt((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Jf=Zf,Qf=(Zf.range,Bt((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*Tt)}),(function(t,e){return(e-t)/Tt}),(function(t){return t.getMinutes()}))),Kf=Qf,th=(Qf.range,Bt((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Tt)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),eh=th,nh=(th.range,Bt((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),rh=nh,ih=(nh.range,Bt((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*Tt)}),(function(t,e){return(e-t)/Tt}),(function(t){return t.getUTCMinutes()}))),ah=ih,uh=(ih.range,Bt((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),oh=uh,sh=(uh.range,Bt((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}))),lh=sh,ch=(sh.range,{millisecond:Gf,second:Jf,minute:Kf,hour:eh,day:ee,week:Ht,month:rh,year:re}),fh={millisecond:Gf,second:Jf,minute:ah,hour:oh,day:Wt,week:Nt,month:lh,year:ae};var hh=function(t){return function(e){var n,r=e[0],i=e[1];return i<r&&(n=r,r=i,i=n),[t.invert(r),t.invert(i)]}},dh=function(t){return function(e){var n,r,i,a,u=t.range(),o=e[0],s=e[1],l=-1;for(s<o&&(r=o,o=s,s=r),i=0,a=u.length;i<a;++i)u[i]>=o&&u[i]<=s&&(l<0&&(l=i),n=i);if(!(l<0))return o=t.invertExtent(u[l]),s=t.invertExtent(u[n]),[void 0===o[0]?o[1]:o[0],void 0===s[1]?s[0]:s[1]]}},ph=sa(ar),gh=ph.right,mh=ph.left,vh=gh;function yh(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function bh(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}const _h=Symbol("implicit");function xh(){var t=new Map,e=[],n=[],r=_h;function i(i){var a=i+"",u=t.get(a);if(!u){if(r!==_h)return r;t.set(a,u=e.push(i))}return n[(u-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return i},i.range=function(t){return arguments.length?(n=Array.from(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return xh(e,n).unknown(r)},yh.apply(i,arguments),i}function wh(){var t,e,n=xh().unknown(void 0),r=n.domain,i=n.range,a=[0,1],u=!1,o=0,s=0,l=.5;function c(){var n=r().length,c=a[1]<a[0],f=a[c-0],h=a[1-c],d=Of(n,o,s);t=(h-f)/(d||1),u&&(t=Math.floor(t)),f+=(h-f-t*(n-o))*l,e=t*(1-o),u&&(f=Math.round(f),e=Math.round(e));var p=Gi(n).map((function(e){return f+t*e}));return i(c?p.reverse():p)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(a=[+t[0],+t[1]],c()):a.slice()},n.rangeRound=function(t){return a=[+t[0],+t[1]],u=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(u=!!t,c()):u},n.padding=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),o=s,c()):o},n.paddingInner=function(t){return arguments.length?(o=Math.max(0,Math.min(1,t)),c()):o},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},n.invertRange=function(t){if(null!=t[0]&&null!=t[1]){var n,u,o,s=+t[0],l=+t[1],c=a[1]<a[0],f=c?i().reverse():i(),h=f.length-1;if(s==s&&l==l&&(l<s&&(o=s,s=l,l=o),!(l<f[0]||s>a[1-c])))return n=Math.max(0,gh(f,s)-1),u=s===l?n:gh(f,l)-1,s-f[n]>e+1e-10&&++n,c&&(o=n,n=h-u,u=h-o),n>u?void 0:r().slice(n,u+1)}},n.invert=function(t){var e=n.invertRange([t,t]);return e?e[0]:e},n.copy=function(){return wh().domain(r()).range(a).round(u).paddingInner(o).paddingOuter(s).align(l)},c()}var Ah=Math.sqrt(50),Oh=Math.sqrt(10),Mh=Math.sqrt(2),kh=function(t,e,n){var r,i,a,u,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(u=Eh(t,e,n))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),e=Math.floor(e/u),a=new Array(i=Math.ceil(e-t+1));++o<i;)a[o]=(t+o)*u;else for(t=Math.floor(t*u),e=Math.ceil(e*u),a=new Array(i=Math.ceil(t-e+1));++o<i;)a[o]=(t-o)/u;return r&&a.reverse(),a};function Eh(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=Ah?10:a>=Oh?5:a>=Mh?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=Ah?10:a>=Oh?5:a>=Mh?2:1)}function jh(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=Ah?i*=10:a>=Oh?i*=5:a>=Mh&&(i*=2),e<t?-i:i}var Dh=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Ch=function(t){return(t=Dh(Math.abs(t)))?t[1]:NaN},Fh=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Sh(t){if(!(e=Fh.exec(t)))throw new Error("invalid format: "+t);var e;return new Bh({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Bh(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Sh.prototype=Bh.prototype,Bh.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Th,Rh,zh,Nh,Ph=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Lh=function(t,e){var n=Dh(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Uh={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Lh(100*t,e)},r:Lh,s:function(t,e){var n=Dh(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(Th=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return a===u?r:a>u?r+new Array(a-u+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Dh(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},qh=function(t){return t},Ih=Array.prototype.map,$h=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"],Yh=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?qh:(e=Ih.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,a=[],u=0,o=e[0],s=0;i>0&&o>0&&(s+o+1>r&&(o=Math.max(1,r-s)),a.push(t.substring(i-=o,i+o)),!((s+=o+1)>r));)o=e[u=(u+1)%e.length];return a.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",o=void 0===t.numerals?qh:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Ih.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Sh(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,m=t.precision,v=t.trim,y=t.type;"n"===y?(g=!0,y="g"):Uh[y]||(void 0===m&&(m=12),v=!0,y="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",_="$"===h?a:/[%p]/.test(y)?s:"",x=Uh[y],w=/[defgprs%]/.test(y);function A(t){var i,a,s,h=b,A=_;if("c"===y)A=x(t)+A,t="";else{var O=(t=+t)<0;if(t=isNaN(t)?c:x(Math.abs(t),m),v&&(t=Ph(t)),O&&0==+t&&(O=!1),h=(O?"("===f?f:l:"-"===f||"("===f?"":f)+h,A=("s"===y?$h[8+Th/3]:"")+A+(O&&"("===f?")":""),w)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){A=(46===s?u+t.slice(i+1):t.slice(i))+A,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var M=h.length+t.length+A.length,k=M<p?new Array(p-M+1).join(e):"";switch(g&&d&&(t=r(k+t,k.length?p-A.length:1/0),k=""),n){case"<":t=h+t+A+k;break;case"=":t=h+k+t+A;break;case"^":t=k.slice(0,M=k.length>>1)+h+t+A+k.slice(M);break;default:t=k+h+t+A}return o(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),A.toString=function(){return t+""},A}return{format:f,formatPrefix:function(t,e){var n=f(((t=Sh(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ch(e)/3))),i=Math.pow(10,-r),a=$h[8+r/3];return function(t){return n(i*t)+a}}}};!function(t){Rh=Yh(t),zh=Rh.format,Nh=Rh.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var Wh=function(t,e,n,r){var i,a=jh(t,e,n);switch((r=Sh(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ch(e)/3)))-Ch(Math.abs(t)))}(a,u))||(r.precision=i),Nh(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Ch(e)-Ch(t))+1}(a,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Ch(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return zh(r)},Vh=Array.prototype.map;function Hh(t){return Vh.call(t,(function(t){return+t}))}var Xh=Array.prototype.slice;var Gh=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Zh(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Jh(){}var Qh="\\s*([+-]?\\d+)\\s*",Kh="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",td="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ed=/^#([0-9a-f]{3,8})$/,nd=new RegExp("^rgb\\("+[Qh,Qh,Qh]+"\\)$"),rd=new RegExp("^rgb\\("+[td,td,td]+"\\)$"),id=new RegExp("^rgba\\("+[Qh,Qh,Qh,Kh]+"\\)$"),ad=new RegExp("^rgba\\("+[td,td,td,Kh]+"\\)$"),ud=new RegExp("^hsl\\("+[Kh,td,td]+"\\)$"),od=new RegExp("^hsla\\("+[Kh,td,td,Kh]+"\\)$"),sd={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ld(){return this.rgb().formatHex()}function cd(){return this.rgb().formatRgb()}function fd(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ed.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?hd(e):3===n?new md(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new md(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new md(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=nd.exec(t))?new md(e[1],e[2],e[3],1):(e=rd.exec(t))?new md(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=id.exec(t))?dd(e[1],e[2],e[3],e[4]):(e=ad.exec(t))?dd(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ud.exec(t))?_d(e[1],e[2]/100,e[3]/100,1):(e=od.exec(t))?_d(e[1],e[2]/100,e[3]/100,e[4]):sd.hasOwnProperty(t)?hd(sd[t]):"transparent"===t?new md(NaN,NaN,NaN,0):null}function hd(t){return new md(t>>16&255,t>>8&255,255&t,1)}function dd(t,e,n,r){return r<=0&&(t=e=n=NaN),new md(t,e,n,r)}function pd(t){return t instanceof Jh||(t=fd(t)),t?new md((t=t.rgb()).r,t.g,t.b,t.opacity):new md}function gd(t,e,n,r){return 1===arguments.length?pd(t):new md(t,e,n,null==r?1:r)}function md(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function vd(){return"#"+bd(this.r)+bd(this.g)+bd(this.b)}function yd(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function bd(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function _d(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ad(t,e,n,r)}function xd(t){if(t instanceof Ad)return new Ad(t.h,t.s,t.l,t.opacity);if(t instanceof Jh||(t=fd(t)),!t)return new Ad;if(t instanceof Ad)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),u=NaN,o=a-i,s=(a+i)/2;return o?(u=e===a?(n-r)/o+6*(n<r):n===a?(r-e)/o+2:(e-n)/o+4,o/=s<.5?a+i:2-a-i,u*=60):o=s>0&&s<1?0:u,new Ad(u,o,s,t.opacity)}function wd(t,e,n,r){return 1===arguments.length?xd(t):new Ad(t,e,n,null==r?1:r)}function Ad(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Od(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Md(t,e,n,r,i){var a=t*t,u=a*t;return((1-3*t+3*a-u)*e+(4-6*a+3*u)*n+(1+3*t+3*a-3*u)*r+u*i)/6}Gh(Jh,fd,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:ld,formatHex:ld,formatHsl:function(){return xd(this).formatHsl()},formatRgb:cd,toString:cd}),Gh(md,gd,Zh(Jh,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new md(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new md(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:vd,formatHex:vd,formatRgb:yd,toString:yd})),Gh(Ad,wd,Zh(Jh,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ad(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ad(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new md(Od(t>=240?t-240:t+120,i,r),Od(t,i,r),Od(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var kd=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],u=r>0?t[r-1]:2*i-a,o=r<e-1?t[r+2]:2*a-i;return Md((n-r/e)*e,u,i,a,o)}},Ed=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],u=t[(r+1)%e],o=t[(r+2)%e];return Md((n-r/e)*e,i,a,u,o)}},jd=function(t){return function(){return t}};function Dd(t,e){return function(n){return t+n*e}}function Cd(t,e){var n=e-t;return n?Dd(t,n>180||n<-180?n-360*Math.round(n/360):n):jd(isNaN(t)?e:t)}function Fd(t){return 1==(t=+t)?Sd:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):jd(isNaN(e)?n:e)}}function Sd(t,e){var n=e-t;return n?Dd(t,n):jd(isNaN(t)?e:t)}var Bd=function t(e){var n=Fd(e);function r(t,e){var r=n((t=gd(t)).r,(e=gd(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),u=Sd(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=u(e),t+""}}return r.gamma=t,r}(1);function Td(t){return function(e){var n,r,i=e.length,a=new Array(i),u=new Array(i),o=new Array(i);for(n=0;n<i;++n)r=gd(e[n]),a[n]=r.r||0,u[n]=r.g||0,o[n]=r.b||0;return a=t(a),u=t(u),o=t(o),r.opacity=1,function(t){return r.r=a(t),r.g=u(t),r.b=o(t),r+""}}}var Rd=Td(kd),zd=Td(Ed),Nd=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),u=new Array(r);for(n=0;n<i;++n)a[n]=Xd(t[n],e[n]);for(;n<r;++n)u[n]=e[n];return function(t){for(n=0;n<i;++n)u[n]=a[n](t);return u}},Pd=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Ld=function(t,e){return e-=t=+t,function(n){return t+e*n}},Ud=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Xd(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},qd=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Id=new RegExp(qd.source,"g");var $d,Yd,Wd,Vd,Hd=function(t,e){var n,r,i,a=qd.lastIndex=Id.lastIndex=0,u=-1,o=[],s=[];for(t+="",e+="";(n=qd.exec(t))&&(r=Id.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),o[u]?o[u]+=i:o[++u]=i),(n=n[0])===(r=r[0])?o[u]?o[u]+=r:o[++u]=r:(o[++u]=null,s.push({i:u,x:Ld(n,r)})),a=Id.lastIndex;return a<e.length&&(i=e.slice(a),o[u]?o[u]+=i:o[++u]=i),o.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)o[(n=s[r]).i]=n.x(t);return o.join("")})},Xd=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?jd(e):("number"===r?Ld:"string"===r?(n=fd(e))?(e=n,Bd):Hd:e instanceof fd?Bd:e instanceof Date?Pd:Array.isArray(e)?Nd:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ud:Ld)(t,e)},Gd=function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},Zd=function(t,e){var n=Cd(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},Jd=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Qd=180/Math.PI,Kd={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},tp=function(t,e,n,r,i,a){var u,o,s;return(u=Math.sqrt(t*t+e*e))&&(t/=u,e/=u),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(o=Math.sqrt(n*n+r*r))&&(n/=o,r/=o,s/=o),t*r<e*n&&(t=-t,e=-e,s=-s,u=-u),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*Qd,skewX:Math.atan(s)*Qd,scaleX:u,scaleY:o}};function ep(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,u){var o=[],s=[];return a=t(a),u=t(u),function(t,r,i,a,u,o){if(t!==i||r!==a){var s=u.push("translate(",null,e,null,n);o.push({i:s-4,x:Ld(t,i)},{i:s-2,x:Ld(r,a)})}else(i||a)&&u.push("translate("+i+e+a+n)}(a.translateX,a.translateY,u.translateX,u.translateY,o,s),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ld(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,u.rotate,o,s),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ld(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,u.skewX,o,s),function(t,e,n,r,a,u){if(t!==n||e!==r){var o=a.push(i(a)+"scale(",null,",",null,")");u.push({i:o-4,x:Ld(t,n)},{i:o-2,x:Ld(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,u.scaleX,u.scaleY,o,s),a=u=null,function(t){for(var e,n=-1,r=s.length;++n<r;)o[(e=s[n]).i]=e.x(t);return o.join("")}}}var np=ep((function(t){return"none"===t?Kd:($d||($d=document.createElement("DIV"),Yd=document.documentElement,Wd=document.defaultView),$d.style.transform=t,t=Wd.getComputedStyle(Yd.appendChild($d),null).getPropertyValue("transform"),Yd.removeChild($d),t=t.slice(7,-1).split(","),tp(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),rp=ep((function(t){return null==t?Kd:(Vd||(Vd=document.createElementNS("http://www.w3.org/2000/svg","g")),Vd.setAttribute("transform",t),(t=Vd.transform.baseVal.consolidate())?(t=t.matrix,tp(t.a,t.b,t.c,t.d,t.e,t.f)):Kd)}),", ",")",")"),ip=Math.SQRT2;function ap(t){return((t=Math.exp(t))+1/t)/2}var up=function(t,e){var n,r,i=t[0],a=t[1],u=t[2],o=e[0],s=e[1],l=e[2],c=o-i,f=s-a,h=c*c+f*f;if(h<1e-12)r=Math.log(l/u)/ip,n=function(t){return[i+t*c,a+t*f,u*Math.exp(ip*t*r)]};else{var d=Math.sqrt(h),p=(l*l-u*u+4*h)/(2*u*2*d),g=(l*l-u*u-4*h)/(2*l*2*d),m=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(g*g+1)-g);r=(v-m)/ip,n=function(t){var e,n=t*r,o=ap(m),s=u/(2*d)*(o*(e=ip*n+m,((e=Math.exp(2*e))-1)/(e+1))-function(t){return((t=Math.exp(t))-1/t)/2}(m));return[i+s*c,a+s*f,u*o/ap(ip*n+m)]}}return n.duration=1e3*r,n};function op(t){return function(e,n){var r=t((e=wd(e)).h,(n=wd(n)).h),i=Sd(e.s,n.s),a=Sd(e.l,n.l),u=Sd(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=a(t),e.opacity=u(t),e+""}}}var sp=op(Cd),lp=op(Sd),cp=Math.PI/180,fp=180/Math.PI,hp=.96422,dp=1,pp=.82521,gp=4/29,mp=6/29,vp=3*mp*mp,yp=mp*mp*mp;function bp(t){if(t instanceof xp)return new xp(t.l,t.a,t.b,t.opacity);if(t instanceof jp)return Dp(t);t instanceof md||(t=pd(t));var e,n,r=Mp(t.r),i=Mp(t.g),a=Mp(t.b),u=wp((.2225045*r+.7168786*i+.0606169*a)/dp);return r===i&&i===a?e=n=u:(e=wp((.4360747*r+.3850649*i+.1430804*a)/hp),n=wp((.0139322*r+.0971045*i+.7141733*a)/pp)),new xp(116*u-16,500*(e-u),200*(u-n),t.opacity)}function _p(t,e,n,r){return 1===arguments.length?bp(t):new xp(t,e,n,null==r?1:r)}function xp(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function wp(t){return t>yp?Math.pow(t,1/3):t/vp+gp}function Ap(t){return t>mp?t*t*t:vp*(t-gp)}function Op(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Mp(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function kp(t){if(t instanceof jp)return new jp(t.h,t.c,t.l,t.opacity);if(t instanceof xp||(t=bp(t)),0===t.a&&0===t.b)return new jp(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*fp;return new jp(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ep(t,e,n,r){return 1===arguments.length?kp(t):new jp(t,e,n,null==r?1:r)}function jp(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Dp(t){if(isNaN(t.h))return new xp(t.l,0,0,t.opacity);var e=t.h*cp;return new xp(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}function Cp(t,e){var n=Sd((t=_p(t)).l,(e=_p(e)).l),r=Sd(t.a,e.a),i=Sd(t.b,e.b),a=Sd(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=a(e),t+""}}function Fp(t){return function(e,n){var r=t((e=Ep(e)).h,(n=Ep(n)).h),i=Sd(e.c,n.c),a=Sd(e.l,n.l),u=Sd(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=a(t),e.opacity=u(t),e+""}}}Gh(xp,_p,Zh(Jh,{brighter:function(t){return new xp(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new xp(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new md(Op(3.1338561*(e=hp*Ap(e))-1.6168667*(t=dp*Ap(t))-.4906146*(n=pp*Ap(n))),Op(-.9787684*e+1.9161415*t+.033454*n),Op(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Gh(jp,Ep,Zh(Jh,{brighter:function(t){return new jp(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new jp(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Dp(this).rgb()}}));var Sp=Fp(Cd),Bp=Fp(Sd),Tp=-.29227,Rp=-.90649,zp=1.97294,Np=zp*Rp,Pp=1.78277*zp,Lp=1.78277*Tp- -.14861*Rp;function Up(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof qp)return new qp(t.h,t.s,t.l,t.opacity);t instanceof md||(t=pd(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Lp*r+Np*e-Pp*n)/(Lp+Np-Pp),a=r-i,u=(zp*(n-i)-Tp*a)/Rp,o=Math.sqrt(u*u+a*a)/(zp*i*(1-i)),s=o?Math.atan2(u,a)*fp-120:NaN;return new qp(s<0?s+360:s,o,i,t.opacity)}(t):new qp(t,e,n,null==r?1:r)}function qp(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ip(t){return function e(n){function r(e,r){var i=t((e=Up(e)).h,(r=Up(r)).h),a=Sd(e.s,r.s),u=Sd(e.l,r.l),o=Sd(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=u(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,r.gamma=e,r}(1)}Gh(qp,Up,Zh(Jh,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new qp(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new qp(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*cp,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new md(255*(e+n*(-.14861*r+1.78277*i)),255*(e+n*(Tp*r+Rp*i)),255*(e+n*(zp*r)),this.opacity)}}));var $p=Ip(Cd),Yp=Ip(Sd);function Wp(t,e){for(var n=0,r=e.length-1,i=e[0],a=new Array(r<0?0:r);n<r;)a[n]=t(i,i=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return a[e](t-e)}}var Vp=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},Hp=function(t){return function(){return t}},Xp=function(t){return+t},Gp=[0,1];function Zp(t){return t}function Jp(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Hp(isNaN(e)?NaN:.5)}function Qp(t,e,n){var r=t[0],i=t[1],a=e[0],u=e[1];return i<r?(r=Jp(i,r),a=n(u,a)):(r=Jp(r,i),a=n(a,u)),function(t){return a(r(t))}}function Kp(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),a=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++u<r;)i[u]=Jp(t[u],t[u+1]),a[u]=n(e[u],e[u+1]);return function(e){var n=vh(t,e,1,r)-1;return a[n](i[n](e))}}function tg(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function eg(){var t,e,n,r,i,a,u=Gp,o=Gp,s=Xd,l=Zp;function c(){var t,e,n,s=Math.min(u.length,o.length);return l!==Zp&&(t=u[0],e=u[s-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=s>2?Kp:Qp,i=a=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(u.map(t),o,s)))(t(l(e)))}return f.invert=function(n){return l(e((a||(a=r(o,u.map(t),Ld)))(n)))},f.domain=function(t){return arguments.length?(u=Array.from(t,Xp),c()):u.slice()},f.range=function(t){return arguments.length?(o=Array.from(t),c()):o.slice()},f.rangeRound=function(t){return o=Array.from(t),s=Jd,c()},f.clamp=function(t){return arguments.length?(l=!!t||Zp,c()):l!==Zp},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function ng(){return eg()(Zp,Zp)}function rg(t){var e=t.domain;return t.ticks=function(t){var n=e();return kh(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Wh(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),a=0,u=i.length-1,o=i[a],s=i[u];return s<o&&(r=o,o=s,s=r,r=a,a=u,u=r),(r=Eh(o,s,n))>0?r=Eh(o=Math.floor(o/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=Eh(o=Math.ceil(o*r)/r,s=Math.floor(s*r)/r,n)),r>0?(i[a]=Math.floor(o/r)*r,i[u]=Math.ceil(s/r)*r,e(i)):r<0&&(i[a]=Math.ceil(o*r)/r,i[u]=Math.floor(s*r)/r,e(i)),t},t}var ig=function(t,e){var n,r=0,i=(t=t.slice()).length-1,a=t[r],u=t[i];return u<a&&(n=r,r=i,i=n,n=a,a=u,u=n),t[r]=e.floor(a),t[i]=e.ceil(u),t};function ag(t){return Math.log(t)}function ug(t){return Math.exp(t)}function og(t){return-Math.log(-t)}function sg(t){return-Math.exp(-t)}function lg(t){return isFinite(t)?+("1e"+t):t<0?0:t}function cg(t){return function(e){return-t(-e)}}function fg(t){var e,n,r=t(ag,ug),i=r.domain,a=10;function u(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(a),n=function(t){return 10===t?lg:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(a),i()[0]<0?(e=cg(e),n=cg(n),t(og,sg)):t(ag,ug),r}return r.base=function(t){return arguments.length?(a=+t,u()):a},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),o=u[0],s=u[u.length-1];(r=s<o)&&(h=o,o=s,s=h);var l,c,f,h=e(o),d=e(s),p=null==t?10:+t,g=[];if(!(a%1)&&d-h<p){if(h=Math.floor(h),d=Math.ceil(d),o>0){for(;h<=d;++h)for(c=1,l=n(h);c<a;++c)if(!((f=l*c)<o)){if(f>s)break;g.push(f)}}else for(;h<=d;++h)for(c=a-1,l=n(h);c>=1;--c)if(!((f=l*c)<o)){if(f>s)break;g.push(f)}g.length||(g=kh(o,s,p))}else g=kh(h,d,Math.min(d-h,p)).map(n);return r?g.reverse():g},r.tickFormat=function(t,i){if(null==i&&(i=10===a?".0e":","),"function"!=typeof i&&(i=zh(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,a*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*a<a-.5&&(r*=a),r<=u?i(t):""}},r.nice=function(){return i(ig(i(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function hg(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function dg(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function pg(t){return t<0?-t*t:t*t}function gg(t){var e=t(Zp,Zp),n=1;function r(){return 1===n?t(Zp,Zp):.5===n?t(dg,pg):t(hg(n),hg(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},rg(e)}function mg(){var t=gg(eg());return t.copy=function(){return tg(t,mg()).exponent(t.exponent())},yh.apply(t,arguments),t}function vg(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function yg(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function bg(t){var e=1,n=t(vg(e),yg(e));return n.constant=function(n){return arguments.length?t(vg(e=+n),yg(e)):e},rg(n)}var _g=1e3,xg=60*_g,wg=60*xg,Ag=24*wg,Og=7*Ag,Mg=30*Ag,kg=365*Ag;function Eg(t){return new Date(t)}function jg(t){return t instanceof Date?+t:+new Date(+t)}function Dg(t,e,n,r,i,a,u,o,s){var l=ng(),c=l.invert,f=l.domain,h=s(".%L"),d=s(":%S"),p=s("%I:%M"),g=s("%I %p"),m=s("%a %d"),v=s("%b %d"),y=s("%B"),b=s("%Y"),_=[[u,1,_g],[u,5,5*_g],[u,15,15*_g],[u,30,30*_g],[a,1,xg],[a,5,5*xg],[a,15,15*xg],[a,30,30*xg],[i,1,wg],[i,3,3*wg],[i,6,6*wg],[i,12,12*wg],[r,1,Ag],[r,2,2*Ag],[n,1,Og],[e,1,Mg],[e,3,3*Mg],[t,1,kg]];function x(o){return(u(o)<o?h:a(o)<o?d:i(o)<o?p:r(o)<o?g:e(o)<o?n(o)<o?m:v:t(o)<o?y:b)(o)}function w(e,n,r){if(null==e&&(e=10),"number"==typeof e){var i,a=Math.abs(r-n)/e,u=sa((function(t){return t[2]})).right(_,a);return u===_.length?(i=jh(n/kg,r/kg,e),e=t):u?(i=(u=_[a/_[u-1][2]<_[u][2]/a?u-1:u])[1],e=u[0]):(i=Math.max(jh(n,r,e),1),e=o),e.every(i)}return e}return l.invert=function(t){return new Date(c(t))},l.domain=function(t){return arguments.length?f(Array.from(t,jg)):f().map(Eg)},l.ticks=function(t){var e,n=f(),r=n[0],i=n[n.length-1],a=i<r;return a&&(e=r,r=i,i=e),e=(e=w(t,r,i))?e.range(r,i+1):[],a?e.reverse():e},l.tickFormat=function(t,e){return null==e?x:s(e)},l.nice=function(t){var e=f();return(t=w(t,e[0],e[e.length-1]))?f(ig(e,t)):l},l.copy=function(){return tg(l,Dg(t,e,n,r,i,a,u,o,s))},l}function Cg(){var t,e,n,r,i,a=0,u=1,o=Zp,s=!1;function l(e){return isNaN(e=+e)?i:o(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}return l.domain=function(i){return arguments.length?([a,u]=i,t=r(a=+a),e=r(u=+u),n=t===e?0:1/(e-t),l):[a,u]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(o=t,l):o},l.range=function(){return[o(0),o(1)]},l.unknown=function(t){return arguments.length?(i=t,l):i},function(i){return r=i,t=i(a),e=i(u),n=t===e?0:1/(e-t),l}}function Fg(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Sg(){var t=rg(Cg()(Zp));return t.copy=function(){return Fg(t,Sg())},bh.apply(t,arguments)}function Bg(){var t=gg(Cg());return t.copy=function(){return Fg(t,Bg()).exponent(t.exponent())},bh.apply(t,arguments)}function Tg(){var t,e,n,r,i,a,u,o=0,s=.5,l=1,c=1,f=Zp,h=!1;function d(t){return isNaN(t=+t)?u:(t=.5+((t=+a(t))-e)*(c*t<c*e?r:i),f(h?Math.max(0,Math.min(1,t)):t))}return d.domain=function(u){return arguments.length?([o,s,l]=u,t=a(o=+o),e=a(s=+s),n=a(l=+l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,d):[o,s,l]},d.clamp=function(t){return arguments.length?(h=!!t,d):h},d.interpolator=function(t){return arguments.length?(f=t,d):f},d.range=function(){return[f(0),f(.5),f(1)]},d.unknown=function(t){return arguments.length?(u=t,d):u},function(u){return a=u,t=u(o),e=u(s),n=u(l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,d}}function Rg(){var t=gg(Tg());return t.copy=function(){return Fg(t,Rg()).exponent(t.exponent())},bh.apply(t,arguments)}function zg(t,e){return arguments.length>1?(Ng[t]=function(t,e){return function(){var n=e();return n.invertRange||(n.invertRange=n.invert?hh(n):n.invertExtent?dh(n):void 0),n.type=t,n}}(t,e),this):Object(p.t)(Ng,t)?Ng[t]:void 0}var Ng={[Mf]:function t(e){var n;function r(t){return isNaN(t=+t)?n:t}return r.invert=r,r.domain=r.range=function(t){return arguments.length?(e=Array.from(t,Xp),r):e.slice()},r.unknown=function(t){return arguments.length?(n=t,r):n},r.copy=function(){return t(e).unknown(n)},e=arguments.length?Array.from(e,Xp):[0,1],rg(r)},[kf]:function t(){var e=ng();return e.copy=function(){return tg(e,t())},yh.apply(e,arguments),rg(e)},[Ef]:function t(){var e=fg(eg()).domain([1,10]);return e.copy=function(){return tg(e,t()).base(e.base())},yh.apply(e,arguments),e},[jf]:mg,[Df]:function(){return mg.apply(null,arguments).exponent(.5)},[Cf]:function t(){var e=bg(eg());return e.copy=function(){return tg(e,t()).constant(e.constant())},yh.apply(e,arguments)},[Ff]:function(){return yh.apply(Dg(re,rh,Ht,ee,eh,Kf,Jf,Gf,ce).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},[Sf]:function(){return yh.apply(Dg(ae,lh,Nt,Wt,oh,ah,Jf,Gf,he).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)},[Bf]:Sg,[Bf+"-"+kf]:Sg,[Bf+"-"+Ef]:function t(){var e=fg(Cg()).domain([1,10]);return e.copy=function(){return Fg(e,t()).base(e.base())},bh.apply(e,arguments)},[Bf+"-"+jf]:Bg,[Bf+"-"+Df]:function(){return Bg.apply(null,arguments).exponent(.5)},[Bf+"-"+Cf]:function t(){var e=bg(Cg());return e.copy=function(){return Fg(e,t()).constant(e.constant())},bh.apply(e,arguments)},[Tf+"-"+kf]:function t(){var e=rg(Tg()(Zp));return e.copy=function(){return Fg(e,t())},bh.apply(e,arguments)},[Tf+"-"+Ef]:function t(){var e=fg(Tg()).domain([.1,1,10]);return e.copy=function(){return Fg(e,t()).base(e.base())},bh.apply(e,arguments)},[Tf+"-"+jf]:Rg,[Tf+"-"+Df]:function(){return Rg.apply(null,arguments).exponent(.5)},[Tf+"-"+Cf]:function t(){var e=bg(Tg());return e.copy=function(){return Fg(e,t()).constant(e.constant())},bh.apply(e,arguments)},[Rf]:function t(){var e,n=[],r=[],i=[];function a(){var t=0,e=Math.max(1,r.length);for(i=new Array(e-1);++t<e;)i[t-1]=sr(n,t/e);return u}function u(t){return isNaN(t=+t)?e:r[vh(i,t)]}return u.invertExtent=function(t){var e=r.indexOf(t);return e<0?[NaN,NaN]:[e>0?i[e-1]:n[0],e<i.length?i[e]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(let e of t)null==e||isNaN(e=+e)||n.push(e);return n.sort(ar),a()},u.range=function(t){return arguments.length?(r=Array.from(t),a()):r.slice()},u.unknown=function(t){return arguments.length?(e=t,u):e},u.quantiles=function(){return i.slice()},u.copy=function(){return t().domain(n).range(r).unknown(e)},yh.apply(u,arguments)},[zf]:function t(){var e,n=0,r=1,i=1,a=[.5],u=[0,1];function o(t){return t<=t?u[vh(a,t,0,i)]:e}function s(){var t=-1;for(a=new Array(i);++t<i;)a[t]=((t+1)*r-(t-i)*n)/(i+1);return o}return o.domain=function(t){return arguments.length?([n,r]=t,n=+n,r=+r,s()):[n,r]},o.range=function(t){return arguments.length?(i=(u=Array.from(t)).length-1,s()):u.slice()},o.invertExtent=function(t){var e=u.indexOf(t);return e<0?[NaN,NaN]:e<1?[n,a[0]]:e>=i?[a[i-1],r]:[a[e-1],a[e]]},o.unknown=function(t){return arguments.length?(e=t,o):o},o.thresholds=function(){return a.slice()},o.copy=function(){return t().domain([n,r]).range(u).unknown(e)},yh.apply(rg(o),arguments)},[Nf]:function t(){var e,n=[.5],r=[0,1],i=1;function a(t){return t<=t?r[vh(n,t,0,i)]:e}return a.domain=function(t){return arguments.length?(n=Array.from(t),i=Math.min(n.length,r.length-1),a):n.slice()},a.range=function(t){return arguments.length?(r=Array.from(t),i=Math.min(n.length,r.length-1),a):r.slice()},a.invertExtent=function(t){var e=r.indexOf(t);return[n[e-1],n[e]]},a.unknown=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return t().domain(n).range(r).unknown(e)},yh.apply(a,arguments)},[qf]:function t(){var e=[],n=[];function r(t){return null==t||t!=t?void 0:n[(vh(e,t)-1)%n.length]}return r.domain=function(t){return arguments.length?(e=Hh(t),r):e.slice()},r.range=function(t){return arguments.length?(n=Xh.call(t),r):n.slice()},r.tickFormat=function(t,n){return Wh(e[0],Object(p.R)(e),null==t?10:t,n)},r.copy=function(){return t().domain(r.domain()).range(r.range())},r},[Pf]:xh,[Uf]:wh,[Lf]:function(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,e.copy=function(){return t(n())},e}(wh().paddingInner(1))}};for(var Pg in Ng)zg(Pg,Ng[Pg]);const Lg=["clamp","base","constant","exponent"];function Ug(t,e,n){return Wp(Ig(e||"rgb",n),t)}function qg(t,e,n){var r,i,a,u=n-e;return u&&Number.isFinite(u)?(r=(i=t.type).indexOf("-"),i=r<0?i:i.slice(r+1),a=zg(i)().domain([e,n]).range([0,1]),Lg.forEach(e=>t[e]?a[e](t[e]()):0),a):Object(p.j)(.5)}function Ig(t,e){var n=a[function(t){return"interpolate"+t.toLowerCase().split("-").map((function(t){return t[0].toUpperCase()+t.slice(1)})).join("")}(t)];return null!=e&&n&&n.gamma?n.gamma(e):n}function $g(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function Yg(t,e){for(let n in t)Vg(n,e(t[n]))}const Wg={};function Vg(t,e){return t=t&&t.toLowerCase(),arguments.length>1?(Wg[t]=e,this):Wg[t]}function Hg(t,e,n){var r;return Object(p.C)(e)&&(t.bins&&(e=Math.max(e,t.bins.length)),null!=n&&(e=Math.min(e,~~(Object(p.T)(t.domain())/n)||1))),Object(p.D)(e)&&(r=e.step,e=e.interval),Object(p.F)(e)&&(e=function(t,e){const n=e===Sf?fh:ch;return Object(p.t)(n,t)&&n[t]}(e,t.type)||Object(p.l)("Only time and utc scales accept interval strings."),r&&(e=e.every(r))),e}function Xg(t,e,n){var r=t.range(),i=Math.floor(r[0]),a=Math.ceil(Object(p.R)(r));if(i>a&&(r=a,a=i,i=r),e=e.filter((function(e){return e=t(e),i<=e&&e<=a})),n>0&&e.length>1){for(var u=[e[0],Object(p.R)(e)];e.length>n&&e.length>=3;)e=e.filter((function(t,e){return!(e%2)}));e.length<3&&(e=u)}return e}function Gg(t,e){return t.bins?Xg(t,t.bins):t.ticks?t.ticks(e):t.domain()}function Zg(t,e,n,r){var i,a,u=t.tickFormat?t.tickFormat(e,n):n&&r===Ff?ce(n):n?zh(n):String;if(Yf(t.type)){var o=function(t){var e=Sh(t||",");if(null==e.precision){switch(e.precision=12,e.type){case"%":e.precision-=2;break;case"e":e.precision-=1}return n=zh(e),r=zh(".1f")(1)[1],function(t){var e,i,a=n(t),u=a.indexOf(r);if(u<0)return a;for(i=(e=function(t,e){var n,r=t.lastIndexOf("e");if(r>0)return r;for(r=t.length;--r>e;)if((n=t.charCodeAt(r))>=48&&n<=57)return r+1}(a,u))<a.length?a.slice(e):"";--e>u;)if("0"!==a[e]){++e;break}return a.slice(0,e)+i}}return zh(e);var n,r}(n);u=t.bins?o:(i=u,a=o,function(t){return i(t)?a(t):""})}return u}function Jg(t){Wn.call(this,null,t)}function Qg(t){Wn.call(this,null,t)}function Kg(){return w({})}function tm(t){return t.exit}function em(t){Wn.call(this,null,t)}Yg({category10:"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf",category20:"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",category20b:"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",category20c:"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",tableau10:"4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",tableau20:"4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5",accent:"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666",dark2:"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666",paired:"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928",pastel1:"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2",pastel2:"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc",set1:"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999",set2:"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3",set3:"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"},$g),Yg({blues:"cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",greens:"d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",greys:"e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",oranges:"fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",purples:"e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",reds:"fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",blueGreen:"d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",bluePurple:"ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",greenBlue:"d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",orangeRed:"fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",purpleBlue:"dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",purpleBlueGreen:"dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",purpleRed:"dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",redPurple:"fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",yellowGreen:"e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",yellowOrangeBrown:"feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",yellowOrangeRed:"fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",blueOrange:"134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",brownBlueGreen:"704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",purpleGreen:"5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",purpleOrange:"4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",redBlue:"8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",redGrey:"8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",yellowGreenBlue:"eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",redYellowBlue:"a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",redYellowGreen:"a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",pinkYellowGreen:"8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",spectral:"9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",viridis:"440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",magma:"0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",inferno:"0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",plasma:"0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",rainbow:"6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",sinebow:"ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",browns:"eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",tealBlues:"bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",teals:"bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",warmGreys:"dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",goldGreen:"f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",goldOrange:"f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",goldRed:"f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",lightGreyRed:"efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",lightGreyTeal:"e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",lightMulti:"e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",lightOrange:"f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",lightTealBlue:"e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",darkBlue:"3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",darkGold:"3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",darkGreen:"3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",darkMulti:"3737371f5287197d8c29a86995ce3fffe800ffffff",darkRed:"3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"},t=>Ug($g(t))),Object(p.w)(Jg,Wn).transform=function(t,e){if(this.value&&!t.modified())return e.StopPropagation;var n=e.fork(e.NO_SOURCE|e.NO_FIELDS),r=this.value,i=t.scale,a=Hg(i,null==t.count?t.values?t.values.length:10:t.count,t.minstep),u=t.format||Zg(i,a,t.formatSpecifier,t.formatType),o=t.values?Xg(i,t.values,a):Gg(i,a);return r&&(n.rem=r),r=o.map((function(t,e){return w({index:e/(o.length-1||1),value:t,label:u(t)})})),t.extra&&r.length&&r.push(w({index:-1,extra:{value:r[0].value},label:""})),n.source=r,n.add=r,this.value=r,n},Object(p.w)(Qg,Wn).transform=function(t,e){var n=e.dataflow,r=e.fork(e.NO_SOURCE|e.NO_FIELDS),i=t.item||Kg,a=t.key||_,u=this.value;return Object(p.y)(r.encode)&&(r.encode=null),u&&(t.modified("key")||e.modified(a))&&Object(p.l)("DataJoin does not support modified key function or fields."),u||(e=e.addAll(),this.value=u=Object(p.q)().test(tm),u.lookup=function(t){return u.get(a(t))}),e.visit(e.ADD,(function(t){var e=a(t),n=u.get(e);n?n.exit?(u.empty--,r.add.push(n)):r.mod.push(n):(u.set(e,n=i(t)),r.add.push(n)),n.datum=t,n.exit=!1})),e.visit(e.MOD,(function(t){var e=a(t),n=u.get(e);n&&(n.datum=t,r.mod.push(n))})),e.visit(e.REM,(function(t){var e=a(t),n=u.get(e);t!==n.datum||n.exit||(r.rem.push(n),n.exit=!0,++u.empty)})),e.changed(e.ADD_MOD)&&r.modifies("datum"),t.clean&&u.empty>n.cleanThreshold&&n.runAfter(u.clean),r},Object(p.w)(em,Wn).transform=function(t,e){var n=e.fork(e.ADD_REM),r=t.mod||!1,i=t.encoders,a=e.encode;if(Object(p.y)(a)){if(!n.changed()&&!a.every((function(t){return i[t]})))return e.StopPropagation;a=a[0],n.encode=null}var u="enter"===a,o=i.update||p.p,s=i.enter||p.p,l=i.exit||p.p,c=(a&&!u?i[a]:o)||p.p;if(e.changed(e.ADD)&&(e.visit(e.ADD,(function(e){s(e,t),o(e,t)})),n.modifies(s.output),n.modifies(o.output),c!==p.p&&c!==o&&(e.visit(e.ADD,(function(e){c(e,t)})),n.modifies(c.output))),e.changed(e.REM)&&l!==p.p&&(e.visit(e.REM,(function(e){l(e,t)})),n.modifies(l.output)),u||c!==p.p){var f=e.MOD|(t.modified()?e.REFLOW:0);u?(e.visit(f,(function(e){var i=s(e,t)||r;(c(e,t)||i)&&n.mod.push(e)})),n.mod.length&&n.modifies(s.output)):e.visit(f,(function(e){(c(e,t)||r)&&n.mod.push(e)})),n.mod.length&&n.modifies(c.output)}return n.changed()?n:e.StopPropagation};var nm="symbol",rm="discrete";const im={[Rf]:"quantiles",[zf]:"thresholds",[Nf]:"domain"},am={[Rf]:"quantiles",[zf]:"domain"};function um(t,e){return t.bins?function(t){const e=t.slice(0,-1);return e.max=Object(p.R)(t),e}(t.bins):im[t.type]?function(t){const e=[-1/0].concat(t);return e.max=1/0,e}(t[im[t.type]]()):Gg(t,e)}function om(t,e,n,r,i){const a=am[t.type]&&i!==Ff?function(t,e){var n,r=t[am[t.type]](),i=r.length,a=i>1?r[1]-r[0]:r[0];for(n=1;n<i;++n)a=Math.min(a,r[n]-r[n-1]);return Wh(0,a,30,e)}(t,r):Zg(t,e,r,i);return n===nm&&function(t){return im[t.type]||t.bins}(t)?function(t){return function(e,n,r){var i=r[n+1]||r.max||1/0,a=sm(e,t),u=sm(i,t);return a&&u?a+"â€“"+u:u?"< "+u:"â‰¥ "+a}}(a):n===rm?function(t){return function(e,n){return n?t(e):null}}(a):function(t){return function(e){return t(e)}}(a)}function sm(t,e){return Number.isFinite(t)?e(t):null}function lm(t){Wn.call(this,[],t)}Object(p.w)(lm,Wn).transform=function(t,e){if(null!=this.value&&!t.modified())return e.StopPropagation;var n,r,i,a,u,o=e.fork(e.NO_SOURCE|e.NO_FIELDS),s=this.value,l=t.type||nm,c=t.scale,f=+t.limit,h=Hg(c,null==t.count?5:t.count,t.minstep),d=t.format||om(c,h,l,t.formatSpecifier,t.formatType),g=t.values||um(c,h);return s&&(o.rem=s),l===nm?(f&&g.length>f?(e.dataflow.warn("Symbol legend count exceeds limit, filtering items."),s=g.slice(0,f-1),u=!0):s=g,Object(p.B)(i=t.size)?(t.values||0!==c(s[0])||(s=s.slice(1)),a=s.reduce((function(e,n){return Math.max(e,i(n,t))}),0)):i=Object(p.j)(a=i||8),s=s.map((function(e,n){return w({index:n,label:d(e,n,g),value:e,offset:a,size:i(e,t)})})),u&&(u=g[s.length],s.push(w({index:s.length,label:`â€¦${g.length-s.length} entries`,value:u,offset:a,size:i(u,t)})))):"gradient"===l?(n=c.domain(),r=qg(c,n[0],Object(p.R)(n)),g.length<3&&!t.values&&n[0]!==Object(p.R)(n)&&(g=[n[0],Object(p.R)(n)]),s=g.map((function(t,e){return w({index:e,label:d(t,e,g),value:t,perc:r(t)})}))):(i=g.length-1,r=function(t){var e=t.domain(),n=e.length-1,r=+e[0],i=+Object(p.R)(e),a=i-r;if(t.type===Nf){var u=n?a/n:.1;a=(i+=u)-(r-=u)}return function(t){return(t-r)/a}}(c),s=g.map((function(t,e){return w({index:e,label:d(t,e,g),value:t,perc:e?r(t):0,perc2:e===i?1:r(g[e+1])})}))),o.source=s,o.add=s,this.value=s,o};var cm=Object(p.q)({line:mm,"line-radial":function(t,e,n,r){return mm(e*Math.cos(t),e*Math.sin(t),r*Math.cos(n),r*Math.sin(n))},arc:vm,"arc-radial":function(t,e,n,r){return vm(e*Math.cos(t),e*Math.sin(t),r*Math.cos(n),r*Math.sin(n))},curve:ym,"curve-radial":function(t,e,n,r){return ym(e*Math.cos(t),e*Math.sin(t),r*Math.cos(n),r*Math.sin(n))},"orthogonal-horizontal":function(t,e,n,r){return"M"+t+","+e+"V"+r+"H"+n},"orthogonal-vertical":function(t,e,n,r){return"M"+t+","+e+"H"+n+"V"+r},"orthogonal-radial":function(t,e,n,r){var i=Math.cos(t),a=Math.sin(t),u=Math.cos(n),o=Math.sin(n),s=Math.abs(n-t)>Math.PI?n<=t:n>t;return"M"+e*i+","+e*a+"A"+e+","+e+" 0 0,"+(s?1:0)+" "+e*u+","+e*o+"L"+r*u+","+r*o},"diagonal-horizontal":function(t,e,n,r){var i=(t+n)/2;return"M"+t+","+e+"C"+i+","+e+" "+i+","+r+" "+n+","+r},"diagonal-vertical":function(t,e,n,r){var i=(e+r)/2;return"M"+t+","+e+"C"+t+","+i+" "+n+","+i+" "+n+","+r},"diagonal-radial":function(t,e,n,r){var i=Math.cos(t),a=Math.sin(t),u=Math.cos(n),o=Math.sin(n),s=(e+r)/2;return"M"+e*i+","+e*a+"C"+s*i+","+s*a+" "+s*u+","+s*o+" "+r*u+","+r*o}});function fm(t){return t.source.x}function hm(t){return t.source.y}function dm(t){return t.target.x}function pm(t){return t.target.y}function gm(t){Wn.call(this,{},t)}function mm(t,e,n,r){return"M"+t+","+e+"L"+n+","+r}function vm(t,e,n,r){var i=n-t,a=r-e,u=Math.sqrt(i*i+a*a)/2;return"M"+t+","+e+"A"+u+","+u+" "+180*Math.atan2(a,i)/Math.PI+" 0 1 "+n+","+r}function ym(t,e,n,r){var i=n-t,a=r-e,u=.2*(i+a),o=.2*(a-i);return"M"+t+","+e+"C"+(t+u)+","+(e+o)+" "+(n+o)+","+(r-u)+" "+n+","+r}function bm(t){Wn.call(this,null,t)}gm.Definition={type:"LinkPath",metadata:{modifies:!0},params:[{name:"sourceX",type:"field",default:"source.x"},{name:"sourceY",type:"field",default:"source.y"},{name:"targetX",type:"field",default:"target.x"},{name:"targetY",type:"field",default:"target.y"},{name:"orient",type:"enum",default:"vertical",values:["horizontal","vertical","radial"]},{name:"shape",type:"enum",default:"line",values:["line","arc","curve","diagonal","orthogonal"]},{name:"require",type:"signal"},{name:"as",type:"string",default:"path"}]},Object(p.w)(gm,Wn).transform=function(t,e){var n=t.sourceX||fm,r=t.sourceY||hm,i=t.targetX||dm,a=t.targetY||pm,u=t.as||"path",o=t.orient||"vertical",s=t.shape||"line",l=cm.get(s+"-"+o)||cm.get(s);return l||Object(p.l)("LinkPath unsupported type: "+t.shape+(t.orient?"-"+t.orient:"")),e.visit(e.SOURCE,(function(t){t[u]=l(n(t),r(t),i(t),a(t))})),e.reflow(t.modified()).modifies(u)},bm.Definition={type:"Pie",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"startAngle",type:"number",default:0},{name:"endAngle",type:"number",default:6.283185307179586},{name:"sort",type:"boolean",default:!1},{name:"as",type:"string",array:!0,length:2,default:["startAngle","endAngle"]}]},Object(p.w)(bm,Wn).transform=function(t,e){var n,r,i,a=t.as||["startAngle","endAngle"],u=a[0],o=a[1],s=t.field||p.L,l=t.startAngle||0,c=null!=t.endAngle?t.endAngle:2*Math.PI,f=e.source,h=f.map(s),d=h.length,g=l,m=(c-l)/function(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let i of t)(i=+e(i,++r,t))&&(n+=i)}return n}(h),v=Gi(d);for(t.sort&&v.sort((function(t,e){return h[t]-h[e]})),n=0;n<d;++n)i=h[v[n]],(r=f[v[n]])[u]=g,r[o]=g+=i*m;return this.value=h,e.reflow(t.modified()).modifies(a)};var _m=5;function xm(t){return Wf(t)&&t!==Bf}var wm=Object(p.Z)(["set","modified","clear","type","scheme","schemeExtent","schemeCount","domain","domainMin","domainMid","domainMax","domainRaw","domainImplicit","nice","zero","bins","range","rangeStep","round","reverse","interpolate","interpolateGamma"]);function Am(t){Wn.call(this,null,t),this.modified(!0)}function Om(t,e,n){Yf(t)&&(Math.abs(e.reduce((function(t,e){return t+(e<0?-1:e>0?1:0)}),0))!==e.length&&n.warn("Log scale domain includes zero: "+Object(p.V)(e)));return e}function Mm(t,e,n){return Object(p.B)(t)&&(e||n)?(r=t,i=km(e||[0,1],n),a=i[0],u=Object(p.R)(i)-a,function(t){return r(a+t*u)}):t;var r,i,a,u}function km(t,e){return e?t.slice().reverse():t}function Em(t){Wn.call(this,null,t)}Object(p.w)(Am,Wn).transform=function(t,e){var n=e.dataflow,r=this.value,i=function(t){var e,n=t.type,r="";if(n===Bf)return Bf+"-"+kf;(function(t){const e=t.type;return Wf(e)&&e!==Ff&&e!==Sf&&(t.scheme||t.range&&t.range.length&&t.range.every(p.F))})(t)&&(e=t.rawDomain?t.rawDomain.length:t.domain?t.domain.length+ +(null!=t.domainMid):0,r=2===e?Bf+"-":3===e?Tf+"-":"");return(r+n||kf).toLowerCase()}(t);for(i in r&&i===r.type||(this.value=r=zg(i)()),t)if(!wm[i]){if("padding"===i&&xm(r.type))continue;Object(p.B)(r[i])?r[i](t[i]):n.warn("Unsupported scale property: "+i)}return function(t,e,n){var r=t.type,i=e.round||!1,a=e.range;if(null!=e.rangeStep)a=function(t,e,n){t!==Uf&&t!==Lf&&Object(p.l)("Only band and point scales support rangeStep.");var r=(null!=e.paddingOuter?e.paddingOuter:e.padding)||0,i=t===Lf?1:(null!=e.paddingInner?e.paddingInner:e.padding)||0;return[0,e.rangeStep*Of(n,i,r)]}(r,e,n);else if(e.scheme&&(a=function(t,e,n){var r,i,a=e.schemeExtent;Object(p.y)(e.scheme)?i=Ug(e.scheme,e.interpolate,e.interpolateGamma):(r=e.scheme.toLowerCase(),(i=Vg(r))||Object(p.l)(`Unrecognized scheme name: ${e.scheme}`));return n=t===Nf?n+1:t===qf?n-1:t===Rf||t===zf?+e.schemeCount||_m:n,$f(t)?Mm(i,a,e.reverse):Object(p.B)(i)?function(t,e){for(var n=new Array(e),r=e+1,i=0;i<e;)n[i]=t(++i/r);return n}(Mm(i,a),n):t===Pf?i:i.slice(0,n)}(r,e,n),Object(p.B)(a))){if(t.interpolator)return t.interpolator(a);Object(p.l)(`Scale type ${r} does not support interpolating color schemes.`)}if(a&&$f(r))return t.interpolator(Ug(km(a,e.reverse),e.interpolate,e.interpolateGamma));a&&e.interpolate&&t.interpolate?t.interpolate(Ig(e.interpolate,e.interpolateGamma)):Object(p.B)(t.round)?t.round(i):Object(p.B)(t.rangeRound)&&t.interpolate(i?Jd:Xd);a&&t.range(km(a,e.reverse))}(r,t,function(t,e,n){let r=e.bins;if(r&&!Object(p.y)(r)){let e=t.domain(),n=e[0],i=Object(p.R)(e),a=null==r.start?n:r.start,u=null==r.stop?i:r.stop,o=r.step;o||Object(p.l)("Scale bins parameter missing step property."),a<n&&(a=o*Math.ceil(n/o)),u>i&&(u=o*Math.floor(i/o)),r=Gi(a,u+o/2,o)}r?t.bins=r:t.bins&&delete t.bins;t.type===qf&&(r?e.domain||e.domainRaw||(t.domain(r),n=r.length):t.bins=t.domain());return n}(r,t,function(t,e,n){var r=function(t,e,n){return e?(t.domain(Om(t.type,e,n)),e.length):-1}(t,e.domainRaw,n);if(r>-1)return r;var i,a,u=e.domain,o=t.type,s=e.zero||void 0===e.zero&&function(t){const e=t.type;return!t.bins&&(e===kf||e===jf||e===Df)}(t);if(!u)return 0;xm(o)&&e.padding&&u[0]!==Object(p.R)(u)&&(u=function(t,e,n,r,i,a){var u=Math.abs(Object(p.R)(n)-n[0]),o=u/(u-2*r),s=t===Ef?Object(p.hb)(e,null,o):t===Df?Object(p.ib)(e,null,o,.5):t===jf?Object(p.ib)(e,null,o,i||1):t===Cf?Object(p.jb)(e,null,o,a||1):Object(p.gb)(e,null,o);return(e=e.slice())[0]=s[0],e[e.length-1]=s[1],e}(o,u,e.range,e.padding,e.exponent,e.constant));(s||null!=e.domainMin||null!=e.domainMax||null!=e.domainMid)&&(i=(u=u.slice()).length-1||1,s&&(u[0]>0&&(u[0]=0),u[i]<0&&(u[i]=0)),null!=e.domainMin&&(u[0]=e.domainMin),null!=e.domainMax&&(u[i]=e.domainMax),null!=e.domainMid&&(((a=e.domainMid)<u[0]||a>u[i])&&n.warn("Scale domainMid exceeds domain min or max.",a),u.splice(i,0,a)));t.domain(Om(o,u,n)),o===Pf&&t.unknown(e.domainImplicit?_h:void 0);e.nice&&t.nice&&t.nice(!0!==e.nice&&Hg(t,e.nice)||null);return u.length}(r,t,n))),e.fork(e.NO_SOURCE|e.NO_FIELDS)},Object(p.w)(Em,Wn).transform=function(t,e){var n=t.modified("sort")||e.changed(e.ADD)||e.modified(t.sort.fields)||e.modified("datum");return n&&e.source.sort(k(t.sort)),this.modified(n),e};var jm=["y0","y1"];function Dm(t){Wn.call(this,null,t)}function Cm(t,e,n,r,i){for(var a,u=(e-t.sum)/2,o=t.length,s=0;s<o;++s)(a=t[s])[r]=u,a[i]=u+=Math.abs(n(a))}function Fm(t,e,n,r,i){for(var a,u=1/t.sum,o=0,s=t.length,l=0,c=0;l<s;++l)(a=t[l])[r]=o,a[i]=o=u*(c+=Math.abs(n(a)))}function Sm(t,e,n,r,i){for(var a,u,o=0,s=0,l=t.length,c=0;c<l;++c)(a=+n(u=t[c]))<0?(u[r]=s,u[i]=s+=a):(u[r]=o,u[i]=o+=a)}Dm.Definition={type:"Stack",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"groupby",type:"field",array:!0},{name:"sort",type:"compare"},{name:"offset",type:"enum",default:"zero",values:["zero","center","normalize"]},{name:"as",type:"string",array:!0,length:2,default:jm}]},Object(p.w)(Dm,Wn).transform=function(t,e){var n,r,i,a,u=t.as||jm,o=u[0],s=u[1],l=k(t.sort),c=t.field||p.L,f="center"===t.offset?Cm:"normalize"===t.offset?Fm:Sm;for(n=function(t,e,n,r){var i,a,u,o,s,l,c,f,h,d=[],p=function(t){return t(s)};if(null==e)d.push(t.slice());else for(i={},a=0,u=t.length;a<u;++a)s=t[a],l=e.map(p),(c=i[l])||(i[l]=c=[],d.push(c)),c.push(s);for(l=0,h=0,o=d.length;l<o;++l){for(c=d[l],a=0,f=0,u=c.length;a<u;++a)f+=Math.abs(r(c[a]));c.sum=f,f>h&&(h=f),n&&c.sort(n)}return d.max=h,d}(e.source,t.groupby,l,c),r=0,i=n.length,a=n.max;r<i;++r)f(n[r],a,c,o,s);return e.reflow(t.modified()).modifies(u)};var Bm=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let i=-1;for(let a of t)null!=(a=e(a,++i,t))&&(void 0===n?a>=a&&(n=r=a):(n>a&&(n=a),r<a&&(r=a)))}return[n,r]},Tm=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var Rm,zm;1===(Rm=Tm).length&&(zm=Rm,Rm=function(t,e){return Tm(zm(t),e)});var Nm=function(t,e){var n,r,i,a=t.length,u=-1;if(null==e){for(;++u<a;)if(null!=(n=t[u])&&n>=n)for(r=i=n;++u<a;)null!=(n=t[u])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++u<a;)if(null!=(n=e(t[u],u,t))&&n>=n)for(r=i=n;++u<a;)null!=(n=e(t[u],u,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},Pm=Array.prototype,Lm=(Pm.slice,Pm.map,function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a}),Um=Math.sqrt(50),qm=Math.sqrt(10),Im=Math.sqrt(2);function $m(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=Um?i*=10:a>=qm?i*=5:a>=Im&&(i*=2),e<t?-i:i}var Ym=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},Wm=function(t,e){var n,r,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=n;++a<i;)null!=(n=t[a])&&n>r&&(r=n)}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=n;++a<i;)null!=(n=e(t[a],a,t))&&n>r&&(r=n);return r};var Vm=Array.prototype.slice,Hm=function(t,e){return t-e},Xm=function(t){for(var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r},Gm=function(t){return function(){return t}},Zm=function(t,e){for(var n,r=-1,i=e.length;++r<i;)if(n=Jm(t,e[r]))return n;return 0};function Jm(t,e){for(var n=e[0],r=e[1],i=-1,a=0,u=t.length,o=u-1;a<u;o=a++){var s=t[a],l=s[0],c=s[1],f=t[o],h=f[0],d=f[1];if(Qm(s,f,e))return 0;c>r!=d>r&&n<(h-l)*(r-c)/(d-c)+l&&(i=-i)}return i}function Qm(t,e,n){var r,i,a,u;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(i=t[r=+(t[0]===e[0])],a=n[r],u=e[r],i<=a&&a<=u||u<=a&&a<=i)}var Km=function(){},tv=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],ev=function(){var t=1,e=1,n=Ym,r=o;function i(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(Hm);else{var r=Nm(t),i=r[0],u=r[1];e=$m(i,u,e),e=Lm(Math.floor(i/e)*e,Math.floor(u/e)*e,e)}return e.map((function(e){return a(t,e)}))}function a(n,i){var a=[],o=[];return function(n,r,i){var a,o,s,l,c,f,h=new Array,d=new Array;a=o=-1,l=n[0]>=r,tv[l<<1].forEach(p);for(;++a<t-1;)s=l,l=n[a+1]>=r,tv[s|l<<1].forEach(p);tv[l<<0].forEach(p);for(;++o<e-1;){for(a=-1,l=n[o*t+t]>=r,c=n[o*t]>=r,tv[l<<1|c<<2].forEach(p);++a<t-1;)s=l,l=n[o*t+t+a+1]>=r,f=c,c=n[o*t+a+1]>=r,tv[s|l<<1|c<<2|f<<3].forEach(p);tv[l|c<<3].forEach(p)}a=-1,c=n[o*t]>=r,tv[c<<2].forEach(p);for(;++a<t-1;)f=c,c=n[o*t+a+1]>=r,tv[c<<2|f<<3].forEach(p);function p(t){var e,n,r=[t[0][0]+a,t[0][1]+o],s=[t[1][0]+a,t[1][1]+o],l=u(r),c=u(s);(e=d[l])?(n=h[c])?(delete d[e.end],delete h[n.start],e===n?(e.ring.push(s),i(e.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete d[e.end],e.ring.push(s),d[e.end=c]=e):(e=h[c])?(n=d[l])?(delete h[e.start],delete d[n.end],e===n?(e.ring.push(s),i(e.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete h[e.start],e.ring.unshift(r),h[e.start=l]=e):h[l]=d[c]={start:l,end:c,ring:[r,s]}}tv[c<<3].forEach(p)}(n,i,(function(t){r(t,n,i),Xm(t)>0?a.push([t]):o.push(t)})),o.forEach((function(t){for(var e,n=0,r=a.length;n<r;++n)if(-1!==Zm((e=a[n])[0],t))return void e.push(t)})),{type:"MultiPolygon",value:i,coordinates:a}}function u(e){return 2*e[0]+e[1]*(t+1)*4}function o(n,r,i){n.forEach((function(n){var a,u=n[0],o=n[1],s=0|u,l=0|o,c=r[l*t+s];u>0&&u<t&&s===u&&(a=r[l*t+s-1],n[0]=u+(i-a)/(c-a)-.5),o>0&&o<e&&l===o&&(a=r[(l-1)*t+s],n[1]=o+(i-a)/(c-a)-.5)}))}return i.contour=a,i.size=function(n){if(!arguments.length)return[t,e];var r=Math.ceil(n[0]),a=Math.ceil(n[1]);if(!(r>0&&a>0))throw new Error("invalid size");return t=r,e=a,i},i.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?Gm(Vm.call(t)):Gm(t),i):n},i.smooth=function(t){return arguments.length?(r=t?o:Km,i):r===o},i};function nv(t,e,n){for(var r=t.width,i=t.height,a=1+(n<<1),u=0;u<i;++u)for(var o=0,s=0;o<r+n;++o)o<r&&(s+=t.data[o+u*r]),o>=n&&(o>=a&&(s-=t.data[o-a+u*r]),e.data[o-n+u*r]=s/Math.min(o+1,r-1+a-o,a))}function rv(t,e,n){for(var r=t.width,i=t.height,a=1+(n<<1),u=0;u<r;++u)for(var o=0,s=0;o<i+n;++o)o<i&&(s+=t.data[u+o*r]),o>=n&&(o>=a&&(s-=t.data[u+(o-a)*r]),e.data[u+(o-n)*r]=s/Math.min(o+1,i-1+a-o,a))}function iv(t){return t[0]}function av(t){return t[1]}function uv(){return 1}var ov=["size","smooth"],sv=["x","y","weight","size","cellSize","bandwidth"];function lv(t){Wn.call(this,null,t)}lv.Definition={type:"Contour",metadata:{generates:!0},params:[{name:"size",type:"number",array:!0,length:2,required:!0},{name:"values",type:"number",array:!0},{name:"x",type:"field"},{name:"y",type:"field"},{name:"weight",type:"field"},{name:"cellSize",type:"number"},{name:"bandwidth",type:"number"},{name:"count",type:"number"},{name:"smooth",type:"boolean"},{name:"nice",type:"boolean",default:!1},{name:"thresholds",type:"number",array:!0}]},Object(p.w)(lv,Wn).transform=function(t,e){if(this.value&&!e.changed()&&!t.modified())return e.StopPropagation;var n,r,i,a,u=e.fork(e.NO_SOURCE|e.NO_FIELDS),o=t.count||10;return t.values?(n=ev(),r=ov,i=t.values):(n=function(){var t=iv,e=av,n=uv,r=960,i=500,a=20,u=2,o=3*a,s=r+2*o>>u,l=i+2*o>>u,c=Gm(20);function f(r){var i=new Float32Array(s*l),f=new Float32Array(s*l);r.forEach((function(r,a,c){var f=+t(r,a,c)+o>>u,h=+e(r,a,c)+o>>u,d=+n(r,a,c);f>=0&&f<s&&h>=0&&h<l&&(i[f+h*s]+=d)})),nv({width:s,height:l,data:i},{width:s,height:l,data:f},a>>u),rv({width:s,height:l,data:f},{width:s,height:l,data:i},a>>u),nv({width:s,height:l,data:i},{width:s,height:l,data:f},a>>u),rv({width:s,height:l,data:f},{width:s,height:l,data:i},a>>u),nv({width:s,height:l,data:i},{width:s,height:l,data:f},a>>u),rv({width:s,height:l,data:f},{width:s,height:l,data:i},a>>u);var d=c(i);if(!Array.isArray(d)){var p=Wm(i);d=$m(0,p,d),(d=Lm(0,Math.floor(p/d)*d,d)).shift()}return ev().thresholds(d).size([s,l])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(g)}function g(t){t[0]=t[0]*Math.pow(2,u)-o,t[1]=t[1]*Math.pow(2,u)-o}function m(){return s=r+2*(o=3*a)>>u,l=i+2*o>>u,f}return f.x=function(e){return arguments.length?(t="function"==typeof e?e:Gm(+e),f):t},f.y=function(t){return arguments.length?(e="function"==typeof t?t:Gm(+t),f):e},f.weight=function(t){return arguments.length?(n="function"==typeof t?t:Gm(+t),f):n},f.size=function(t){if(!arguments.length)return[r,i];var e=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(e>=0||e>=0))throw new Error("invalid size");return r=e,i=n,m()},f.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),m()},f.thresholds=function(t){return arguments.length?(c="function"==typeof t?t:Array.isArray(t)?Gm(Vm.call(t)):Gm(t),f):c},f.bandwidth=function(t){if(!arguments.length)return Math.sqrt(a*(a+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return a=Math.round((Math.sqrt(4*t*t+1)-1)/2),m()},f}(),r=sv,i=e.materialize(e.SOURCE).source),n.thresholds(t.thresholds||(t.nice?o:(a=o,function(t){for(var e=Bm(t),n=e[0],r=e[1]-n,i=[],u=1;u<=a;++u)i.push(n+r*u/(a+1));return i}))),r.forEach((function(e){null!=t[e]&&n[e](t[e])})),this.value&&(u.rem=this.value),i=i&&i.length?n(i).map(w):[],this.value=u.source=u.add=i,u};var cv="Feature",fv="FeatureCollection";function hv(t){Wn.call(this,null,t)}hv.Definition={type:"GeoJSON",metadata:{},params:[{name:"fields",type:"field",array:!0,length:2},{name:"geojson",type:"field"}]},Object(p.w)(hv,Wn).transform=function(t,e){var n,r=this._features,i=this._points,a=t.fields,u=a&&a[0],o=a&&a[1],s=t.geojson||!a&&p.v,l=e.ADD;n=t.modified()||e.changed(e.REM)||e.modified(Object(p.e)(s))||u&&e.modified(Object(p.e)(u))||o&&e.modified(Object(p.e)(o)),this.value&&!n||(l=e.SOURCE,this._features=r=[],this._points=i=[]),s&&e.visit(l,(function(t){r.push(s(t))})),u&&o&&(e.visit(l,(function(t){var e=u(t),n=o(t);null!=e&&null!=n&&(e=+e)===e&&(n=+n)===n&&i.push([e,n])})),r=r.concat({type:cv,geometry:{type:"MultiPoint",coordinates:i}})),this.value={type:fv,features:r}};var dv=function(){return new pv};function pv(){this.reset()}pv.prototype={constructor:pv,reset:function(){this.s=this.t=0},add:function(t){mv(gv,t,this.t),mv(this,gv.s,this.s),this.s?this.t+=gv.t:this.s=gv.t},valueOf:function(){return this.s}};var gv=new pv;function mv(t,e,n){var r=t.s=e+n,i=r-e,a=r-i;t.t=e-a+(n-i)}var vv=1e-6,yv=1e-12,bv=Math.PI,_v=bv/2,xv=bv/4,wv=2*bv,Av=180/bv,Ov=bv/180,Mv=Math.abs,kv=Math.atan,Ev=Math.atan2,jv=Math.cos,Dv=Math.ceil,Cv=Math.exp,Fv=(Math.floor,Math.log),Sv=Math.pow,Bv=Math.sin,Tv=Math.sign||function(t){return t>0?1:t<0?-1:0},Rv=Math.sqrt,zv=Math.tan;function Nv(t){return t>1?0:t<-1?bv:Math.acos(t)}function Pv(t){return t>1?_v:t<-1?-_v:Math.asin(t)}function Lv(){}function Uv(t,e){t&&Iv.hasOwnProperty(t.type)&&Iv[t.type](t,e)}var qv={Feature:function(t,e){Uv(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)Uv(n[r].geometry,e)}},Iv={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){$v(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)$v(n[r],e,0)},Polygon:function(t,e){Yv(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Yv(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)Uv(n[r],e)}};function $v(t,e,n){var r,i=-1,a=t.length-n;for(e.lineStart();++i<a;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function Yv(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)$v(t[n],e,1);e.polygonEnd()}var Wv,Vv,Hv,Xv,Gv,Zv=function(t,e){t&&qv.hasOwnProperty(t.type)?qv[t.type](t,e):Uv(t,e)},Jv=dv(),Qv=dv(),Kv={point:Lv,lineStart:Lv,lineEnd:Lv,polygonStart:function(){Jv.reset(),Kv.lineStart=ty,Kv.lineEnd=ey},polygonEnd:function(){var t=+Jv;Qv.add(t<0?wv+t:t),this.lineStart=this.lineEnd=this.point=Lv},sphere:function(){Qv.add(wv)}};function ty(){Kv.point=ny}function ey(){ry(Wv,Vv)}function ny(t,e){Kv.point=ry,Wv=t,Vv=e,Hv=t*=Ov,Xv=jv(e=(e*=Ov)/2+xv),Gv=Bv(e)}function ry(t,e){var n=(t*=Ov)-Hv,r=n>=0?1:-1,i=r*n,a=jv(e=(e*=Ov)/2+xv),u=Bv(e),o=Gv*u,s=Xv*a+o*jv(i),l=o*r*Bv(i);Jv.add(Ev(l,s)),Hv=t,Xv=a,Gv=u}function iy(t){return[Ev(t[1],t[0]),Pv(t[2])]}function ay(t){var e=t[0],n=t[1],r=jv(n);return[r*jv(e),r*Bv(e),Bv(n)]}function uy(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function oy(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function sy(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function ly(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function cy(t){var e=Rv(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var fy,hy,dy,py,gy,my,vy,yy,by,_y,xy=dv(),wy={point:Ay,lineStart:My,lineEnd:ky,polygonStart:function(){wy.point=Ey,wy.lineStart=jy,wy.lineEnd=Dy,xy.reset(),Kv.polygonStart()},polygonEnd:function(){Kv.polygonEnd(),wy.point=Ay,wy.lineStart=My,wy.lineEnd=ky,Jv<0?(fy=-(dy=180),hy=-(py=90)):xy>vv?py=90:xy<-vv&&(hy=-90),_y[0]=fy,_y[1]=dy},sphere:function(){fy=-(dy=180),hy=-(py=90)}};function Ay(t,e){by.push(_y=[fy=t,dy=t]),e<hy&&(hy=e),e>py&&(py=e)}function Oy(t,e){var n=ay([t*Ov,e*Ov]);if(yy){var r=oy(yy,n),i=oy([r[1],-r[0],0],r);cy(i),i=iy(i);var a,u=t-gy,o=u>0?1:-1,s=i[0]*Av*o,l=Mv(u)>180;l^(o*gy<s&&s<o*t)?(a=i[1]*Av)>py&&(py=a):l^(o*gy<(s=(s+360)%360-180)&&s<o*t)?(a=-i[1]*Av)<hy&&(hy=a):(e<hy&&(hy=e),e>py&&(py=e)),l?t<gy?Cy(fy,t)>Cy(fy,dy)&&(dy=t):Cy(t,dy)>Cy(fy,dy)&&(fy=t):dy>=fy?(t<fy&&(fy=t),t>dy&&(dy=t)):t>gy?Cy(fy,t)>Cy(fy,dy)&&(dy=t):Cy(t,dy)>Cy(fy,dy)&&(fy=t)}else by.push(_y=[fy=t,dy=t]);e<hy&&(hy=e),e>py&&(py=e),yy=n,gy=t}function My(){wy.point=Oy}function ky(){_y[0]=fy,_y[1]=dy,wy.point=Ay,yy=null}function Ey(t,e){if(yy){var n=t-gy;xy.add(Mv(n)>180?n+(n>0?360:-360):n)}else my=t,vy=e;Kv.point(t,e),Oy(t,e)}function jy(){Kv.lineStart()}function Dy(){Ey(my,vy),Kv.lineEnd(),Mv(xy)>vv&&(fy=-(dy=180)),_y[0]=fy,_y[1]=dy,yy=null}function Cy(t,e){return(e-=t)<0?e+360:e}function Fy(t,e){return t[0]-e[0]}function Sy(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var By,Ty,Ry,zy,Ny,Py,Ly,Uy,qy,Iy,$y,Yy,Wy,Vy,Hy,Xy,Gy={sphere:Lv,point:Zy,lineStart:Qy,lineEnd:eb,polygonStart:function(){Gy.lineStart=nb,Gy.lineEnd=rb},polygonEnd:function(){Gy.lineStart=Qy,Gy.lineEnd=eb}};function Zy(t,e){t*=Ov;var n=jv(e*=Ov);Jy(n*jv(t),n*Bv(t),Bv(e))}function Jy(t,e,n){Ry+=(t-Ry)/++By,zy+=(e-zy)/By,Ny+=(n-Ny)/By}function Qy(){Gy.point=Ky}function Ky(t,e){t*=Ov;var n=jv(e*=Ov);Vy=n*jv(t),Hy=n*Bv(t),Xy=Bv(e),Gy.point=tb,Jy(Vy,Hy,Xy)}function tb(t,e){t*=Ov;var n=jv(e*=Ov),r=n*jv(t),i=n*Bv(t),a=Bv(e),u=Ev(Rv((u=Hy*a-Xy*i)*u+(u=Xy*r-Vy*a)*u+(u=Vy*i-Hy*r)*u),Vy*r+Hy*i+Xy*a);Ty+=u,Py+=u*(Vy+(Vy=r)),Ly+=u*(Hy+(Hy=i)),Uy+=u*(Xy+(Xy=a)),Jy(Vy,Hy,Xy)}function eb(){Gy.point=Zy}function nb(){Gy.point=ib}function rb(){ab(Yy,Wy),Gy.point=Zy}function ib(t,e){Yy=t,Wy=e,t*=Ov,e*=Ov,Gy.point=ab;var n=jv(e);Vy=n*jv(t),Hy=n*Bv(t),Xy=Bv(e),Jy(Vy,Hy,Xy)}function ab(t,e){t*=Ov;var n=jv(e*=Ov),r=n*jv(t),i=n*Bv(t),a=Bv(e),u=Hy*a-Xy*i,o=Xy*r-Vy*a,s=Vy*i-Hy*r,l=Rv(u*u+o*o+s*s),c=Pv(l),f=l&&-c/l;qy+=f*u,Iy+=f*o,$y+=f*s,Ty+=c,Py+=c*(Vy+(Vy=r)),Ly+=c*(Hy+(Hy=i)),Uy+=c*(Xy+(Xy=a)),Jy(Vy,Hy,Xy)}var ub=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};function ob(t,e){return[Mv(t)>bv?t+Math.round(-t/wv)*wv:t,e]}function sb(t,e,n){return(t%=wv)?e||n?ub(cb(t),fb(e,n)):cb(t):e||n?fb(e,n):ob}function lb(t){return function(e,n){return[(e+=t)>bv?e-wv:e<-bv?e+wv:e,n]}}function cb(t){var e=lb(t);return e.invert=lb(-t),e}function fb(t,e){var n=jv(t),r=Bv(t),i=jv(e),a=Bv(e);function u(t,e){var u=jv(e),o=jv(t)*u,s=Bv(t)*u,l=Bv(e),c=l*n+o*r;return[Ev(s*i-c*a,o*n-l*r),Pv(c*i+s*a)]}return u.invert=function(t,e){var u=jv(e),o=jv(t)*u,s=Bv(t)*u,l=Bv(e),c=l*i-s*a;return[Ev(s*i+l*a,o*n+c*r),Pv(c*n-o*r)]},u}ob.invert=ob;var hb=function(t){function e(e){return(e=t(e[0]*Ov,e[1]*Ov))[0]*=Av,e[1]*=Av,e}return t=sb(t[0]*Ov,t[1]*Ov,t.length>2?t[2]*Ov:0),e.invert=function(e){return(e=t.invert(e[0]*Ov,e[1]*Ov))[0]*=Av,e[1]*=Av,e},e};function db(t,e,n,r,i,a){if(n){var u=jv(e),o=Bv(e),s=r*n;null==i?(i=e+r*wv,a=e-s/2):(i=pb(u,i),a=pb(u,a),(r>0?i<a:i>a)&&(i+=r*wv));for(var l,c=i;r>0?c>a:c<a;c-=s)l=iy([u,-o*jv(c),-o*Bv(c)]),t.point(l[0],l[1])}}function pb(t,e){(e=ay(e))[0]-=t,cy(e);var n=Nv(-e[1]);return((-e[2]<0?-n:n)+wv-vv)%wv}var gb=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Lv,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},mb=function(t,e){return Mv(t[0]-e[0])<vv&&Mv(t[1]-e[1])<vv};function vb(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var yb=function(t,e,n,r,i){var a,u,o=[],s=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],u=t[e];if(mb(r,u)){for(i.lineStart(),a=0;a<e;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else o.push(n=new vb(r,t,null,!0)),s.push(n.o=new vb(r,null,n,!1)),o.push(n=new vb(u,t,null,!1)),s.push(n.o=new vb(u,null,n,!0))}})),o.length){for(s.sort(e),bb(o),bb(s),a=0,u=s.length;a<u;++a)s[a].e=n=!n;for(var l,c,f=o[0];;){for(var h=f,d=!0;h.v;)if((h=h.n)===f)return;l=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(a=0,u=l.length;a<u;++a)i.point((c=l[a])[0],c[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(l=h.p.z,a=l.length-1;a>=0;--a)i.point((c=l[a])[0],c[1]);else r(h.x,h.p.x,-1,i);h=h.p}l=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function bb(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}var _b=dv();function xb(t){return Mv(t[0])<=bv?t[0]:Tv(t[0])*((Mv(t[0])+bv)%wv-bv)}var wb=function(t,e){var n=xb(e),r=e[1],i=Bv(r),a=[Bv(n),-jv(n),0],u=0,o=0;_b.reset(),1===i?r=_v+vv:-1===i&&(r=-_v-vv);for(var s=0,l=t.length;s<l;++s)if(f=(c=t[s]).length)for(var c,f,h=c[f-1],d=xb(h),p=h[1]/2+xv,g=Bv(p),m=jv(p),v=0;v<f;++v,d=b,g=x,m=w,h=y){var y=c[v],b=xb(y),_=y[1]/2+xv,x=Bv(_),w=jv(_),A=b-d,O=A>=0?1:-1,M=O*A,k=M>bv,E=g*x;if(_b.add(Ev(E*O*Bv(M),m*w+E*jv(M))),u+=k?A+O*wv:A,k^d>=n^b>=n){var j=oy(ay(h),ay(y));cy(j);var D=oy(a,j);cy(D);var C=(k^A>=0?-1:1)*Pv(D[2]);(r>C||r===C&&(j[0]||j[1]))&&(o+=k^A>=0?1:-1)}}return(u<-vv||u<vv&&_b<-vv)^1&o},Ab=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var Ob=function(t){return 1===t.length&&(t=function(t){return function(e,n){return Ab(t(e),n)}}(t)),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)<0?r=a+1:i=a}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)>0?i=a:r=a+1}return r}}}(Ab);Ob.right,Ob.left;var Mb=Array.prototype,kb=(Mb.slice,Mb.map,function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a});Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var Eb=function(t){for(var e,n,r,i=t.length,a=-1,u=0;++a<i;)u+=t[a].length;for(n=new Array(u);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--u]=r[e];return n};var jb=function(t,e,n,r){return function(i){var a,u,o,s=e(i),l=gb(),c=e(l),f=!1,h={point:d,lineStart:g,lineEnd:m,polygonStart:function(){h.point=v,h.lineStart=y,h.lineEnd=b,u=[],a=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=m,u=Eb(u);var t=wb(a,r);u.length?(f||(i.polygonStart(),f=!0),yb(u,Cb,t,n,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),u=a=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(e,n){t(e,n)&&i.point(e,n)}function p(t,e){s.point(t,e)}function g(){h.point=p,s.lineStart()}function m(){h.point=d,s.lineEnd()}function v(t,e){o.push([t,e]),c.point(t,e)}function y(){c.lineStart(),o=[]}function b(){v(o[0][0],o[0][1]),c.lineEnd();var t,e,n,r,s=c.clean(),h=l.result(),d=h.length;if(o.pop(),a.push(o),o=null,d)if(1&s){if((e=(n=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else d>1&&2&s&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Db))}return h}};function Db(t){return t.length>1}function Cb(t,e){return((t=t.x)[0]<0?t[1]-_v-vv:_v-t[1])-((e=e.x)[0]<0?e[1]-_v-vv:_v-e[1])}var Fb=jb((function(){return!0}),(function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,u){var o=a>0?bv:-bv,s=Mv(a-n);Mv(s-bv)<vv?(t.point(n,r=(r+u)/2>0?_v:-_v),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(a,r),e=0):i!==o&&s>=bv&&(Mv(n-i)<vv&&(n-=i*vv),Mv(a-o)<vv&&(a-=o*vv),r=function(t,e,n,r){var i,a,u=Bv(t-n);return Mv(u)>vv?kv((Bv(e)*(a=jv(r))*Bv(n)-Bv(r)*(i=jv(e))*Bv(t))/(i*a*u)):(e+r)/2}(n,r,a,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),e=0),t.point(n=a,r=u),i=o},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var i;if(null==t)i=n*_v,r.point(-bv,i),r.point(0,i),r.point(bv,i),r.point(bv,0),r.point(bv,-i),r.point(0,-i),r.point(-bv,-i),r.point(-bv,0),r.point(-bv,i);else if(Mv(t[0]-e[0])>vv){var a=t[0]<e[0]?bv:-bv;i=n*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(e[0],e[1])}),[-bv,-_v]);var Sb=function(t){var e=jv(t),n=6*Ov,r=e>0,i=Mv(e)>vv;function a(t,n){return jv(t)*jv(n)>e}function u(t,n,r){var i=[1,0,0],a=oy(ay(t),ay(n)),u=uy(a,a),o=a[0],s=u-o*o;if(!s)return!r&&t;var l=e*u/s,c=-e*o/s,f=oy(i,a),h=ly(i,l);sy(h,ly(a,c));var d=f,p=uy(h,d),g=uy(d,d),m=p*p-g*(uy(h,h)-1);if(!(m<0)){var v=Rv(m),y=ly(d,(-p-v)/g);if(sy(y,h),y=iy(y),!r)return y;var b,_=t[0],x=n[0],w=t[1],A=n[1];x<_&&(b=_,_=x,x=b);var O=x-_,M=Mv(O-bv)<vv;if(!M&&A<w&&(b=w,w=A,A=b),M||O<vv?M?w+A>0^y[1]<(Mv(y[0]-_)<vv?w:A):w<=y[1]&&y[1]<=A:O>bv^(_<=y[0]&&y[0]<=x)){var k=ly(d,(-p+v)/g);return sy(k,h),[y,iy(k)]}}}function o(e,n){var i=r?t:bv-t,a=0;return e<-i?a|=1:e>i&&(a|=2),n<-i?a|=4:n>i&&(a|=8),a}return jb(a,(function(t){var e,n,s,l,c;return{lineStart:function(){l=s=!1,c=1},point:function(f,h){var d,p=[f,h],g=a(f,h),m=r?g?0:o(f,h):g?o(f+(f<0?bv:-bv),h):0;if(!e&&(l=s=g)&&t.lineStart(),g!==s&&(!(d=u(e,p))||mb(e,d)||mb(p,d))&&(p[0]+=vv,p[1]+=vv,g=a(p[0],p[1])),g!==s)c=0,g?(t.lineStart(),d=u(p,e),t.point(d[0],d[1])):(d=u(e,p),t.point(d[0],d[1]),t.lineEnd()),e=d;else if(i&&e&&r^g){var v;m&n||!(v=u(p,e,!0))||(c=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!g||e&&mb(e,p)||t.point(p[0],p[1]),e=p,s=g,n=m},lineEnd:function(){s&&t.lineEnd(),e=null},clean:function(){return c|(l&&s)<<1}}}),(function(e,r,i,a){db(a,t,n,i,e,r)}),r?[0,-t]:[-bv,t-bv])},Bb=function(t,e,n,r,i,a){var u,o=t[0],s=t[1],l=0,c=1,f=e[0]-o,h=e[1]-s;if(u=n-o,f||!(u>0)){if(u/=f,f<0){if(u<l)return;u<c&&(c=u)}else if(f>0){if(u>c)return;u>l&&(l=u)}if(u=i-o,f||!(u<0)){if(u/=f,f<0){if(u>c)return;u>l&&(l=u)}else if(f>0){if(u<l)return;u<c&&(c=u)}if(u=r-s,h||!(u>0)){if(u/=h,h<0){if(u<l)return;u<c&&(c=u)}else if(h>0){if(u>c)return;u>l&&(l=u)}if(u=a-s,h||!(u<0)){if(u/=h,h<0){if(u>c)return;u>l&&(l=u)}else if(h>0){if(u<l)return;u<c&&(c=u)}return l>0&&(t[0]=o+l*f,t[1]=s+l*h),c<1&&(e[0]=o+c*f,e[1]=s+c*h),!0}}}}},Tb=1e9,Rb=-Tb;function zb(t,e,n,r){function i(i,a){return t<=i&&i<=n&&e<=a&&a<=r}function a(i,a,o,l){var c=0,f=0;if(null==i||(c=u(i,o))!==(f=u(a,o))||s(i,a)<0^o>0)do{l.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+o+4)%4)!==f);else l.point(a[0],a[1])}function u(r,i){return Mv(r[0]-t)<vv?i>0?0:3:Mv(r[0]-n)<vv?i>0?2:1:Mv(r[1]-e)<vv?i>0?1:0:i>0?3:2}function o(t,e){return s(t.x,e.x)}function s(t,e){var n=u(t,1),r=u(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){var s,l,c,f,h,d,p,g,m,v,y,b=u,_=gb(),x={point:w,lineStart:function(){x.point=A,l&&l.push(c=[]);v=!0,m=!1,p=g=NaN},lineEnd:function(){s&&(A(f,h),d&&m&&_.rejoin(),s.push(_.result()));x.point=w,m&&b.lineEnd()},polygonStart:function(){b=_,s=[],l=[],y=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,i=l.length;n<i;++n)for(var a,u,o=l[n],s=1,c=o.length,f=o[0],h=f[0],d=f[1];s<c;++s)a=h,u=d,f=o[s],h=f[0],d=f[1],u<=r?d>r&&(h-a)*(r-u)>(d-u)*(t-a)&&++e:d<=r&&(h-a)*(r-u)<(d-u)*(t-a)&&--e;return e}(),n=y&&e,i=(s=Eb(s)).length;(n||i)&&(u.polygonStart(),n&&(u.lineStart(),a(null,null,1,u),u.lineEnd()),i&&yb(s,o,e,a,u),u.polygonEnd());b=u,s=l=c=null}};function w(t,e){i(t,e)&&b.point(t,e)}function A(a,u){var o=i(a,u);if(l&&c.push([a,u]),v)f=a,h=u,d=o,v=!1,o&&(b.lineStart(),b.point(a,u));else if(o&&m)b.point(a,u);else{var s=[p=Math.max(Rb,Math.min(Tb,p)),g=Math.max(Rb,Math.min(Tb,g))],_=[a=Math.max(Rb,Math.min(Tb,a)),u=Math.max(Rb,Math.min(Tb,u))];Bb(s,_,t,e,n,r)?(m||(b.lineStart(),b.point(s[0],s[1])),b.point(_[0],_[1]),o||b.lineEnd(),y=!1):o&&(b.lineStart(),b.point(a,u),y=!1)}p=a,g=u,m=o}return x}}dv();function Nb(t,e,n){var r=kb(t,e-vv,n).concat(e);return function(t){return r.map((function(e){return[t,e]}))}}function Pb(t,e,n){var r=kb(t,e-vv,n).concat(e);return function(t){return r.map((function(e){return[e,t]}))}}function Lb(){var t,e,n,r,i,a,u,o,s,l,c,f,h=10,d=h,p=90,g=360,m=2.5;function v(){return{type:"MultiLineString",coordinates:y()}}function y(){return kb(Dv(r/p)*p,n,p).map(c).concat(kb(Dv(o/g)*g,u,g).map(f)).concat(kb(Dv(e/h)*h,t,h).filter((function(t){return Mv(t%p)>vv})).map(s)).concat(kb(Dv(a/d)*d,i,d).filter((function(t){return Mv(t%g)>vv})).map(l))}return v.lines=function(){return y().map((function(t){return{type:"LineString",coordinates:t}}))},v.outline=function(){return{type:"Polygon",coordinates:[c(r).concat(f(u).slice(1),c(n).reverse().slice(1),f(o).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],o=+t[0][1],u=+t[1][1],r>n&&(t=r,r=n,n=t),o>u&&(t=o,o=u,u=t),v.precision(m)):[[r,o],[n,u]]},v.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],a=+n[0][1],i=+n[1][1],e>t&&(n=e,e=t,t=n),a>i&&(n=a,a=i,i=n),v.precision(m)):[[e,a],[t,i]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],g=+t[1],v):[p,g]},v.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],v):[h,d]},v.precision=function(h){return arguments.length?(m=+h,s=Nb(a,i,90),l=Pb(e,t,m),c=Nb(o,u,90),f=Pb(r,n,m),v):m},v.extentMajor([[-180,-90+vv],[180,90-vv]]).extentMinor([[-180,-80-vv],[180,80+vv]])}var Ub,qb,Ib,$b,Yb=function(t){return t},Wb=dv(),Vb=dv(),Hb={point:Lv,lineStart:Lv,lineEnd:Lv,polygonStart:function(){Hb.lineStart=Xb,Hb.lineEnd=Jb},polygonEnd:function(){Hb.lineStart=Hb.lineEnd=Hb.point=Lv,Wb.add(Mv(Vb)),Vb.reset()},result:function(){var t=Wb/2;return Wb.reset(),t}};function Xb(){Hb.point=Gb}function Gb(t,e){Hb.point=Zb,Ub=Ib=t,qb=$b=e}function Zb(t,e){Vb.add($b*t-Ib*e),Ib=t,$b=e}function Jb(){Zb(Ub,qb)}var Qb=Hb,Kb=1/0,t_=Kb,e_=-Kb,n_=e_;var r_,i_,a_,u_,o_={point:function(t,e){t<Kb&&(Kb=t);t>e_&&(e_=t);e<t_&&(t_=e);e>n_&&(n_=e)},lineStart:Lv,lineEnd:Lv,polygonStart:Lv,polygonEnd:Lv,result:function(){var t=[[Kb,t_],[e_,n_]];return e_=n_=-(t_=Kb=1/0),t}},s_=0,l_=0,c_=0,f_=0,h_=0,d_=0,p_=0,g_=0,m_=0,v_={point:y_,lineStart:b_,lineEnd:w_,polygonStart:function(){v_.lineStart=A_,v_.lineEnd=O_},polygonEnd:function(){v_.point=y_,v_.lineStart=b_,v_.lineEnd=w_},result:function(){var t=m_?[p_/m_,g_/m_]:d_?[f_/d_,h_/d_]:c_?[s_/c_,l_/c_]:[NaN,NaN];return s_=l_=c_=f_=h_=d_=p_=g_=m_=0,t}};function y_(t,e){s_+=t,l_+=e,++c_}function b_(){v_.point=__}function __(t,e){v_.point=x_,y_(a_=t,u_=e)}function x_(t,e){var n=t-a_,r=e-u_,i=Rv(n*n+r*r);f_+=i*(a_+t)/2,h_+=i*(u_+e)/2,d_+=i,y_(a_=t,u_=e)}function w_(){v_.point=y_}function A_(){v_.point=M_}function O_(){k_(r_,i_)}function M_(t,e){v_.point=k_,y_(r_=a_=t,i_=u_=e)}function k_(t,e){var n=t-a_,r=e-u_,i=Rv(n*n+r*r);f_+=i*(a_+t)/2,h_+=i*(u_+e)/2,d_+=i,p_+=(i=u_*t-a_*e)*(a_+t),g_+=i*(u_+e),m_+=3*i,y_(a_=t,u_=e)}var E_=v_;function j_(t){this._context=t}j_.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,wv)}},result:Lv};var D_,C_,F_,S_,B_,T_=dv(),R_={point:Lv,lineStart:function(){R_.point=z_},lineEnd:function(){D_&&N_(C_,F_),R_.point=Lv},polygonStart:function(){D_=!0},polygonEnd:function(){D_=null},result:function(){var t=+T_;return T_.reset(),t}};function z_(t,e){R_.point=N_,C_=S_=t,F_=B_=e}function N_(t,e){S_-=t,B_-=e,T_.add(Rv(S_*S_+B_*B_)),S_=t,B_=e}var P_=R_;function L_(){this._string=[]}function U_(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}L_.prototype={_radius:4.5,_circle:U_(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=U_(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var q_=function(t,e){var n,r,i=4.5;function a(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Zv(t,n(r))),r.result()}return a.area=function(t){return Zv(t,n(Qb)),Qb.result()},a.measure=function(t){return Zv(t,n(P_)),P_.result()},a.bounds=function(t){return Zv(t,n(o_)),o_.result()},a.centroid=function(t){return Zv(t,n(E_)),E_.result()},a.projection=function(e){return arguments.length?(n=null==e?(t=null,Yb):(t=e).stream,a):t},a.context=function(t){return arguments.length?(r=null==t?(e=null,new L_):new j_(e=t),"function"!=typeof i&&r.pointRadius(i),a):e},a.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),a):i},a.projection(t).context(e)};function I_(t){return function(e){var n=new $_;for(var r in t)n[r]=t[r];return n.stream=e,n}}function $_(){}function Y_(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Zv(n,t.stream(o_)),e(o_.result()),null!=r&&t.clipExtent(r),t}function W_(t,e,n){return Y_(t,(function(n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],a=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),u=+e[0][0]+(r-a*(n[1][0]+n[0][0]))/2,o=+e[0][1]+(i-a*(n[1][1]+n[0][1]))/2;t.scale(150*a).translate([u,o])}),n)}function V_(t,e,n){return W_(t,[[0,0],e],n)}function H_(t,e,n){return Y_(t,(function(n){var r=+e,i=r/(n[1][0]-n[0][0]),a=(r-i*(n[1][0]+n[0][0]))/2,u=-i*n[0][1];t.scale(150*i).translate([a,u])}),n)}function X_(t,e,n){return Y_(t,(function(n){var r=+e,i=r/(n[1][1]-n[0][1]),a=-i*n[0][0],u=(r-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([a,u])}),n)}$_.prototype={constructor:$_,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var G_=16,Z_=jv(30*Ov),J_=function(t,e){return+e?function(t,e){function n(r,i,a,u,o,s,l,c,f,h,d,p,g,m){var v=l-r,y=c-i,b=v*v+y*y;if(b>4*e&&g--){var _=u+h,x=o+d,w=s+p,A=Rv(_*_+x*x+w*w),O=Pv(w/=A),M=Mv(Mv(w)-1)<vv||Mv(a-f)<vv?(a+f)/2:Ev(x,_),k=t(M,O),E=k[0],j=k[1],D=E-r,C=j-i,F=y*D-v*C;(F*F/b>e||Mv((v*D+y*C)/b-.5)>.3||u*h+o*d+s*p<Z_)&&(n(r,i,a,u,o,s,E,j,M,_/=A,x/=A,w,g,m),m.point(E,j),n(E,j,M,_,x,w,l,c,f,h,d,p,g,m))}}return function(e){var r,i,a,u,o,s,l,c,f,h,d,p,g={point:m,lineStart:v,lineEnd:b,polygonStart:function(){e.polygonStart(),g.lineStart=_},polygonEnd:function(){e.polygonEnd(),g.lineStart=v}};function m(n,r){n=t(n,r),e.point(n[0],n[1])}function v(){c=NaN,g.point=y,e.lineStart()}function y(r,i){var a=ay([r,i]),u=t(r,i);n(c,f,l,h,d,p,c=u[0],f=u[1],l=r,h=a[0],d=a[1],p=a[2],G_,e),e.point(c,f)}function b(){g.point=m,e.lineEnd()}function _(){v(),g.point=x,g.lineEnd=w}function x(t,e){y(r=t,e),i=c,a=f,u=h,o=d,s=p,g.point=y}function w(){n(c,f,l,h,d,p,i,a,r,u,o,s,G_,e),g.lineEnd=b,b()}return g}}(t,e):function(t){return I_({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)};var Q_=I_({point:function(t,e){this.stream.point(t*Ov,e*Ov)}});function K_(t,e,n){function r(r,i){return[e+t*r,n-t*i]}return r.invert=function(r,i){return[(r-e)/t,(n-i)/t]},r}function tx(t,e,n,r){var i=jv(r),a=Bv(r),u=i*t,o=a*t,s=i/t,l=a/t,c=(a*n-i*e)/t,f=(a*e+i*n)/t;function h(t,r){return[u*t-o*r+e,n-o*t-u*r]}return h.invert=function(t,e){return[s*t-l*e+c,f-l*t-s*e]},h}function ex(t){return nx((function(){return t}))()}function nx(t){var e,n,r,i,a,u,o,s,l,c,f=150,h=480,d=250,p=0,g=0,m=0,v=0,y=0,b=0,_=null,x=Fb,w=null,A=Yb,O=.5;function M(t){return s(t[0]*Ov,t[1]*Ov)}function k(t){return(t=s.invert(t[0],t[1]))&&[t[0]*Av,t[1]*Av]}function E(){var t=tx(f,0,0,b).apply(null,e(p,g)),r=(b?tx:K_)(f,h-t[0],d-t[1],b);return n=sb(m,v,y),o=ub(e,r),s=ub(n,o),u=J_(o,O),j()}function j(){return l=c=null,M}return M.stream=function(t){return l&&c===t?l:l=Q_(function(t){return I_({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(x(u(A(c=t)))))},M.preclip=function(t){return arguments.length?(x=t,_=void 0,j()):x},M.postclip=function(t){return arguments.length?(A=t,w=r=i=a=null,j()):A},M.clipAngle=function(t){return arguments.length?(x=+t?Sb(_=t*Ov):(_=null,Fb),j()):_*Av},M.clipExtent=function(t){return arguments.length?(A=null==t?(w=r=i=a=null,Yb):zb(w=+t[0][0],r=+t[0][1],i=+t[1][0],a=+t[1][1]),j()):null==w?null:[[w,r],[i,a]]},M.scale=function(t){return arguments.length?(f=+t,E()):f},M.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],E()):[h,d]},M.center=function(t){return arguments.length?(p=t[0]%360*Ov,g=t[1]%360*Ov,E()):[p*Av,g*Av]},M.rotate=function(t){return arguments.length?(m=t[0]%360*Ov,v=t[1]%360*Ov,y=t.length>2?t[2]%360*Ov:0,E()):[m*Av,v*Av,y*Av]},M.angle=function(t){return arguments.length?(b=t%360*Ov,E()):b*Av},M.precision=function(t){return arguments.length?(u=J_(o,O=t*t),j()):Rv(O)},M.fitExtent=function(t,e){return W_(M,t,e)},M.fitSize=function(t,e){return V_(M,t,e)},M.fitWidth=function(t,e){return H_(M,t,e)},M.fitHeight=function(t,e){return X_(M,t,e)},function(){return e=t.apply(this,arguments),M.invert=e.invert&&k,E()}}function rx(t){var e=0,n=bv/3,r=nx(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*Ov,n=t[1]*Ov):[e*Av,n*Av]},i}function ix(t,e){var n=Bv(t),r=(n+Bv(e))/2;if(Mv(r)<vv)return function(t){var e=jv(t);function n(t,n){return[t*e,Bv(n)/e]}return n.invert=function(t,n){return[t/e,Pv(n*e)]},n}(t);var i=1+n*(2*r-n),a=Rv(i)/r;function u(t,e){var n=Rv(i-2*r*Bv(e))/r;return[n*Bv(t*=r),a-n*jv(t)]}return u.invert=function(t,e){var n=a-e;return[Ev(t,Mv(n))/r*Tv(n),Pv((i-(t*t+n*n)*r*r)/(2*r))]},u}var ax=function(){return rx(ix).scale(155.424).center([0,33.6442])},ux=function(){return ax().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};function ox(t){return function(e,n){var r=jv(e),i=jv(n),a=t(r*i);return[a*i*Bv(e),a*Bv(n)]}}function sx(t){return function(e,n){var r=Rv(e*e+n*n),i=t(r),a=Bv(i),u=jv(i);return[Ev(e*a,r*u),Pv(r&&n*a/r)]}}var lx=ox((function(t){return Rv(2/(1+t))}));lx.invert=sx((function(t){return 2*Pv(t/2)}));var cx=ox((function(t){return(t=Nv(t))&&t/Bv(t)}));cx.invert=sx((function(t){return t}));function fx(t,e){return[t,Fv(zv((_v+e)/2))]}fx.invert=function(t,e){return[t,2*kv(Cv(e))-_v]};function hx(t){var e,n,r,i=ex(t),a=i.center,u=i.scale,o=i.translate,s=i.clipExtent,l=null;function c(){var a=bv*u(),o=i(hb(i.rotate()).invert([0,0]));return s(null==l?[[o[0]-a,o[1]-a],[o[0]+a,o[1]+a]]:t===fx?[[Math.max(o[0]-a,l),e],[Math.min(o[0]+a,n),r]]:[[l,Math.max(o[1]-a,e)],[n,Math.min(o[1]+a,r)]])}return i.scale=function(t){return arguments.length?(u(t),c()):u()},i.translate=function(t){return arguments.length?(o(t),c()):o()},i.center=function(t){return arguments.length?(a(t),c()):a()},i.clipExtent=function(t){return arguments.length?(null==t?l=e=n=r=null:(l=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),c()):null==l?null:[[l,e],[n,r]]},c()}function dx(t){return zv((_v+t)/2)}function px(t,e){var n=jv(t),r=t===e?Bv(t):Fv(n/jv(e))/Fv(dx(e)/dx(t)),i=n*Sv(dx(t),r)/r;if(!r)return fx;function a(t,e){i>0?e<-_v+vv&&(e=-_v+vv):e>_v-vv&&(e=_v-vv);var n=i/Sv(dx(e),r);return[n*Bv(r*t),i-n*jv(r*t)]}return a.invert=function(t,e){var n=i-e,a=Tv(r)*Rv(t*t+n*n);return[Ev(t,Mv(n))/r*Tv(n),2*kv(Sv(i/a,1/r))-_v]},a}function gx(t,e){return[t,e]}gx.invert=gx;function mx(t,e){var n=jv(t),r=t===e?Bv(t):(n-jv(e))/(e-t),i=n/r+t;if(Mv(r)<vv)return gx;function a(t,e){var n=i-e,a=r*t;return[n*Bv(a),i-n*jv(a)]}return a.invert=function(t,e){var n=i-e;return[Ev(t,Mv(n))/r*Tv(n),i-Tv(r)*Rv(t*t+n*n)]},a}var vx=1.340264,yx=-.081106,bx=893e-6,_x=.003796,xx=Rv(3)/2;function wx(t,e){var n=Pv(xx*Bv(e)),r=n*n,i=r*r*r;return[t*jv(n)/(xx*(vx+3*yx*r+i*(7*bx+9*_x*r))),n*(vx+yx*r+i*(bx+_x*r))]}wx.invert=function(t,e){for(var n,r=e,i=r*r,a=i*i*i,u=0;u<12&&(a=(i=(r-=n=(r*(vx+yx*i+a*(bx+_x*i))-e)/(vx+3*yx*i+a*(7*bx+9*_x*i)))*r)*i*i,!(Mv(n)<yv));++u);return[xx*t*(vx+3*yx*i+a*(7*bx+9*_x*i))/jv(r),Pv(Bv(r)/xx)]};function Ax(t,e){var n=jv(e),r=jv(t)*n;return[n*Bv(t)/r,Bv(e)/r]}Ax.invert=sx(kv);function Ox(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?Yb:I_({point:function(i,a){this.stream.point(i*t+n,a*e+r)}})}function Mx(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Mx.invert=function(t,e){var n,r=e,i=25;do{var a=r*r,u=a*a;r-=n=(r*(1.007226+a*(.015085+u*(.028874*a-.044475-.005916*u)))-e)/(1.007226+a*(.045255+u*(.259866*a-.311325-.005916*11*u)))}while(Mv(n)>vv&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function kx(t,e){return[jv(e)*Bv(t),Bv(e)]}kx.invert=sx(Pv);function Ex(t,e){var n=jv(e),r=1+jv(t)*n;return[n*Bv(t)/r,Bv(e)/r]}Ex.invert=sx((function(t){return 2*kv(t)}));function jx(t,e){return[Fv(zv((_v+e)/2)),-t]}jx.invert=function(t,e){return[-e,2*kv(Cv(t))-_v]};var Dx=q_(),Cx=["clipAngle","clipExtent","scale","translate","center","rotate","parallels","precision","reflectX","reflectY","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"];function Fx(t,e){if(!t||"string"!=typeof t)throw new Error("Projection type must be a name string.");return t=t.toLowerCase(),arguments.length>1?(Bx[t]=function(t,e){return function n(){var r=e();return r.type=t,r.path=q_().projection(r),r.copy=r.copy||function(){var t=n();return Cx.forEach((function(e){r[e]&&t[e](r[e]())})),t.path.pointRadius(r.path.pointRadius()),t},r}}(t,e),this):Bx[t]||null}function Sx(t){return t&&t.path||Dx}var Bx={albers:ux,albersusa:function(){var t,e,n,r,i,a,u=ux(),o=ax().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=ax().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(t,e){a=[t,e]}};function c(t){var e=t[0],u=t[1];return a=null,n.point(e,u),a||(r.point(e,u),a)||(i.point(e,u),a)}function f(){return t=e=null,c}return c.invert=function(t){var e=u.scale(),n=u.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?o:i>=.166&&i<.234&&r>=-.214&&r<-.115?s:u).invert(t)},c.stream=function(n){return t&&e===n?t:(r=[u.stream(e=n),o.stream(n),s.stream(n)],i=r.length,t={point:function(t,e){for(var n=-1;++n<i;)r[n].point(t,e)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},c.precision=function(t){return arguments.length?(u.precision(t),o.precision(t),s.precision(t),f()):u.precision()},c.scale=function(t){return arguments.length?(u.scale(t),o.scale(.35*t),s.scale(t),c.translate(u.translate())):u.scale()},c.translate=function(t){if(!arguments.length)return u.translate();var e=u.scale(),a=+t[0],c=+t[1];return n=u.translate(t).clipExtent([[a-.455*e,c-.238*e],[a+.455*e,c+.238*e]]).stream(l),r=o.translate([a-.307*e,c+.201*e]).clipExtent([[a-.425*e+vv,c+.12*e+vv],[a-.214*e-vv,c+.234*e-vv]]).stream(l),i=s.translate([a-.205*e,c+.212*e]).clipExtent([[a-.214*e+vv,c+.166*e+vv],[a-.115*e-vv,c+.234*e-vv]]).stream(l),f()},c.fitExtent=function(t,e){return W_(c,t,e)},c.fitSize=function(t,e){return V_(c,t,e)},c.fitWidth=function(t,e){return H_(c,t,e)},c.fitHeight=function(t,e){return X_(c,t,e)},c.scale(1070)},azimuthalequalarea:function(){return ex(lx).scale(124.75).clipAngle(179.999)},azimuthalequidistant:function(){return ex(cx).scale(79.4188).clipAngle(179.999)},conicconformal:function(){return rx(px).scale(109.5).parallels([30,30])},conicequalarea:ax,conicequidistant:function(){return rx(mx).scale(131.154).center([0,13.9389])},equalEarth:function(){return ex(wx).scale(177.158)},equirectangular:function(){return ex(gx).scale(152.63)},gnomonic:function(){return ex(Ax).scale(144.049).clipAngle(60)},identity:function(){var t,e,n,r,i,a,u=1,o=0,s=0,l=1,c=1,f=Yb,h=null,d=Yb;function p(){return r=i=null,a}return a={stream:function(t){return r&&i===t?r:r=f(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=e=n=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=e=n=null,Yb):zb(h=+r[0][0],t=+r[0][1],e=+r[1][0],n=+r[1][1]),p()):null==h?null:[[h,t],[e,n]]},scale:function(t){return arguments.length?(f=Ox((u=+t)*l,u*c,o,s),p()):u},translate:function(t){return arguments.length?(f=Ox(u*l,u*c,o=+t[0],s=+t[1]),p()):[o,s]},reflectX:function(t){return arguments.length?(f=Ox(u*(l=t?-1:1),u*c,o,s),p()):l<0},reflectY:function(t){return arguments.length?(f=Ox(u*l,u*(c=t?-1:1),o,s),p()):c<0},fitExtent:function(t,e){return W_(a,t,e)},fitSize:function(t,e){return V_(a,t,e)},fitWidth:function(t,e){return H_(a,t,e)},fitHeight:function(t,e){return X_(a,t,e)}}},mercator:function(){return hx(fx).scale(961/wv)},naturalEarth1:function(){return ex(Mx).scale(175.295)},orthographic:function(){return ex(kx).scale(249.5).clipAngle(90+vv)},stereographic:function(){return ex(Ex).scale(250).clipAngle(142)},transversemercator:function(){var t=hx(jx),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)}};for(var Tx in Bx)Fx(Tx,Bx[Tx]);function Rx(t){Wn.call(this,null,t)}function zx(t){Wn.call(this,null,t)}function Nx(t){Wn.call(this,null,t)}function Px(t){Wn.call(this,[],t),this.generator=Lb()}function Lx(t){Wn.call(this,null,t),this.modified(!0)}function Ux(t,e,n){Object(p.B)(t[e])&&t[e](n)}Rx.Definition={type:"GeoPath",metadata:{modifies:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field"},{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string",default:"path"}]},Object(p.w)(Rx,Wn).transform=function(t,e){var n=e.fork(e.ALL),r=this.value,i=t.field||p.v,a=t.as||"path",u=n.SOURCE;!r||t.modified()?(this.value=r=Sx(t.projection),n.materialize().reflow()):u=i===p.v||e.modified(i.fields)?n.ADD_MOD:n.ADD;var o=function(t,e){var n=t.pointRadius();t.context(null),null!=e&&t.pointRadius(e);return n}(r,t.pointRadius);return n.visit(u,(function(t){t[a]=r(i(t))})),r.pointRadius(o),n.modifies(a)},zx.Definition={type:"GeoPoint",metadata:{modifies:!0},params:[{name:"projection",type:"projection",required:!0},{name:"fields",type:"field",array:!0,required:!0,length:2},{name:"as",type:"string",array:!0,length:2,default:["x","y"]}]},Object(p.w)(zx,Wn).transform=function(t,e){var n,r=t.projection,i=t.fields[0],a=t.fields[1],u=t.as||["x","y"],o=u[0],s=u[1];function l(t){var e=r([i(t),a(t)]);e?(t[o]=e[0],t[s]=e[1]):(t[o]=void 0,t[s]=void 0)}return t.modified()?e=e.materialize().reflow(!0).visit(e.SOURCE,l):(n=e.modified(i.fields)||e.modified(a.fields),e.visit(n?e.ADD_MOD:e.ADD,l)),e.modifies(u)},Nx.Definition={type:"GeoShape",metadata:{modifies:!0,nomod:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field",default:"datum"},{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string",default:"shape"}]},Object(p.w)(Nx,Wn).transform=function(t,e){var n=e.fork(e.ALL),r=this.value,i=t.as||"shape",a=n.ADD;return r&&!t.modified()||(this.value=r=function(t,e,n){var r=null==n?function(n){return t(e(n))}:function(r){var i=t.pointRadius(),a=t.pointRadius(n)(e(r));return t.pointRadius(i),a};return r.context=function(e){return t.context(e),r},r}(Sx(t.projection),t.field||Object(p.r)("datum"),t.pointRadius),n.materialize().reflow(),a=n.SOURCE),n.visit(a,(function(t){t[i]=r})),n.modifies(i)},Px.Definition={type:"Graticule",metadata:{changes:!0,generates:!0},params:[{name:"extent",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMajor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMinor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"step",type:"number",array:!0,length:2},{name:"stepMajor",type:"number",array:!0,length:2,default:[90,360]},{name:"stepMinor",type:"number",array:!0,length:2,default:[10,10]},{name:"precision",type:"number",default:2.5}]},Object(p.w)(Px,Wn).transform=function(t,e){var n,r=this.value,i=this.generator;if(!r.length||t.modified())for(var a in t)Object(p.B)(i[a])&&i[a](t[a]);return n=i(),r.length?e.mod.push(M(r[0],n)):e.add.push(w(n)),r[0]=n,e},Object(p.w)(Lx,Wn).transform=function(t,e){var n=this.value;return!n||t.modified("type")?(this.value=n=function(t){var e=Fx((t||"mercator").toLowerCase());e||Object(p.l)("Unrecognized projection type: "+t);return e()}(t.type),Cx.forEach((function(e){null!=t[e]&&Ux(n,e,t[e])}))):Cx.forEach((function(e){t.modified(e)&&Ux(n,e,t[e])})),null!=t.pointRadius&&n.path.pointRadius(t.pointRadius),t.fit&&function(t,e){var n=function(t){return 1===(t=Object(p.g)(t)).length?t[0]:{type:fv,features:t.reduce((t,e)=>t.concat(function(t){return t.type===fv?t.features:Object(p.g)(t).filter(t=>null!=t).map(t=>t.type===cv?t:{type:cv,geometry:t})}(e)),[])}}(e.fit);e.extent?t.fitExtent(e.extent,n):e.size&&t.fitSize(e.size,n)}(n,t),e.fork(e.NO_SOURCE|e.NO_FIELDS)};function qx(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,a,u,o,s,l,c,f,h,d=t._root,p={data:r},g=t._x0,m=t._y0,v=t._x1,y=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((l=e>=(a=(g+v)/2))?g=a:v=a,(c=n>=(u=(m+y)/2))?m=u:y=u,i=d,!(d=d[f=c<<1|l]))return i[f]=p,t;if(o=+t._x.call(null,d.data),s=+t._y.call(null,d.data),e===o&&n===s)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=e>=(a=(g+v)/2))?g=a:v=a,(c=n>=(u=(m+y)/2))?m=u:y=u}while((f=c<<1|l)==(h=(s>=u)<<1|o>=a));return i[h]=d,i[f]=p,t}var Ix=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function $x(t){return t[0]}function Yx(t){return t[1]}function Wx(t,e,n){var r=new Vx(null==e?$x:e,null==n?Yx:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Vx(t,e,n,r,i,a){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function Hx(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Xx=Wx.prototype=Vx.prototype;Xx.copy=function(){var t,e,n=new Vx(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Hx(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Hx(e));return n},Xx.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return qx(this.cover(e,n),e,n,t)},Xx.addAll=function(t){var e,n,r,i,a=t.length,u=new Array(a),o=new Array(a),s=1/0,l=1/0,c=-1/0,f=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(u[n]=r,o[n]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));if(s>c||l>f)return this;for(this.cover(s,l).cover(c,f),n=0;n<a;++n)qx(this,u[n],o[n],t[n]);return this},Xx.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,a=(r=Math.floor(e))+1;else{for(var u,o,s=i-n,l=this._root;n>t||t>=i||r>e||e>=a;)switch(o=(e<r)<<1|t<n,(u=new Array(4))[o]=l,l=u,s*=2,o){case 0:i=n+s,a=r+s;break;case 1:n=i-s,a=r+s;break;case 2:i=n+s,r=a-s;break;case 3:n=i-s,r=a-s}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},Xx.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Xx.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Xx.find=function(t,e,n){var r,i,a,u,o,s,l,c=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new Ix(g,c,f,h,d)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,d=e+n,n*=n);s=p.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(a=s.y0)>d||(u=s.x1)<c||(o=s.y1)<f))if(g.length){var m=(i+u)/2,v=(a+o)/2;p.push(new Ix(g[3],m,v,u,o),new Ix(g[2],i,v,m,o),new Ix(g[1],m,a,u,v),new Ix(g[0],i,a,m,v)),(l=(e>=v)<<1|t>=m)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-l],p[p.length-1-l]=s)}else{var y=t-+this._x.call(null,g.data),b=e-+this._y.call(null,g.data),_=y*y+b*b;if(_<n){var x=Math.sqrt(n=_);c=t-x,f=e-x,h=t+x,d=e+x,r=g.data}}return r},Xx.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var e,n,r,i,a,u,o,s,l,c,f,h,d=this._root,p=this._x0,g=this._y0,m=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((l=a>=(o=(p+m)/2))?p=o:m=o,(c=u>=(s=(g+v)/2))?g=s:v=s,e=d,!(d=d[f=c<<1|l]))return this;if(!d.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[h]=d:this._root=d),this):(this._root=i,this)},Xx.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Xx.root=function(){return this._root},Xx.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Xx.visit=function(t){var e,n,r,i,a,u,o=[],s=this._root;for(s&&o.push(new Ix(s,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(s=e.node,r=e.x0,i=e.y0,a=e.x1,u=e.y1)&&s.length){var l=(r+a)/2,c=(i+u)/2;(n=s[3])&&o.push(new Ix(n,l,c,a,u)),(n=s[2])&&o.push(new Ix(n,r,c,l,u)),(n=s[1])&&o.push(new Ix(n,l,i,a,c)),(n=s[0])&&o.push(new Ix(n,r,i,l,c))}return this},Xx.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Ix(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var a,u=e.x0,o=e.y0,s=e.x1,l=e.y1,c=(u+s)/2,f=(o+l)/2;(a=i[0])&&n.push(new Ix(a,u,o,c,f)),(a=i[1])&&n.push(new Ix(a,c,o,s,f)),(a=i[2])&&n.push(new Ix(a,u,f,c,l)),(a=i[3])&&n.push(new Ix(a,c,f,s,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Xx.x=function(t){return arguments.length?(this._x=t,this):this._x},Xx.y=function(t){return arguments.length?(this._y=t,this):this._y};var Gx=function(t){return function(){return t}},Zx=function(){return 1e-6*(Math.random()-.5)};function Jx(t){return t.x+t.vx}function Qx(t){return t.y+t.vy}function Kx(t){return t.index}function tw(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var ew={value:function(){}};function nw(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new rw(r)}function rw(t){this._=t}function iw(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function aw(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function uw(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=ew,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}rw.prototype=nw.prototype={constructor:rw,on:function(t,e){var n,r=this._,i=iw(t+"",r),a=-1,u=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<u;)if(n=(t=i[a]).type)r[n]=uw(r[n],t.name,e);else if(null==e)for(n in r)r[n]=uw(r[n],t.name,null);return this}for(;++a<u;)if((n=(t=i[a]).type)&&(n=aw(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new rw(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var ow,sw,lw=nw,cw=0,fw=0,hw=0,dw=1e3,pw=0,gw=0,mw=0,vw="object"==typeof performance&&performance.now?performance:Date,yw="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function bw(){return gw||(yw(_w),gw=vw.now()+mw)}function _w(){gw=0}function xw(){this._call=this._time=this._next=null}function ww(t,e,n){var r=new xw;return r.restart(t,e,n),r}function Aw(){gw=(pw=vw.now())+mw,cw=fw=0;try{!function(){bw(),++cw;for(var t,e=ow;e;)(t=gw-e._time)>=0&&e._call.call(null,t),e=e._next;--cw}()}finally{cw=0,function(){var t,e,n=ow,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:ow=e);sw=t,Mw(r)}(),gw=0}}function Ow(){var t=vw.now(),e=t-pw;e>dw&&(mw-=e,pw=t)}function Mw(t){cw||(fw&&(fw=clearTimeout(fw)),t-gw>24?(t<1/0&&(fw=setTimeout(Aw,t-vw.now()-mw)),hw&&(hw=clearInterval(hw))):(hw||(pw=vw.now(),hw=setInterval(Ow,dw)),cw=1,yw(Aw)))}xw.prototype=ww.prototype={constructor:xw,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?bw():+n)+(null==e?0:+e),this._next||sw===this||(sw?sw._next=this:ow=this,sw=this),this._call=t,this._time=n,Mw()},stop:function(){this._call&&(this._call=null,this._time=1/0,Mw())}};function kw(t){return t.x}function Ew(t){return t.y}var jw=10,Dw=Math.PI*(3-Math.sqrt(5)),Cw=function(t){var e,n=1,r=.001,i=1-Math.pow(r,1/300),a=0,u=.6,o=new Map,s=ww(c),l=lw("tick","end");function c(){f(),l.call("tick",e),n<r&&(s.stop(),l.call("end",e))}function f(r){var s,l,c=t.length;void 0===r&&(r=1);for(var f=0;f<r;++f)for(n+=(a-n)*i,o.forEach((function(t){t(n)})),s=0;s<c;++s)null==(l=t[s]).fx?l.x+=l.vx*=u:(l.x=l.fx,l.vx=0),null==l.fy?l.y+=l.vy*=u:(l.y=l.fy,l.vy=0);return e}function h(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var i=jw*Math.sqrt(n),a=n*Dw;e.x=i*Math.cos(a),e.y=i*Math.sin(a)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function d(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),h(),e={tick:f,restart:function(){return s.restart(c),e},stop:function(){return s.stop(),e},nodes:function(n){return arguments.length?(t=n,h(),o.forEach(d),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(i=+t,e):+i},alphaTarget:function(t){return arguments.length?(a=+t,e):a},velocityDecay:function(t){return arguments.length?(u=1-t,e):1-u},force:function(t,n){return arguments.length>1?(null==n?o.delete(t):o.set(t,d(n)),e):o.get(t)},find:function(e,n,r){var i,a,u,o,s,l=0,c=t.length;for(null==r?r=1/0:r*=r,l=0;l<c;++l)(u=(i=e-(o=t[l]).x)*i+(a=n-o.y)*a)<r&&(s=o,r=u);return s},on:function(t,n){return arguments.length>1?(l.on(t,n),e):l.on(t)}}},Fw={center:function(t,e){var n;function r(){var r,i,a=n.length,u=0,o=0;for(r=0;r<a;++r)u+=(i=n[r]).x,o+=i.y;for(u=u/a-t,o=o/a-e,r=0;r<a;++r)(i=n[r]).x-=u,i.y-=o}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},collide:function(t){var e,n,r=1,i=1;function a(){for(var t,a,o,s,l,c,f,h=e.length,d=0;d<i;++d)for(a=Wx(e,Jx,Qx).visitAfter(u),t=0;t<h;++t)o=e[t],c=n[o.index],f=c*c,s=o.x+o.vx,l=o.y+o.vy,a.visit(p);function p(t,e,n,i,a){var u=t.data,h=t.r,d=c+h;if(!u)return e>s+d||i<s-d||n>l+d||a<l-d;if(u.index>o.index){var p=s-u.x-u.vx,g=l-u.y-u.vy,m=p*p+g*g;m<d*d&&(0===p&&(m+=(p=Zx())*p),0===g&&(m+=(g=Zx())*g),m=(d-(m=Math.sqrt(m)))/m*r,o.vx+=(p*=m)*(d=(h*=h)/(f+h)),o.vy+=(g*=m)*d,u.vx-=p*(d=1-d),u.vy-=g*d)}}}function u(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function o(){if(e){var r,i,a=e.length;for(n=new Array(a),r=0;r<a;++r)i=e[r],n[i.index]=+t(i,r,e)}}return"function"!=typeof t&&(t=Gx(null==t?1:+t)),a.initialize=function(t){e=t,o()},a.iterations=function(t){return arguments.length?(i=+t,a):i},a.strength=function(t){return arguments.length?(r=+t,a):r},a.radius=function(e){return arguments.length?(t="function"==typeof e?e:Gx(+e),o(),a):t},a},nbody:function(){var t,e,n,r,i=Gx(-30),a=1,u=1/0,o=.81;function s(r){var i,a=t.length,u=Wx(t,kw,Ew).visitAfter(c);for(n=r,i=0;i<a;++i)e=t[i],u.visit(f)}function l(){if(t){var e,n,a=t.length;for(r=new Array(a),e=0;e<a;++e)n=t[e],r[n.index]=+i(n,e,t)}}function c(t){var e,n,i,a,u,o=0,s=0;if(t.length){for(i=a=u=0;u<4;++u)(e=t[u])&&(n=Math.abs(e.value))&&(o+=e.value,s+=n,i+=n*e.x,a+=n*e.y);t.x=i/s,t.y=a/s}else{(e=t).x=e.data.x,e.y=e.data.y;do{o+=r[e.data.index]}while(e=e.next)}t.value=o}function f(t,i,s,l){if(!t.value)return!0;var c=t.x-e.x,f=t.y-e.y,h=l-i,d=c*c+f*f;if(h*h/o<d)return d<u&&(0===c&&(d+=(c=Zx())*c),0===f&&(d+=(f=Zx())*f),d<a&&(d=Math.sqrt(a*d)),e.vx+=c*t.value*n/d,e.vy+=f*t.value*n/d),!0;if(!(t.length||d>=u)){(t.data!==e||t.next)&&(0===c&&(d+=(c=Zx())*c),0===f&&(d+=(f=Zx())*f),d<a&&(d=Math.sqrt(a*d)));do{t.data!==e&&(h=r[t.data.index]*n/d,e.vx+=c*h,e.vy+=f*h)}while(t=t.next)}}return s.initialize=function(e){t=e,l()},s.strength=function(t){return arguments.length?(i="function"==typeof t?t:Gx(+t),l(),s):i},s.distanceMin=function(t){return arguments.length?(a=t*t,s):Math.sqrt(a)},s.distanceMax=function(t){return arguments.length?(u=t*t,s):Math.sqrt(u)},s.theta=function(t){return arguments.length?(o=t*t,s):Math.sqrt(o)},s},link:function(t){var e,n,r,i,a,u=Kx,o=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},s=Gx(30),l=1;function c(r){for(var i=0,u=t.length;i<l;++i)for(var o,s,c,f,h,d,p,g=0;g<u;++g)s=(o=t[g]).source,f=(c=o.target).x+c.vx-s.x-s.vx||Zx(),h=c.y+c.vy-s.y-s.vy||Zx(),f*=d=((d=Math.sqrt(f*f+h*h))-n[g])/d*r*e[g],h*=d,c.vx-=f*(p=a[g]),c.vy-=h*p,s.vx+=f*(p=1-p),s.vy+=h*p}function f(){if(r){var o,s,l=r.length,c=t.length,f=new Map(r.map((t,e)=>[u(t,e,r),t]));for(o=0,i=new Array(l);o<c;++o)(s=t[o]).index=o,"object"!=typeof s.source&&(s.source=tw(f,s.source)),"object"!=typeof s.target&&(s.target=tw(f,s.target)),i[s.source.index]=(i[s.source.index]||0)+1,i[s.target.index]=(i[s.target.index]||0)+1;for(o=0,a=new Array(c);o<c;++o)s=t[o],a[o]=i[s.source.index]/(i[s.source.index]+i[s.target.index]);e=new Array(c),h(),n=new Array(c),d()}}function h(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+o(t[n],n,t)}function d(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+s(t[e],e,t)}return null==t&&(t=[]),c.initialize=function(t){r=t,f()},c.links=function(e){return arguments.length?(t=e,f(),c):t},c.id=function(t){return arguments.length?(u=t,c):u},c.iterations=function(t){return arguments.length?(l=+t,c):l},c.strength=function(t){return arguments.length?(o="function"==typeof t?t:Gx(+t),h(),c):o},c.distance=function(t){return arguments.length?(s="function"==typeof t?t:Gx(+t),d(),c):s},c},x:function(t){var e,n,r,i=Gx(.1);function a(t){for(var i,a=0,u=e.length;a<u;++a)(i=e[a]).vx+=(r[a]-i.x)*n[a]*t}function u(){if(e){var a,u=e.length;for(n=new Array(u),r=new Array(u),a=0;a<u;++a)n[a]=isNaN(r[a]=+t(e[a],a,e))?0:+i(e[a],a,e)}}return"function"!=typeof t&&(t=Gx(null==t?0:+t)),a.initialize=function(t){e=t,u()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:Gx(+t),u(),a):i},a.x=function(e){return arguments.length?(t="function"==typeof e?e:Gx(+e),u(),a):t},a},y:function(t){var e,n,r,i=Gx(.1);function a(t){for(var i,a=0,u=e.length;a<u;++a)(i=e[a]).vy+=(r[a]-i.y)*n[a]*t}function u(){if(e){var a,u=e.length;for(n=new Array(u),r=new Array(u),a=0;a<u;++a)n[a]=isNaN(r[a]=+t(e[a],a,e))?0:+i(e[a],a,e)}}return"function"!=typeof t&&(t=Gx(null==t?0:+t)),a.initialize=function(t){e=t,u()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:Gx(+t),u(),a):i},a.y=function(e){return arguments.length?(t="function"==typeof e?e:Gx(+e),u(),a):t},a}},Sw="forces",Bw=["alpha","alphaMin","alphaTarget","velocityDecay","forces"],Tw=["static","iterations"],Rw=["x","y","vx","vy"];function zw(t){Wn.call(this,null,t)}zw.Definition={type:"Force",metadata:{modifies:!0},params:[{name:"static",type:"boolean",default:!1},{name:"restart",type:"boolean",default:!1},{name:"iterations",type:"number",default:300},{name:"alpha",type:"number",default:1},{name:"alphaMin",type:"number",default:.001},{name:"alphaTarget",type:"number",default:0},{name:"velocityDecay",type:"number",default:.4},{name:"forces",type:"param",array:!0,params:[{key:{force:"center"},params:[{name:"x",type:"number",default:0},{name:"y",type:"number",default:0}]},{key:{force:"collide"},params:[{name:"radius",type:"number",expr:!0},{name:"strength",type:"number",default:.7},{name:"iterations",type:"number",default:1}]},{key:{force:"nbody"},params:[{name:"strength",type:"number",default:-30},{name:"theta",type:"number",default:.9},{name:"distanceMin",type:"number",default:1},{name:"distanceMax",type:"number"}]},{key:{force:"link"},params:[{name:"links",type:"data"},{name:"id",type:"field"},{name:"distance",type:"number",default:30,expr:!0},{name:"strength",type:"number",expr:!0},{name:"iterations",type:"number",default:1}]},{key:{force:"x"},params:[{name:"strength",type:"number",default:.1},{name:"x",type:"field"}]},{key:{force:"y"},params:[{name:"strength",type:"number",default:.1},{name:"y",type:"field"}]}]},{name:"as",type:"string",array:!0,modify:!1,default:Rw}]};var Nw=Object(p.w)(zw,Wn);function Pw(t,e,n,r){var i,a,u,o,s=Object(p.g)(e.forces);for(i=0,a=Bw.length;i<a;++i)(u=Bw[i])!==Sw&&e.modified(u)&&t[u](e[u]);for(i=0,a=s.length;i<a;++i)o=Sw+i,(u=n||e.modified(Sw,i)?Uw(s[i]):r&&Lw(s[i],r)?t.force(o):null)&&t.force(o,u);for(a=t.numForces||0;i<a;++i)t.force(Sw+i,null);return t.numForces=s.length,t}function Lw(t,e){var n,r;for(n in t)if(Object(p.B)(r=t[n])&&e.modified(Object(p.e)(r)))return 1;return 0}function Uw(t){var e,n;for(n in Object(p.t)(Fw,t.force)||Object(p.l)("Unrecognized force: "+t.force),e=Fw[t.force](),t)Object(p.B)(e[n])&&qw(e[n],t[n],t);return e}function qw(t,e,n){t(Object(p.B)(e)?function(t){return e(t,n)}:e)}Nw.transform=function(t,e){var n,r,i=this.value,a=e.changed(e.ADD_REM),u=t.modified(Bw),o=t.iterations||300;if(i?(a&&(e.modifies("index"),i.nodes(e.source)),(u||e.changed(e.MOD))&&Pw(i,t,0,e)):(this.value=i=function(t,e){var n=Cw(t),r=!1,i=n.stop,a=n.restart;return n.stopped=function(){return r},n.restart=function(){return r=!1,a()},n.stop=function(){return r=!0,i()},Pw(n,e,!0).on("end",(function(){r=!0}))}(e.source,t),i.on("tick",(n=e.dataflow,r=this,function(){n.touch(r).run()})),t.static||(a=!0,i.tick()),e.modifies("index")),u||a||t.modified(Tw)||e.changed()&&t.restart)if(i.alpha(Math.max(i.alpha(),t.alpha||1)).alphaDecay(1-Math.pow(i.alphaMin(),1/o)),t.static)for(i.stop();--o>=0;)i.tick();else if(i.stopped()&&i.restart(),!a)return e.StopPropagation;return this.finish(t,e)},Nw.finish=function(t,e){for(var n,r=e.dataflow,i=this._argops,a=0,u=i.length;a<u;++a)if((n=i[a]).name===Sw&&"link"===n.op._argval.force)for(var o,s=n.op._argops,l=0,c=s.length;l<c;++l)if("links"===s[l].name&&(o=s[l].op.source)){r.pulse(o,r.changeset().reflow());break}return e.reflow(t.modified()).modifies(Rw)};var Iw=function(t,e,n){var r={};return t.each((function(t){var i=t.data;n(i)&&(r[e(i)]=t)})),t.lookup=r,t};function $w(t,e){return t.parent===e.parent?1:2}function Yw(t,e){return t+e.x}function Ww(t,e){return Math.max(t,e.y)}function Vw(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Hw(t,e){var n,r,i,a,u,o=new Jw(t),s=+t.value&&(o.value=t.value),l=[o];for(null==e&&(e=Xw);n=l.pop();)if(s&&(n.value=+n.data.value),(i=e(n.data))&&(u=i.length))for(n.children=new Array(u),a=u-1;a>=0;--a)l.push(r=n.children[a]=new Jw(i[a])),r.parent=n,r.depth=n.depth+1;return o.eachBefore(Zw)}function Xw(t){return t.children}function Gw(t){t.data=t.data.data}function Zw(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Jw(t){this.data=t,this.depth=this.height=0,this.parent=null}Jw.prototype=Hw.prototype={constructor:Jw,count:function(){return this.eachAfter(Vw)},each:function(t){var e,n,r,i,a=this,u=[a];do{for(e=u.reverse(),u=[];a=e.pop();)if(t(a),n=a.children)for(r=0,i=n.length;r<i;++r)u.push(n[r])}while(u.length);return this},eachAfter:function(t){for(var e,n,r,i=this,a=[i],u=[];i=a.pop();)if(u.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)a.push(e[n]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Hw(this).eachBefore(Gw)}};var Qw=Array.prototype.slice;var Kw=function(t){for(var e,n,r=0,i=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(Qw.call(t))).length,a=[];r<i;)e=t[r],n&&nA(n,e)?++r:(n=iA(a=tA(a,e)),r=0);return n};function tA(t,e){var n,r;if(rA(e,t))return[e];for(n=0;n<t.length;++n)if(eA(e,t[n])&&rA(aA(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(eA(aA(t[n],t[r]),e)&&eA(aA(t[n],e),t[r])&&eA(aA(t[r],e),t[n])&&rA(uA(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function eA(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function nA(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function rA(t,e){for(var n=0;n<e.length;++n)if(!nA(t,e[n]))return!1;return!0}function iA(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return aA(t[0],t[1]);case 3:return uA(t[0],t[1],t[2])}var e}function aA(t,e){var n=t.x,r=t.y,i=t.r,a=e.x,u=e.y,o=e.r,s=a-n,l=u-r,c=o-i,f=Math.sqrt(s*s+l*l);return{x:(n+a+s/f*c)/2,y:(r+u+l/f*c)/2,r:(f+i+o)/2}}function uA(t,e,n){var r=t.x,i=t.y,a=t.r,u=e.x,o=e.y,s=e.r,l=n.x,c=n.y,f=n.r,h=r-u,d=r-l,p=i-o,g=i-c,m=s-a,v=f-a,y=r*r+i*i-a*a,b=y-u*u-o*o+s*s,_=y-l*l-c*c+f*f,x=d*p-h*g,w=(p*_-g*b)/(2*x)-r,A=(g*m-p*v)/x,O=(d*b-h*_)/(2*x)-i,M=(h*v-d*m)/x,k=A*A+M*M-1,E=2*(a+w*A+O*M),j=w*w+O*O-a*a,D=-(k?(E+Math.sqrt(E*E-4*k*j))/(2*k):j/E);return{x:r+w+A*D,y:i+O+M*D,r:D}}function oA(t,e,n){var r,i,a,u,o=t.x-e.x,s=t.y-e.y,l=o*o+s*s;l?(i=e.r+n.r,i*=i,u=t.r+n.r,i>(u*=u)?(r=(l+u-i)/(2*l),a=Math.sqrt(Math.max(0,u/l-r*r)),n.x=t.x-r*o-a*s,n.y=t.y-r*s+a*o):(r=(l+i-u)/(2*l),a=Math.sqrt(Math.max(0,i/l-r*r)),n.x=e.x+r*o-a*s,n.y=e.y+r*s+a*o)):(n.x=e.x+n.r,n.y=e.y)}function sA(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function lA(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,a=(e.y*n.r+n.y*e.r)/r;return i*i+a*a}function cA(t){this._=t,this.next=null,this.previous=null}function fA(t){if(!(i=t.length))return 0;var e,n,r,i,a,u,o,s,l,c,f;if((e=t[0]).x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;oA(n,e,r=t[2]),e=new cA(e),n=new cA(n),r=new cA(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(o=3;o<i;++o){oA(e._,n._,r=t[o]),r=new cA(r),s=n.next,l=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(sA(s._,r._)){n=s,e.next=n,n.previous=e,--o;continue t}c+=s._.r,s=s.next}else{if(sA(l._,r._)){(e=l).next=n,n.previous=e,--o;continue t}f+=l._.r,l=l.previous}}while(s!==l.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,a=lA(e);(r=r.next)!==n;)(u=lA(r))<a&&(e=r,a=u);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=Kw(e),o=0;o<i;++o)(e=t[o]).x-=r.x,e.y-=r.y;return r.r}function hA(t){return null==t?null:dA(t)}function dA(t){if("function"!=typeof t)throw new Error;return t}function pA(){return 0}var gA=function(t){return function(){return t}};function mA(t){return Math.sqrt(t.value)}function vA(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function yA(t,e){return function(n){if(r=n.children){var r,i,a,u=r.length,o=t(n)*e||0;if(o)for(i=0;i<u;++i)r[i].r+=o;if(a=fA(r),o)for(i=0;i<u;++i)r[i].r-=o;n.r=a+o}}}function bA(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var _A=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},xA=function(t,e,n,r,i){for(var a,u=t.children,o=-1,s=u.length,l=t.value&&(r-e)/t.value;++o<s;)(a=u[o]).y0=n,a.y1=i,a.x0=e,a.x1=e+=a.value*l},wA="$",AA={depth:-1},OA={};function MA(t){return t.id}function kA(t){return t.parentId}var EA=function(){var t=MA,e=kA;function n(n){var r,i,a,u,o,s,l,c=n.length,f=new Array(c),h={};for(i=0;i<c;++i)r=n[i],o=f[i]=new Jw(r),null!=(s=t(r,i,n))&&(s+="")&&(h[l=wA+(o.id=s)]=l in h?OA:o);for(i=0;i<c;++i)if(o=f[i],null!=(s=e(n[i],i,n))&&(s+="")){if(!(u=h[wA+s]))throw new Error("missing: "+s);if(u===OA)throw new Error("ambiguous: "+s);u.children?u.children.push(o):u.children=[o],o.parent=u}else{if(a)throw new Error("multiple roots");a=o}if(!a)throw new Error("no root");if(a.parent=AA,a.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(Zw),a.parent=null,c>0)throw new Error("cycle");return a}return n.id=function(e){return arguments.length?(t=dA(e),n):t},n.parentId=function(t){return arguments.length?(e=dA(t),n):e},n};function jA(t,e){return t.parent===e.parent?1:2}function DA(t){var e=t.children;return e?e[0]:t.t}function CA(t){var e=t.children;return e?e[e.length-1]:t.t}function FA(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function SA(t,e,n){return t.a.parent===e.parent?t.a:n}function BA(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}BA.prototype=Object.create(Jw.prototype);var TA=function(t,e,n,r,i){for(var a,u=t.children,o=-1,s=u.length,l=t.value&&(i-n)/t.value;++o<s;)(a=u[o]).x0=e,a.x1=r,a.y0=n,a.y1=n+=a.value*l},RA=(1+Math.sqrt(5))/2;function zA(t,e,n,r,i,a){for(var u,o,s,l,c,f,h,d,p,g,m,v=[],y=e.children,b=0,_=0,x=y.length,w=e.value;b<x;){s=i-n,l=a-r;do{c=y[_++].value}while(!c&&_<x);for(f=h=c,m=c*c*(g=Math.max(l/s,s/l)/(w*t)),p=Math.max(h/m,m/f);_<x;++_){if(c+=o=y[_].value,o<f&&(f=o),o>h&&(h=o),m=c*c*g,(d=Math.max(h/m,m/f))>p){c-=o;break}p=d}v.push(u={value:c,dice:s<l,children:y.slice(b,_)}),u.dice?xA(u,n,r,i,w?r+=l*c/w:a):TA(u,n,r,w?n+=s*c/w:i,a),w-=c,b=_}return v}var NA=function t(e){function n(t,n,r,i,a){zA(e,t,n,r,i,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(RA),PA=function t(e){function n(t,n,r,i,a){if((u=t._squarify)&&u.ratio===e)for(var u,o,s,l,c,f=-1,h=u.length,d=t.value;++f<h;){for(s=(o=u[f]).children,l=o.value=0,c=s.length;l<c;++l)o.value+=s[l].value;o.dice?xA(o,n,r,i,r+=(a-r)*o.value/d):TA(o,n,r,n+=(i-n)*o.value/d,a),d-=o.value}else t._squarify=u=zA(e,t,n,r,i,a),u.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(RA);function LA(t){Wn.call(this,null,t)}function UA(t){return t.values}function qA(){var t,e=[];return t={entries:t=>(function t(n,r){if(++r>e.length)return n;var i,a=[];for(i in n)a.push({key:i,values:t(n[i],r)});return a})(function t(n,r){if(r>=e.length)return n;for(var i,a,u,o=-1,s=n.length,l=e[r++],c={},f={};++o<s;)(u=c[i=l(a=n[o])+""])?u.push(a):c[i]=[a];for(i in c)f[i]=t(c[i],r);return f}(t,0),0),key:n=>(e.push(n),t)}}function IA(t){Wn.call(this,null,t)}function $A(t,e){return t.parent===e.parent?1:2}LA.Definition={type:"Nest",metadata:{treesource:!0,changes:!0},params:[{name:"keys",type:"field",array:!0},{name:"generate",type:"boolean"}]},Object(p.w)(LA,Wn).transform=function(t,e){e.source||Object(p.l)("Nest transform requires an upstream data source.");var n=t.generate,r=t.modified(),i=e.clone(),a=this.value;return(!a||r||e.changed())&&(a&&a.each(t=>{t.children&&b(t.data)&&i.rem.push(t.data)}),this.value=a=Hw({values:Object(p.g)(t.keys).reduce((t,e)=>(t.key(e),t),qA()).entries(i.source)},UA),n&&a.each(t=>{t.children&&(t=w(t.data),i.add.push(t),i.source.push(t))}),Iw(a,_,_)),i.source.root=a,i},Object(p.w)(IA,Wn).transform=function(t,e){e.source&&e.source.root||Object(p.l)(this.constructor.name+" transform requires a backing tree data source.");var n=this.layout(t.method),r=this.fields,i=e.source.root,a=t.as||r;t.field?i.sum(t.field):i.count(),t.sort&&i.sort(k(t.sort,t=>t.data)),function(t,e,n){for(var r,i=0,a=e.length;i<a;++i)(r=e[i])in n&&t[r](n[r])}(n,this.params,t),n.separation&&n.separation(!1!==t.separation?$A:p.L);try{this.value=n(i)}catch(t){Object(p.l)(t)}return i.each((function(t){!function(t,e,n){for(var r=t.data,i=0,a=e.length-1;i<a;++i)r[n[i]]=t[e[i]];r[n[a]]=t.children?t.children.length:0}(t,r,a)})),e.reflow(t.modified()).modifies(a).modifies("leaf")};var YA=["x","y","r","depth","children"];function WA(t){IA.call(this,t)}WA.Definition={type:"Pack",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"radius",type:"field",default:null},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:YA.length,default:YA}]};var VA=Object(p.w)(WA,IA);VA.layout=function(){var t=null,e=1,n=1,r=pA;function i(i){return i.x=e/2,i.y=n/2,t?i.eachBefore(vA(t)).eachAfter(yA(r,.5)).eachBefore(bA(1)):i.eachBefore(vA(mA)).eachAfter(yA(pA,1)).eachAfter(yA(r,i.r/Math.min(e,n))).eachBefore(bA(Math.min(e,n)/(2*i.r))),i}return i.radius=function(e){return arguments.length?(t=hA(e),i):t},i.size=function(t){return arguments.length?(e=+t[0],n=+t[1],i):[e,n]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:gA(+t),i):r},i},VA.params=["radius","size","padding"],VA.fields=YA;var HA=["x0","y0","x1","y1","depth","children"];function XA(t){IA.call(this,t)}XA.Definition={type:"Partition",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:HA.length,default:HA}]};var GA=Object(p.w)(XA,IA);function ZA(t){Wn.call(this,null,t)}GA.layout=function(){var t=1,e=1,n=0,r=!1;function i(i){var a=i.height+1;return i.x0=i.y0=n,i.x1=t,i.y1=e/a,i.eachBefore(function(t,e){return function(r){r.children&&xA(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var i=r.x0,a=r.y0,u=r.x1-n,o=r.y1-n;u<i&&(i=u=(i+u)/2),o<a&&(a=o=(a+o)/2),r.x0=i,r.y0=a,r.x1=u,r.y1=o}}(e,a)),r&&i.eachBefore(_A),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(n){return arguments.length?(t=+n[0],e=+n[1],i):[t,e]},i.padding=function(t){return arguments.length?(n=+t,i):n},i},GA.params=["size","round","padding"],GA.fields=HA,ZA.Definition={type:"Stratify",metadata:{treesource:!0},params:[{name:"key",type:"field",required:!0},{name:"parentKey",type:"field",required:!0}]},Object(p.w)(ZA,Wn).transform=function(t,e){e.source||Object(p.l)("Stratify transform requires an upstream data source.");var n=this.value,r=t.modified(),i=e.fork(e.ALL).materialize(e.SOURCE),a=!this.value||r||e.changed(e.ADD_REM)||e.modified(t.key.fields)||e.modified(t.parentKey.fields);return i.source=i.source.slice(),a&&(n=i.source.length?Iw(EA().id(t.key).parentId(t.parentKey)(i.source),t.key,p.cb):Iw(EA()([{}]),t.key,t.key)),i.source.root=this.value=n,i};var JA={tidy:function(){var t=jA,e=1,n=1,r=null;function i(i){var s=function(t){for(var e,n,r,i,a,u=new BA(t,0),o=[u];e=o.pop();)if(r=e._.children)for(e.children=new Array(a=r.length),i=a-1;i>=0;--i)o.push(n=e.children[i]=new BA(r[i],i)),n.parent=e;return(u.parent=new BA(null,0)).children=[u],u}(i);if(s.eachAfter(a),s.parent.m=-s.z,s.eachBefore(u),r)i.eachBefore(o);else{var l=i,c=i,f=i;i.eachBefore((function(t){t.x<l.x&&(l=t),t.x>c.x&&(c=t),t.depth>f.depth&&(f=t)}));var h=l===c?1:t(l,c)/2,d=h-l.x,p=e/(c.x+h+d),g=n/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*g}))}return i}function a(e){var n=e.children,r=e.parent.children,i=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,i=t.children,a=i.length;--a>=0;)(e=i[a]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var a=(n[0].z+n[n.length-1].z)/2;i?(e.z=i.z+t(e._,i._),e.m=e.z-a):e.z=a}else i&&(e.z=i.z+t(e._,i._));e.parent.A=function(e,n,r){if(n){for(var i,a=e,u=e,o=n,s=a.parent.children[0],l=a.m,c=u.m,f=o.m,h=s.m;o=CA(o),a=DA(a),o&&a;)s=DA(s),(u=CA(u)).a=e,(i=o.z+f-a.z-l+t(o._,a._))>0&&(FA(SA(o,e,r),e,i),l+=i,c+=i),f+=o.m,l+=a.m,h+=s.m,c+=u.m;o&&!CA(u)&&(u.t=o,u.m+=f-c),a&&!DA(s)&&(s.t=a,s.m+=l-h,r=e)}return r}(e,i,e.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function o(t){t.x*=e,t.y=t.depth*n}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i},cluster:function(){var t=$w,e=1,n=1,r=!1;function i(i){var a,u=0;i.eachAfter((function(e){var n=e.children;n?(e.x=function(t){return t.reduce(Yw,0)/t.length}(n),e.y=function(t){return 1+t.reduce(Ww,0)}(n)):(e.x=a?u+=t(e,a):0,e.y=0,a=e)}));var o=function(t){for(var e;e=t.children;)t=e[0];return t}(i),s=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(i),l=o.x-t(o,s)/2,c=s.x+t(s,o)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*e,t.y=(i.y-t.y)*n}:function(t){t.x=(t.x-l)/(c-l)*e,t.y=(1-(i.y?t.y/i.y:1))*n})}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i}},QA=["x","y","depth","children"];function KA(t){IA.call(this,t)}KA.Definition={type:"Tree",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"tidy",values:["tidy","cluster"]},{name:"size",type:"number",array:!0,length:2},{name:"nodeSize",type:"number",array:!0,length:2},{name:"separation",type:"boolean",default:!0},{name:"as",type:"string",array:!0,length:QA.length,default:QA}]};var tO=Object(p.w)(KA,IA);function eO(t){Wn.call(this,[],t)}tO.layout=function(t){var e=t||"tidy";if(Object(p.t)(JA,e))return JA[e]();Object(p.l)("Unrecognized Tree layout method: "+e)},tO.params=["size","nodeSize"],tO.fields=QA,eO.Definition={type:"TreeLinks",metadata:{tree:!0,generates:!0,changes:!0},params:[]},Object(p.w)(eO,Wn).transform=function(t,e){var n=this.value,r=e.source&&e.source.root,i=e.fork(e.NO_SOURCE),a={};return r||Object(p.l)("TreeLinks transform requires a tree data source."),e.changed(e.ADD_REM)?(i.rem=n,e.visit(e.SOURCE,(function(t){a[_(t)]=1})),r.each((function(t){var e=t.data,n=t.parent&&t.parent.data;n&&a[_(e)]&&a[_(n)]&&i.add.push(w({source:n,target:e}))})),this.value=i.add):e.changed(e.MOD)&&(e.visit(e.MOD,(function(t){a[_(t)]=1})),n.forEach((function(t){(a[_(t.source)]||a[_(t.target)])&&i.mod.push(t)}))),i};var nO={binary:function(t,e,n,r,i){var a,u,o=t.children,s=o.length,l=new Array(s+1);for(l[0]=u=a=0;a<s;++a)l[a+1]=u+=o[a].value;!function t(e,n,r,i,a,u,s){if(e>=n-1){var c=o[e];return c.x0=i,c.y0=a,c.x1=u,void(c.y1=s)}var f=l[e],h=r/2+f,d=e+1,p=n-1;for(;d<p;){var g=d+p>>>1;l[g]<h?d=g+1:p=g}h-l[d-1]<l[d]-h&&e+1<d&&--d;var m=l[d]-f,v=r-m;if(u-i>s-a){var y=(i*v+u*m)/r;t(e,d,m,i,a,y,s),t(d,n,v,y,a,u,s)}else{var b=(a*v+s*m)/r;t(e,d,m,i,a,u,b),t(d,n,v,i,b,u,s)}}(0,s,t.value,e,n,r,i)},dice:xA,slice:TA,slicedice:function(t,e,n,r,i){(1&t.depth?TA:xA)(t,e,n,r,i)},squarify:NA,resquarify:PA},rO=["x0","y0","x1","y1","depth","children"];function iO(t){IA.call(this,t)}iO.Definition={type:"Treemap",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"squarify",values:["squarify","resquarify","binary","dice","slice","slicedice"]},{name:"padding",type:"number",default:0},{name:"paddingInner",type:"number",default:0},{name:"paddingOuter",type:"number",default:0},{name:"paddingTop",type:"number",default:0},{name:"paddingRight",type:"number",default:0},{name:"paddingBottom",type:"number",default:0},{name:"paddingLeft",type:"number",default:0},{name:"ratio",type:"number",default:1.618033988749895},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:rO.length,default:rO}]};var aO=Object(p.w)(iO,IA);aO.layout=function(){var t=function(){var t=NA,e=!1,n=1,r=1,i=[0],a=pA,u=pA,o=pA,s=pA,l=pA;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(_A),t}function f(e){var n=i[e.depth],r=e.x0+n,c=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<c&&(c=h=(c+h)/2),e.x0=r,e.y0=c,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=a(e)/2,r+=l(e)-n,c+=u(e)-n,(f-=o(e)-n)<r&&(r=f=(r+f)/2),(h-=s(e)-n)<c&&(c=h=(c+h)/2),t(e,r,c,f,h))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=dA(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(a="function"==typeof t?t:gA(+t),c):a},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:gA(+t),c):u},c.paddingRight=function(t){return arguments.length?(o="function"==typeof t?t:gA(+t),c):o},c.paddingBottom=function(t){return arguments.length?(s="function"==typeof t?t:gA(+t),c):s},c.paddingLeft=function(t){return arguments.length?(l="function"==typeof t?t:gA(+t),c):l},c}();return t.ratio=function(e){var n=t.tile();n.ratio&&t.tile(n.ratio(e))},t.method=function(e){Object(p.t)(nO,e)?t.tile(nO[e]):Object(p.l)("Unrecognized Treemap layout method: "+e)},t},aO.params=["method","ratio","size","round","padding","paddingInner","paddingOuter","paddingTop","paddingRight","paddingBottom","paddingLeft"],aO.fields=rO;var uO=function(t,e){var n,r,i,a,u,o,s=[],l=function(t){return t(a)};if(null==e)s.push(t);else for(n={},r=0,i=t.length;r<i;++r)a=t[r],(o=n[u=e.map(l)])||(n[u]=o=[],o.dims=u,s.push(o)),o.push(a);return s};function oO(t){Wn.call(this,null,t)}oO.Definition={type:"Loess",metadata:{generates:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"bandwidth",type:"number",default:.3},{name:"as",type:"string",array:!0}]},Object(p.w)(oO,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const r=e.materialize(e.SOURCE).source,i=uO(r,t.groupby),a=(t.groupby||[]).map(p.f),u=a.length,o=t.as||[Object(p.f)(t.x),Object(p.f)(t.y)],s=[];i.forEach(e=>{(function(t,e,n,r){const[i,a]=Sr(t,e,n,!0),u=i.length,o=Math.max(2,~~(r*u)),s=new Float64Array(u),l=new Float64Array(u),c=new Float64Array(u).fill(1);for(let t=-1;++t<=2;){const e=[0,o-1];for(let t=0;t<u;++t){const n=i[t],r=e[0],u=e[1],o=n-i[r]>i[u]-n?r:u;let f=0,h=0,d=0,p=0,g=0,m=1/Math.abs(i[o]-n||1);for(let t=r;t<=u;++t){const e=i[t],r=a[t],u=Ur(Math.abs(n-e)*m)*c[t],o=e*u;f+=u,h+=o,d+=r*u,p+=r*o,g+=e*o}const[v,y]=Fr(h/f,d/f,p/f,g/f);s[t]=v+y*n,l[t]=Math.abs(a[t]-s[t]),qr(i,t+1,e)}if(2===t)break;const n=Lr(l);if(Math.abs(n)<1e-12)break;for(let t,e,r=0;r<u;++r)t=l[r]/(6*n),c[r]=t>=1?1e-12:(e=1-t*t)*e}return function(t,e){const n=t.length,r=[];for(let i,a=0,u=0,o=[];a<n;++a)i=t[a],o[0]===i?o[1]+=(e[a]-o[1])/++u:(u=0,o=[i,e[a]],r.push(o));return r}(i,s)})(e,t.x,t.y,t.bandwidth||.3).forEach(t=>{const n={};for(let t=0;t<u;++t)n[a[t]]=e.dims[t];n[o[0]]=t[0],n[o[1]]=t[1],s.push(w(n))})}),this.value&&(n.rem=this.value),this.value=n.add=n.source=s}return n};const sO={linear:Rr,log:function(t,e,n){let r=0,i=0,a=0,u=0,o=0;Br(t,e,n,(t,e)=>{t=Math.log(t),r+=t,i+=e,a+=t*e,u+=t*t,++o});const s=Fr(r/o,i/o,a/o,u/o),l=t=>s[0]+s[1]*Math.log(t);return{coef:s,predict:l,rSquared:Tr(t,e,n,i/o,l)}},exp:function(t,e,n){let r=0,i=0,a=0,u=0,o=0,s=0;Br(t,e,n,(t,e)=>{const n=Math.log(e),l=t*e;r+=e,a+=l,o+=t*l,i+=e*n,u+=l*n,++s});const l=Fr(a/r,i/r,u/r,o/r),c=t=>l[0]*Math.exp(l[1]*t);return l[0]=Math.exp(l[0]),{coef:l,predict:c,rSquared:Tr(t,e,n,r/s,c)}},pow:function(t,e,n){let r=0,i=0,a=0,u=0,o=0,s=0;Br(t,e,n,(t,e)=>{const n=Math.log(t),l=Math.log(e);r+=n,i+=l,a+=n*l,u+=n*n,o+=e,++s});const l=Fr(r/s,i/s,a/s,u/s),c=t=>l[0]*Math.pow(t,l[1]);return l[0]=Math.exp(l[0]),{coef:l,predict:c,rSquared:Tr(t,e,n,o/s,c)}},quad:zr,poly:function(t,e,n,r){if(1===r)return Rr(t,e,n);if(2===r)return zr(t,e,n);const[i,a]=Sr(t,e,n),u=i.length,o=[],s=[],l=r+1;let c,f,h,d,p,g=0;for(c=0;c<u;++c)g+=a[c];for(c=0;c<l;++c){for(h=0,d=0;h<u;++h)d+=Math.pow(i[h],c)*a[h];for(o.push(d),p=new Float64Array(l),f=0;f<l;++f){for(h=0,d=0;h<u;++h)d+=Math.pow(i[h],c+f);p[f]=d}s.push(p)}s.push(o);const m=function(t){const e=t.length-1,n=[];let r,i,a,u,o;for(r=0;r<e;++r){for(u=r,i=r+1;i<e;++i)Math.abs(t[r][i])>Math.abs(t[r][u])&&(u=i);for(a=r;a<e+1;++a)o=t[a][r],t[a][r]=t[a][u],t[a][u]=o;for(i=r+1;i<e;++i)for(a=e;a>=r;a--)t[a][i]-=t[a][r]*t[r][i]/t[r][r]}for(i=e-1;i>=0;--i){for(o=0,a=i+1;a<e;++a)o+=t[a][i]*n[a];n[i]=(t[e][i]-o)/t[i][i]}return n}(s),v=t=>{let e=0,n=0,r=m.length;for(;n<r;++n)e+=m[n]*Math.pow(t,n);return e};return{coef:m,predict:v,rSquared:Tr(t,e,n,g/u,v)}}};function lO(t){Wn.call(this,null,t)}lO.Definition={type:"Regression",metadata:{generates:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"method",type:"string",default:"linear",values:Object.keys(sO)},{name:"order",type:"number",default:3},{name:"extent",type:"number",array:!0,length:2},{name:"params",type:"boolean",default:!1},{name:"as",type:"string",array:!0}]},Object(p.w)(lO,Wn).transform=function(t,e){var n=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const r=e.materialize(e.SOURCE).source,i=uO(r,t.groupby),a=(t.groupby||[]).map(p.f),u=t.method||"linear",o=t.order||3,s=function(t,e){return"poly"===t?e:"quad"===t?2:1}(u,o),l=t.as||[Object(p.f)(t.x),Object(p.f)(t.y)],c=sO[u],f=[];let h=t.extent;Object(p.t)(sO,u)||Object(p.l)("Invalid regression method: "+u),null!=h&&"log"===u&&h[0]<=0&&(e.dataflow.warn("Ignoring extent with values <= 0 for log regression."),h=null),i.forEach(n=>{if(n.length<=s)return void e.dataflow.warn("Skipping regression with more parameters than data points.");const r=c(n,t.x,t.y,o);if(t.params)return void f.push(w({keys:n.dims,coef:r.coef,rSquared:r.rSquared}));const i=h||Object(p.n)(n,t.x),d=t=>{const e={};for(let t=0;t<a.length;++t)e[a[t]]=n.dims[t];e[l[0]]=t[0],e[l[1]]=t[1],f.push(w(e))};"linear"===u?i.forEach(t=>d([t,r.predict(t)])):$r(r.predict,i,25,200).forEach(d)}),this.value&&(n.rem=this.value),this.value=n.add=n.source=f}return n};const cO=Math.pow(2,-52),fO=new Uint32Array(512);class hO{static from(t,e=_O,n=xO){const r=t.length,i=new Float64Array(2*r);for(let a=0;a<r;a++){const r=t[a];i[2*a]=e(r),i[2*a+1]=n(r)}return new hO(i)}constructor(t){const e=t.length>>1;if(e>0&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const n=Math.max(2*e-5,0);this._triangles=new Uint32Array(3*n),this._halfedges=new Int32Array(3*n),this._hashSize=Math.ceil(Math.sqrt(e)),this._hullPrev=new Uint32Array(e),this._hullNext=new Uint32Array(e),this._hullTri=new Uint32Array(e),this._hullHash=new Int32Array(this._hashSize).fill(-1),this._ids=new Uint32Array(e),this._dists=new Float64Array(e),this.update()}update(){const{coords:t,_hullPrev:e,_hullNext:n,_hullTri:r,_hullHash:i}=this,a=t.length>>1;let u=1/0,o=1/0,s=-1/0,l=-1/0;for(let e=0;e<a;e++){const n=t[2*e],r=t[2*e+1];n<u&&(u=n),r<o&&(o=r),n>s&&(s=n),r>l&&(l=r),this._ids[e]=e}const c=(u+s)/2,f=(o+l)/2;let h,d,p,g=1/0;for(let e=0;e<a;e++){const n=dO(c,f,t[2*e],t[2*e+1]);n<g&&(h=e,g=n)}const m=t[2*h],v=t[2*h+1];g=1/0;for(let e=0;e<a;e++){if(e===h)continue;const n=dO(m,v,t[2*e],t[2*e+1]);n<g&&n>0&&(d=e,g=n)}let y=t[2*d],b=t[2*d+1],_=1/0;for(let e=0;e<a;e++){if(e===h||e===d)continue;const n=vO(m,v,y,b,t[2*e],t[2*e+1]);n<_&&(p=e,_=n)}let x=t[2*p],w=t[2*p+1];if(_===1/0){for(let e=0;e<a;e++)this._dists[e]=t[2*e]-t[0]||t[2*e+1]-t[1];yO(this._ids,this._dists,0,a-1);const e=new Uint32Array(a);let n=0;for(let t=0,r=-1/0;t<a;t++){const i=this._ids[t];this._dists[i]>r&&(e[n++]=i,r=this._dists[i])}return this.hull=e.subarray(0,n),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(gO(m,v,y,b,x,w)){const t=d,e=y,n=b;d=p,y=x,b=w,p=t,x=e,w=n}const A=function(t,e,n,r,i,a){const u=n-t,o=r-e,s=i-t,l=a-e,c=u*u+o*o,f=s*s+l*l,h=.5/(u*l-o*s);return{x:t+(l*c-o*f)*h,y:e+(u*f-s*c)*h}}(m,v,y,b,x,w);this._cx=A.x,this._cy=A.y;for(let e=0;e<a;e++)this._dists[e]=dO(t[2*e],t[2*e+1],A.x,A.y);yO(this._ids,this._dists,0,a-1),this._hullStart=h;let O=3;n[h]=e[p]=d,n[d]=e[h]=p,n[p]=e[d]=h,r[h]=0,r[d]=1,r[p]=2,i.fill(-1),i[this._hashKey(m,v)]=h,i[this._hashKey(y,b)]=d,i[this._hashKey(x,w)]=p,this.trianglesLen=0,this._addTriangle(h,d,p,-1,-1,-1);for(let a,u,o=0;o<this._ids.length;o++){const s=this._ids[o],l=t[2*s],c=t[2*s+1];if(o>0&&Math.abs(l-a)<=cO&&Math.abs(c-u)<=cO)continue;if(a=l,u=c,s===h||s===d||s===p)continue;let f=0;for(let t=0,e=this._hashKey(l,c);t<this._hashSize&&(-1===(f=i[(e+t)%this._hashSize])||f===n[f]);t++);let g,m=f=e[f];for(;g=n[m],!gO(l,c,t[2*m],t[2*m+1],t[2*g],t[2*g+1]);)if((m=g)===f){m=-1;break}if(-1===m)continue;let v=this._addTriangle(m,s,n[m],-1,-1,r[m]);r[s]=this._legalize(v+2),r[m]=v,O++;let y=n[m];for(;g=n[y],gO(l,c,t[2*y],t[2*y+1],t[2*g],t[2*g+1]);)v=this._addTriangle(y,s,g,r[s],-1,r[y]),r[s]=this._legalize(v+2),n[y]=y,O--,y=g;if(m===f)for(;gO(l,c,t[2*(g=e[m])],t[2*g+1],t[2*m],t[2*m+1]);)v=this._addTriangle(g,s,m,-1,r[m],r[g]),this._legalize(v+2),r[g]=v,n[m]=m,O--,m=g;this._hullStart=e[s]=m,n[m]=e[y]=s,n[s]=y,i[this._hashKey(l,c)]=s,i[this._hashKey(t[2*m],t[2*m+1])]=m}this.hull=new Uint32Array(O);for(let t=0,e=this._hullStart;t<O;t++)this.hull[t]=e,e=n[e];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,e){return Math.floor(function(t,e){const n=t/(Math.abs(t)+Math.abs(e));return(e>0?3-n:1+n)/4}(t-this._cx,e-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:e,_halfedges:n,coords:r}=this;let i=0,a=0;for(;;){const u=n[t],o=t-t%3;if(a=o+(t+2)%3,-1===u){if(0===i)break;t=fO[--i];continue}const s=u-u%3,l=o+(t+1)%3,c=s+(u+2)%3,f=e[a],h=e[t],d=e[l],p=e[c];if(mO(r[2*f],r[2*f+1],r[2*h],r[2*h+1],r[2*d],r[2*d+1],r[2*p],r[2*p+1])){e[t]=p,e[u]=f;const r=n[c];if(-1===r){let e=this._hullStart;do{if(this._hullTri[e]===c){this._hullTri[e]=t;break}e=this._hullPrev[e]}while(e!==this._hullStart)}this._link(t,r),this._link(u,n[a]),this._link(a,c);const o=s+(u+1)%3;i<fO.length&&(fO[i++]=o)}else{if(0===i)break;t=fO[--i]}}return a}_link(t,e){this._halfedges[t]=e,-1!==e&&(this._halfedges[e]=t)}_addTriangle(t,e,n,r,i,a){const u=this.trianglesLen;return this._triangles[u]=t,this._triangles[u+1]=e,this._triangles[u+2]=n,this._link(u,r),this._link(u+1,i),this._link(u+2,a),this.trianglesLen+=3,u}}function dO(t,e,n,r){const i=t-n,a=e-r;return i*i+a*a}function pO(t,e,n,r,i,a){const u=(r-e)*(i-t),o=(n-t)*(a-e);return Math.abs(u-o)>=33306690738754716e-32*Math.abs(u+o)?u-o:0}function gO(t,e,n,r,i,a){return(pO(i,a,t,e,n,r)||pO(t,e,n,r,i,a)||pO(n,r,i,a,t,e))<0}function mO(t,e,n,r,i,a,u,o){const s=t-u,l=e-o,c=n-u,f=r-o,h=i-u,d=a-o,p=c*c+f*f,g=h*h+d*d;return s*(f*g-p*d)-l*(c*g-p*h)+(s*s+l*l)*(c*d-f*h)<0}function vO(t,e,n,r,i,a){const u=n-t,o=r-e,s=i-t,l=a-e,c=u*u+o*o,f=s*s+l*l,h=.5/(u*l-o*s),d=(l*c-o*f)*h,p=(u*f-s*c)*h;return d*d+p*p}function yO(t,e,n,r){if(r-n<=20)for(let i=n+1;i<=r;i++){const r=t[i],a=e[r];let u=i-1;for(;u>=n&&e[t[u]]>a;)t[u+1]=t[u--];t[u+1]=r}else{let i=n+1,a=r;bO(t,n+r>>1,i),e[t[n]]>e[t[r]]&&bO(t,n,r),e[t[i]]>e[t[r]]&&bO(t,i,r),e[t[n]]>e[t[i]]&&bO(t,n,i);const u=t[i],o=e[u];for(;;){do{i++}while(e[t[i]]<o);do{a--}while(e[t[a]]>o);if(a<i)break;bO(t,i,a)}t[n+1]=t[a],t[a]=u,r-i+1>=a-n?(yO(t,e,i,r),yO(t,e,n,a-1)):(yO(t,e,n,a-1),yO(t,e,i,r))}}function bO(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function _O(t){return t[0]}function xO(t){return t[1]}const wO=1e-6;class AO{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,e){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,e){this._+=`L${this._x1=+t},${this._y1=+e}`}arc(t,e,n){const r=(t=+t)+(n=+n),i=e=+e;if(n<0)throw new Error("negative radius");null===this._x1?this._+=`M${r},${i}`:(Math.abs(this._x1-r)>wO||Math.abs(this._y1-i)>wO)&&(this._+="L"+r+","+i),n&&(this._+=`A${n},${n},0,1,1,${t-n},${e}A${n},${n},0,1,1,${this._x1=r},${this._y1=i}`)}rect(t,e,n,r){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${+n}v${+r}h${-n}Z`}value(){return this._||null}}class OO{constructor(){this._=[]}moveTo(t,e){this._.push([t,e])}closePath(){this._.push(this._[0].slice())}lineTo(t,e){this._.push([t,e])}value(){return this._.length?this._:null}}class MO{constructor(t,[e,n,r,i]=[0,0,960,500]){if(!((r=+r)>=(e=+e)&&(i=+i)>=(n=+n)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(2*t.points.length),this.vectors=new Float64Array(2*t.points.length),this.xmax=r,this.xmin=e,this.ymax=i,this.ymin=n,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:e,triangles:n},vectors:r}=this,i=this.circumcenters=this._circumcenters.subarray(0,n.length/3*2);for(let e,r,a=0,u=0,o=n.length;a<o;a+=3,u+=2){const o=2*n[a],s=2*n[a+1],l=2*n[a+2],c=t[o],f=t[o+1],h=t[s],d=t[s+1],p=t[l],g=t[l+1],m=h-c,v=d-f,y=p-c,b=g-f,_=m*m+v*v,x=y*y+b*b,w=2*(m*b-v*y);if(w)if(Math.abs(w)<1e-8)e=(c+p)/2,r=(f+g)/2;else{const t=1/w;e=c+(b*_-v*x)*t,r=f+(m*x-y*_)*t}else e=(c+p)/2-1e8*b,r=(f+g)/2+1e8*y;i[u]=e,i[u+1]=r}let a,u,o,s=e[e.length-1],l=4*s,c=t[2*s],f=t[2*s+1];r.fill(0);for(let n=0;n<e.length;++n)a=l,u=c,o=f,l=4*(s=e[n]),c=t[2*s],f=t[2*s+1],r[a+2]=r[l]=o-f,r[a+3]=r[l+1]=c-u}render(t){const e=null==t?t=new AO:void 0,{delaunay:{halfedges:n,inedges:r,hull:i},circumcenters:a,vectors:u}=this;if(i.length<=1)return null;for(let e=0,r=n.length;e<r;++e){const r=n[e];if(r<e)continue;const i=2*Math.floor(e/3),u=2*Math.floor(r/3),o=a[i],s=a[i+1],l=a[u],c=a[u+1];this._renderSegment(o,s,l,c,t)}let o,s=i[i.length-1];for(let e=0;e<i.length;++e){o=s,s=i[e];const n=2*Math.floor(r[s]/3),l=a[n],c=a[n+1],f=4*o,h=this._project(l,c,u[f+2],u[f+3]);h&&this._renderSegment(l,c,h[0],h[1],t)}return e&&e.value()}renderBounds(t){const e=null==t?t=new AO:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),e&&e.value()}renderCell(t,e){const n=null==e?e=new AO:void 0,r=this._clip(t);if(null===r)return;e.moveTo(r[0],r[1]);let i=r.length;for(;r[0]===r[i-2]&&r[1]===r[i-1]&&i>1;)i-=2;for(let t=2;t<i;t+=2)r[t]===r[t-2]&&r[t+1]===r[t-1]||e.lineTo(r[t],r[t+1]);return e.closePath(),n&&n.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let e=0,n=t.length/2;e<n;++e){const t=this.cellPolygon(e);t&&(yield t)}}cellPolygon(t){const e=new OO;return this.renderCell(t,e),e.value()}_renderSegment(t,e,n,r,i){let a;const u=this._regioncode(t,e),o=this._regioncode(n,r);0===u&&0===o?(i.moveTo(t,e),i.lineTo(n,r)):(a=this._clipSegment(t,e,n,r,u,o))&&(i.moveTo(a[0],a[1]),i.lineTo(a[2],a[3]))}contains(t,e,n){return(e=+e)==e&&(n=+n)==n&&this.delaunay._step(t,e,n)===t}_cell(t){const{circumcenters:e,delaunay:{inedges:n,halfedges:r,triangles:i}}=this,a=n[t];if(-1===a)return null;const u=[];let o=a;do{const n=Math.floor(o/3);if(u.push(e[2*n],e[2*n+1]),i[o=o%3==2?o-2:o+1]!==t)break;o=r[o]}while(o!==a&&-1!==o);return u}_clip(t){if(0===t&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const e=this._cell(t);if(null===e)return null;const{vectors:n}=this,r=4*t;return n[r]||n[r+1]?this._clipInfinite(t,e,n[r],n[r+1],n[r+2],n[r+3]):this._clipFinite(t,e)}_clipFinite(t,e){const n=e.length;let r,i,a,u,o,s=null,l=e[n-2],c=e[n-1],f=this._regioncode(l,c);for(let h=0;h<n;h+=2)if(r=l,i=c,l=e[h],c=e[h+1],a=f,f=this._regioncode(l,c),0===a&&0===f)u=o,o=0,s?s.push(l,c):s=[l,c];else{let e,n,h,d,p;if(0===a){if(null===(e=this._clipSegment(r,i,l,c,a,f)))continue;[n,h,d,p]=e}else{if(null===(e=this._clipSegment(l,c,r,i,f,a)))continue;[d,p,n,h]=e,u=o,o=this._edgecode(n,h),u&&o&&this._edge(t,u,o,s,s.length),s?s.push(n,h):s=[n,h]}u=o,o=this._edgecode(d,p),u&&o&&this._edge(t,u,o,s,s.length),s?s.push(d,p):s=[d,p]}if(s)u=o,o=this._edgecode(s[0],s[1]),u&&o&&this._edge(t,u,o,s,s.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return s}_clipSegment(t,e,n,r,i,a){for(;;){if(0===i&&0===a)return[t,e,n,r];if(i&a)return null;let u,o,s=i||a;8&s?(u=t+(n-t)*(this.ymax-e)/(r-e),o=this.ymax):4&s?(u=t+(n-t)*(this.ymin-e)/(r-e),o=this.ymin):2&s?(o=e+(r-e)*(this.xmax-t)/(n-t),u=this.xmax):(o=e+(r-e)*(this.xmin-t)/(n-t),u=this.xmin),i?(t=u,e=o,i=this._regioncode(t,e)):(n=u,r=o,a=this._regioncode(n,r))}}_clipInfinite(t,e,n,r,i,a){let u,o=Array.from(e);if((u=this._project(o[0],o[1],n,r))&&o.unshift(u[0],u[1]),(u=this._project(o[o.length-2],o[o.length-1],i,a))&&o.push(u[0],u[1]),o=this._clipFinite(t,o))for(let e,n=0,r=o.length,i=this._edgecode(o[r-2],o[r-1]);n<r;n+=2)e=i,i=this._edgecode(o[n],o[n+1]),e&&i&&(n=this._edge(t,e,i,o,n),r=o.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(o=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return o}_edge(t,e,n,r,i){for(;e!==n;){let n,a;switch(e){case 5:e=4;continue;case 4:e=6,n=this.xmax,a=this.ymin;break;case 6:e=2;continue;case 2:e=10,n=this.xmax,a=this.ymax;break;case 10:e=8;continue;case 8:e=9,n=this.xmin,a=this.ymax;break;case 9:e=1;continue;case 1:e=5,n=this.xmin,a=this.ymin}r[i]===n&&r[i+1]===a||!this.contains(t,n,a)||(r.splice(i,0,n,a),i+=2)}if(r.length>4)for(let t=0;t<r.length;t+=2){const e=(t+2)%r.length,n=(t+4)%r.length;(r[t]===r[e]&&r[e]===r[n]||r[t+1]===r[e+1]&&r[e+1]===r[n+1])&&(r.splice(e,2),t-=2)}return i}_project(t,e,n,r){let i,a,u,o=1/0;if(r<0){if(e<=this.ymin)return null;(i=(this.ymin-e)/r)<o&&(u=this.ymin,a=t+(o=i)*n)}else if(r>0){if(e>=this.ymax)return null;(i=(this.ymax-e)/r)<o&&(u=this.ymax,a=t+(o=i)*n)}if(n>0){if(t>=this.xmax)return null;(i=(this.xmax-t)/n)<o&&(a=this.xmax,u=e+(o=i)*r)}else if(n<0){if(t<=this.xmin)return null;(i=(this.xmin-t)/n)<o&&(a=this.xmin,u=e+(o=i)*r)}return[a,u]}_edgecode(t,e){return(t===this.xmin?1:t===this.xmax?2:0)|(e===this.ymin?4:e===this.ymax?8:0)}_regioncode(t,e){return(t<this.xmin?1:t>this.xmax?2:0)|(e<this.ymin?4:e>this.ymax?8:0)}}const kO=2*Math.PI;function EO(t){return t[0]}function jO(t){return t[1]}function DO(t,e,n){return[t+Math.sin(t+e)*n,e+Math.cos(t-e)*n]}class CO{constructor(t){this._delaunator=new hO(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,e=this.points;if(t.hull&&t.hull.length>2&&function(t){const{triangles:e,coords:n}=t;for(let t=0;t<e.length;t+=3){const r=2*e[t],i=2*e[t+1],a=2*e[t+2];if((n[a]-n[r])*(n[i+1]-n[r+1])-(n[i]-n[r])*(n[a+1]-n[r+1])>1e-10)return!1}return!0}(t)){this.collinear=Int32Array.from({length:e.length/2},(t,e)=>e).sort((t,n)=>e[2*t]-e[2*n]||e[2*t+1]-e[2*n+1]);const t=this.collinear[0],n=this.collinear[this.collinear.length-1],r=[e[2*t],e[2*t+1],e[2*n],e[2*n+1]],i=1e-8*Math.sqrt((r[3]-r[1])**2+(r[2]-r[0])**2);for(let t=0,n=e.length/2;t<n;++t){const n=DO(e[2*t],e[2*t+1],i);e[2*t]=n[0],e[2*t+1]=n[1]}this._delaunator=new hO(e)}else delete this.collinear;const n=this.halfedges=this._delaunator.halfedges,r=this.hull=this._delaunator.hull,i=this.triangles=this._delaunator.triangles,a=this.inedges.fill(-1),u=this._hullIndex.fill(-1);for(let t=0,e=n.length;t<e;++t){const e=i[t%3==2?t-2:t+1];-1!==n[t]&&-1!==a[e]||(a[e]=t)}for(let t=0,e=r.length;t<e;++t)u[r[t]]=t;r.length<=2&&r.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=r[0],this.triangles[1]=r[1],this.triangles[2]=r[1],a[r[0]]=1,2===r.length&&(a[r[1]]=0))}voronoi(t){return new MO(this,t)}*neighbors(t){const{inedges:e,hull:n,_hullIndex:r,halfedges:i,triangles:a}=this;if(this.collinear){const e=this.collinear.indexOf(t);return e>0&&(yield this.collinear[e-1]),void(e<this.collinear.length-1&&(yield this.collinear[e+1]))}const u=e[t];if(-1===u)return;let o=u,s=-1;do{if(yield s=a[o],a[o=o%3==2?o-2:o+1]!==t)return;if(-1===(o=i[o])){const e=n[(r[t]+1)%n.length];return void(e!==s&&(yield e))}}while(o!==u)}find(t,e,n=0){if((t=+t)!=t||(e=+e)!=e)return-1;const r=n;let i;for(;(i=this._step(n,t,e))>=0&&i!==n&&i!==r;)n=i;return i}_step(t,e,n){const{inedges:r,hull:i,_hullIndex:a,halfedges:u,triangles:o,points:s}=this;if(-1===r[t]||!s.length)return(t+1)%(s.length>>1);let l=t,c=(e-s[2*t])**2+(n-s[2*t+1])**2;const f=r[t];let h=f;do{let r=o[h];const f=(e-s[2*r])**2+(n-s[2*r+1])**2;if(f<c&&(c=f,l=r),o[h=h%3==2?h-2:h+1]!==t)break;if(-1===(h=u[h])){if((h=i[(a[t]+1)%i.length])!==r&&(e-s[2*h])**2+(n-s[2*h+1])**2<c)return h;break}}while(h!==f);return l}render(t){const e=null==t?t=new AO:void 0,{points:n,halfedges:r,triangles:i}=this;for(let e=0,a=r.length;e<a;++e){const a=r[e];if(a<e)continue;const u=2*i[e],o=2*i[a];t.moveTo(n[u],n[u+1]),t.lineTo(n[o],n[o+1])}return this.renderHull(t),e&&e.value()}renderPoints(t,e=2){const n=null==t?t=new AO:void 0,{points:r}=this;for(let n=0,i=r.length;n<i;n+=2){const i=r[n],a=r[n+1];t.moveTo(i+e,a),t.arc(i,a,e,0,kO)}return n&&n.value()}renderHull(t){const e=null==t?t=new AO:void 0,{hull:n,points:r}=this,i=2*n[0],a=n.length;t.moveTo(r[i],r[i+1]);for(let e=1;e<a;++e){const i=2*n[e];t.lineTo(r[i],r[i+1])}return t.closePath(),e&&e.value()}hullPolygon(){const t=new OO;return this.renderHull(t),t.value()}renderTriangle(t,e){const n=null==e?e=new AO:void 0,{points:r,triangles:i}=this,a=2*i[t*=3],u=2*i[t+1],o=2*i[t+2];return e.moveTo(r[a],r[a+1]),e.lineTo(r[u],r[u+1]),e.lineTo(r[o],r[o+1]),e.closePath(),n&&n.value()}*trianglePolygons(){const{triangles:t}=this;for(let e=0,n=t.length/3;e<n;++e)yield this.trianglePolygon(e)}trianglePolygon(t){const e=new OO;return this.renderTriangle(t,e),e.value()}}function FO(t){Wn.call(this,null,t)}CO.from=function(t,e=EO,n=jO,r){return new CO("length"in t?function(t,e,n,r){const i=t.length,a=new Float64Array(2*i);for(let u=0;u<i;++u){const i=t[u];a[2*u]=e.call(r,i,u,t),a[2*u+1]=n.call(r,i,u,t)}return a}(t,e,n,r):Float64Array.from(function*(t,e,n,r){let i=0;for(const a of t)yield e.call(r,a,i,t),yield n.call(r,a,i,t),++i}(t,e,n,r)))},FO.Definition={type:"Voronoi",metadata:{modifies:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"size",type:"number",array:!0,length:2},{name:"extent",type:"array",array:!0,length:2,default:[[-1e5,-1e5],[1e5,1e5]],content:{type:"number",array:!0,length:2}},{name:"as",type:"string",default:"path"}]};const SO=Object(p.w)(FO,Wn),BO=[-1e5,-1e5,1e5,1e5];function TO(t){const e=t[0][0],n=t[0][1];let r=t.length-1;for(;t[r][0]===e&&t[r][1]===n;--r);return"M"+t.slice(0,r+1).join("L")+"Z"}SO.transform=function(t,e){const n=t.as||"path",r=e.source;if(!r||!r.length)return e;let i=t.size;i=i?[0,0,i[0],i[1]]:(i=t.extent)?[i[0][0],i[0][1],i[1][0],i[1][1]]:BO;const a=this.value=CO.from(r,t.x,t.y).voronoi(i);for(let t=0,e=r.length;t<e;++t){const e=a.cellPolygon(t);r[t][n]=e?TO(e):null}return e.reflow(t.modified()).modifies(n)};var RO=Math.PI/180,zO=64,NO=2048,PO=function(){var t,e,n,r,i,a,u,o=[256,256],s=IO,l=[],c=Math.random,f={};function h(t,e,n){for(var r,i,a,u,l,f=e.x,h=e.y,d=Math.sqrt(o[0]*o[0]+o[1]*o[1]),p=s(o),g=c()<.5?1:-1,m=-g;(r=p(m+=g))&&(i=~~r[0],a=~~r[1],!(Math.min(Math.abs(i),Math.abs(a))>=d));)if(e.x=f+i,e.y=h+a,!(e.x+e.x0<0||e.y+e.y0<0||e.x+e.x1>o[0]||e.y+e.y1>o[1]||n&&UO(e,t,o[0])||n&&(l=n,!((u=e).x+u.x1>l[0].x&&u.x+u.x0<l[1].x&&u.y+u.y1>l[0].y&&u.y+u.y0<l[1].y)))){for(var v,y=e.sprite,b=e.width>>5,_=o[0]>>5,x=e.x-(b<<4),w=127&x,A=32-w,O=e.y1-e.y0,M=(e.y+e.y0)*_+(x>>5),k=0;k<O;k++){v=0;for(var E=0;E<=b;E++)t[M+E]|=v<<A|(E<b?(v=y[k*b+E])>>>w:0);M+=_}return e.sprite=null,!0}return!1}return f.layout=function(){for(var s=function(t){t.width=t.height=1;var e=Math.sqrt(t.getContext("2d").getImageData(0,0,1,1).data.length>>2);t.width=(zO<<5)/e,t.height=NO/e;var n=t.getContext("2d");return n.fillStyle=n.strokeStyle="red",n.textAlign="center",{context:n,ratio:e}}(uu()),f=function(t){var e=[],n=-1;for(;++n<t;)e[n]=0;return e}((o[0]>>5)*o[1]),d=null,p=l.length,g=-1,m=[],v=l.map((function(o){return{text:t(o),font:e(o),style:r(o),weight:i(o),rotate:a(o),size:~~n(o),padding:u(o),xoff:0,yoff:0,x1:0,y1:0,x0:0,y0:0,hasText:!1,sprite:null,datum:o}})).sort((function(t,e){return e.size-t.size}));++g<p;){var y=v[g];y.x=o[0]*(c()+.5)>>1,y.y=o[1]*(c()+.5)>>1,LO(s,y,v,g),y.hasText&&h(f,y,d)&&(m.push(y),d?qO(d,y):d=[{x:y.x+y.x0,y:y.y+y.y0},{x:y.x+y.x1,y:y.y+y.y1}],y.x-=o[0]>>1,y.y-=o[1]>>1)}return m},f.words=function(t){return arguments.length?(l=t,f):l},f.size=function(t){return arguments.length?(o=[+t[0],+t[1]],f):o},f.font=function(t){return arguments.length?(e=$O(t),f):e},f.fontStyle=function(t){return arguments.length?(r=$O(t),f):r},f.fontWeight=function(t){return arguments.length?(i=$O(t),f):i},f.rotate=function(t){return arguments.length?(a=$O(t),f):a},f.text=function(e){return arguments.length?(t=$O(e),f):t},f.spiral=function(t){return arguments.length?(s=YO[t]||t,f):s},f.fontSize=function(t){return arguments.length?(n=$O(t),f):n},f.padding=function(t){return arguments.length?(u=$O(t),f):u},f.random=function(t){return arguments.length?(c=t,f):c},f};function LO(t,e,n,r){if(!e.sprite){var i=t.context,a=t.ratio;i.clearRect(0,0,(zO<<5)/a,NO/a);var u,o,s,l,c,f=0,h=0,d=0,p=n.length;for(--r;++r<p;){if(e=n[r],i.save(),i.font=e.style+" "+e.weight+" "+~~((e.size+1)/a)+"px "+e.font,u=i.measureText(e.text+"m").width*a,s=e.size<<1,e.rotate){var g=Math.sin(e.rotate*RO),m=Math.cos(e.rotate*RO),v=u*m,y=u*g,b=s*m,_=s*g;u=Math.max(Math.abs(v+_),Math.abs(v-_))+31>>5<<5,s=~~Math.max(Math.abs(y+b),Math.abs(y-b))}else u=u+31>>5<<5;if(s>d&&(d=s),f+u>=zO<<5&&(f=0,h+=d,d=0),h+s>=NO)break;i.translate((f+(u>>1))/a,(h+(s>>1))/a),e.rotate&&i.rotate(e.rotate*RO),i.fillText(e.text,0,0),e.padding&&(i.lineWidth=2*e.padding,i.strokeText(e.text,0,0)),i.restore(),e.width=u,e.height=s,e.xoff=f,e.yoff=h,e.x1=u>>1,e.y1=s>>1,e.x0=-e.x1,e.y0=-e.y1,e.hasText=!0,f+=u}for(var x=i.getImageData(0,0,(zO<<5)/a,NO/a).data,w=[];--r>=0;)if((e=n[r]).hasText){for(o=(u=e.width)>>5,s=e.y1-e.y0,l=0;l<s*o;l++)w[l]=0;if(null==(f=e.xoff))return;h=e.yoff;var A=0,O=-1;for(c=0;c<s;c++){for(l=0;l<u;l++){var M=o*c+(l>>5),k=x[(h+c)*(zO<<5)+(f+l)<<2]?1<<31-l%32:0;w[M]|=k,A|=k}A?O=c:(e.y0++,s--,c--,h++)}e.y1=e.y0+O,e.sprite=w.slice(0,(e.y1-e.y0)*o)}}}function UO(t,e,n){n>>=5;for(var r,i=t.sprite,a=t.width>>5,u=t.x-(a<<4),o=127&u,s=32-o,l=t.y1-t.y0,c=(t.y+t.y0)*n+(u>>5),f=0;f<l;f++){r=0;for(var h=0;h<=a;h++)if((r<<s|(h<a?(r=i[f*a+h])>>>o:0))&e[c+h])return!0;c+=n}return!1}function qO(t,e){var n=t[0],r=t[1];e.x+e.x0<n.x&&(n.x=e.x+e.x0),e.y+e.y0<n.y&&(n.y=e.y+e.y0),e.x+e.x1>r.x&&(r.x=e.x+e.x1),e.y+e.y1>r.y&&(r.y=e.y+e.y1)}function IO(t){var e=t[0]/t[1];return function(t){return[e*(t*=.1)*Math.cos(t),t*Math.sin(t)]}}function $O(t){return"function"==typeof t?t:function(){return t}}var YO={archimedean:IO,rectangular:function(t){var e=4*t[0]/t[1],n=0,r=0;return function(t){var i=t<0?-1:1;switch(Math.sqrt(1+4*i*t)-i&3){case 0:n+=e;break;case 1:r+=4;break;case 2:n-=e;break;default:r-=4}return[n,r]}}},WO=["x","y","font","fontSize","fontStyle","fontWeight","angle"],VO=["text","font","rotate","fontSize","fontStyle","fontWeight"];function HO(t){Wn.call(this,PO(),t)}function XO(t){return new Uint8Array(t)}function GO(t){return new Uint16Array(t)}function ZO(t){return new Uint32Array(t)}function JO(t,e,n){var r=(e<257?XO:e<65537?GO:ZO)(t);return n&&r.set(n),r}HO.Definition={type:"Wordcloud",metadata:{modifies:!0},params:[{name:"size",type:"number",array:!0,length:2},{name:"font",type:"string",expr:!0,default:"sans-serif"},{name:"fontStyle",type:"string",expr:!0,default:"normal"},{name:"fontWeight",type:"string",expr:!0,default:"normal"},{name:"fontSize",type:"number",expr:!0,default:14},{name:"fontSizeRange",type:"number",array:"nullable",default:[10,50]},{name:"rotate",type:"number",expr:!0,default:0},{name:"text",type:"field"},{name:"spiral",type:"string",values:["archimedean","rectangular"]},{name:"padding",type:"number",expr:!0},{name:"as",type:"string",array:!0,length:7,default:WO}]},Object(p.w)(HO,Wn).transform=function(t,e){!t.size||t.size[0]&&t.size[1]||Object(p.l)("Wordcloud size dimensions must be non-zero.");var n=t.modified();if(n||e.changed(e.ADD_REM)||VO.some((function(n){var r=t[n];return Object(p.B)(r)&&e.modified(r.fields)}))){var r,i=e.materialize(e.SOURCE).source,a=this.value,u=t.as||WO,o=t.fontSize||14;if(Object(p.B)(o)?r=t.fontSizeRange:o=Object(p.j)(o),r){var s=o,l=zg("sqrt")().domain(function(t,e){for(var n,r=1/0,i=-1/0,a=0,u=e.length;a<u;++a)(n=t(e[a]))<r&&(r=n),n>i&&(i=n);return[r,i]}(s,i)).range(r);o=function(t){return l(s(t))}}i.forEach((function(t){t[u[0]]=NaN,t[u[1]]=NaN,t[u[3]]=0}));for(var c,f,h=a.words(i).text(t.text).size(t.size||[500,500]).padding(t.padding||1).spiral(t.spiral||"archimedean").rotate(t.rotate||0).font(t.font||"sans-serif").fontStyle(t.fontStyle||"normal").fontWeight(t.fontWeight||"normal").fontSize(o).random(ir).layout(),d=a.size(),g=d[0]>>1,m=d[1]>>1,v=0,y=h.length;v<y;++v)(f=(c=h[v]).datum)[u[0]]=c.x+g,f[u[1]]=c.y+m,f[u[2]]=c.font,f[u[3]]=c.size,f[u[4]]=c.style,f[u[5]]=c.weight,f[u[6]]=c.rotate;return e.reflow(n).modifies(u)}};var QO=function(t,e,n){var r=1<<e;return{one:r,zero:~r,range:n.slice(),bisect:t.bisect,index:t.index,size:t.size,onAdd:function(t,e){var n,i=this.bisect(this.range,t.value),a=t.index,u=i[0],o=i[1],s=a.length;for(n=0;n<u;++n)e[a[n]]|=r;for(n=o;n<s;++n)e[a[n]]|=r;return this}}},KO=function(t,e){return Array.from(e,e=>t[e])};function tM(){var t=ZO(0),e=[],n=0;return{insert:function(r,i,a){if(!i.length)return[];var u,o,s,l=n,c=i.length,f=Array(c),h=ZO(c);for(s=0;s<c;++s)f[s]=r(i[s]),h[s]=s;if(f=function(t,e){return t.sort.call(e,(function(e,n){var r=t[e],i=t[n];return r<i?-1:r>i?1:0})),KO(t,e)}(f,h),l)u=e,o=t,e=Array(l+c),t=ZO(l+c),function(t,e,n,r,i,a,u,o,s){var l,c=0,f=0;for(l=0;c<r&&f<u;++l)e[c]<i[f]?(o[l]=e[c],s[l]=n[c++]):(o[l]=i[f],s[l]=a[f++]+t);for(;c<r;++c,++l)o[l]=e[c],s[l]=n[c];for(;f<u;++f,++l)o[l]=i[f],s[l]=a[f]+t}(a,u,o,l,f,h,c,e,t);else{if(a>0)for(s=0;s<c;++s)h[s]+=a;e=f,t=h}return n=l+c,{index:h,value:f}},remove:function(r,i){var a,u,o,s=n;for(u=0;!i[t[u]]&&u<s;++u);for(o=u;u<s;++u)i[a=t[u]]||(t[o]=a,e[o]=e[u],++o);n=s-r},bisect:function(t,r){var i;return r?i=r.length:(r=e,i=n),[mh(r,t[0],0,i),gh(r,t[1],0,i)]},reindex:function(e){for(var r=0,i=n;r<i;++r)t[r]=e[t[r]]},index:function(){return t},size:function(){return n}}}function eM(t){var e,n,r,i,a;Wn.call(this,(e=8,n=[],r=ZO(0),i=JO(0,e),a=JO(0,e),{data:function(){return n},seen:function(){return t=r,e=n.length,r=t.length>=e?t:((i=i||new t.constructor(e)).set(t),i);var t,e,i},add:function(t){for(var e,r=0,i=n.length,a=t.length;r<a;++r)(e=t[r])._index=i++,n.push(e)},remove:function(t,e){var r,u,o,s=n.length,l=Array(s-t),c=n;for(u=0;!e[u]&&u<s;++u)l[u]=n[u],c[u]=u;for(o=u;u<s;++u)r=n[u],e[u]?c[u]=-1:(c[u]=o,i[o]=i[u],a[o]=a[u],l[o]=r,r._index=o++),i[u]=0;return n=l,c},size:function(){return n.length},curr:function(){return i},prev:function(){return a},reset:function(t){a[t]=i[t]},all:function(){return e<257?255:e<65537?65535:4294967295},set:function(t,e){i[t]|=e},clear:function(t,e){i[t]&=~e},resize:function(t,n){(t>i.length||n>e)&&(e=Math.max(n,e),i=JO(t,e,i),a=JO(t,e))}}),t),this._indices=null,this._dims=null}eM.Definition={type:"CrossFilter",metadata:{},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"query",type:"array",array:!0,required:!0,content:{type:"number",array:!0,length:2}}]};var nM=Object(p.w)(eM,Wn);function rM(t){Wn.call(this,null,t)}nM.transform=function(t,e){return this._dims?t.modified("fields")||t.fields.some((function(t){return e.modified(t.fields)}))?this.reinit(t,e):this.eval(t,e):this.init(t,e)},nM.init=function(t,e){for(var n,r,i=t.fields,a=t.query,u=this._indices={},o=this._dims=[],s=a.length,l=0;l<s;++l)r=u[n=i[l].fname]||(u[n]=tM()),o.push(QO(r,l,a[l]));return this.eval(t,e)},nM.reinit=function(t,e){var n,r,i,a,u,o,s,l,c,f=e.materialize().fork(),h=t.fields,d=t.query,p=this._indices,g=this._dims,m=this.value,v=m.curr(),y=m.prev(),b=m.all(),_=f.rem=f.add,x=f.mod,w=d.length,A={};if(y.set(v),e.rem.length&&(u=this.remove(t,e,f)),e.add.length&&m.add(e.add),e.mod.length)for(o={},s=0,l=(a=e.mod).length;s<l;++s)o[a[s]._index]=1;for(s=0;s<w;++s)c=h[s],(!g[s]||t.modified("fields",s)||e.modified(c.fields))&&((n=A[i=c.fname])||(p[i]=r=tM(),A[i]=n=r.insert(c,e.source,0)),g[s]=QO(r,s,d[s]).onAdd(n,v));for(s=0,l=m.data().length;s<l;++s)u[s]||(y[s]!==v[s]?_.push(s):o[s]&&v[s]!==b&&x.push(s));return m.mask=(1<<w)-1,f},nM.eval=function(t,e){var n=e.materialize().fork(),r=this._dims.length,i=0;return e.rem.length&&(this.remove(t,e,n),i|=(1<<r)-1),t.modified("query")&&!t.modified("fields")&&(i|=this.update(t,e,n)),e.add.length&&(this.insert(t,e,n),i|=(1<<r)-1),e.mod.length&&(this.modify(e,n),i|=(1<<r)-1),this.value.mask=i,n},nM.insert=function(t,e,n){var r,i,a,u=e.add,o=this.value,s=this._dims,l=this._indices,c=t.fields,f={},h=n.add,d=o.size(),p=d+u.length,g=s.length;o.resize(p,g),o.add(u);var m=o.curr(),v=o.prev(),y=o.all();for(r=0;r<g;++r)a=f[i=c[r].fname]||(f[i]=l[i].insert(c[r],u,d)),s[r].onAdd(a,m);for(;d<p;++d)v[d]=y,m[d]!==y&&h.push(d)},nM.modify=function(t,e){var n,r,i,a=e.mod,u=this.value,o=u.curr(),s=u.all(),l=t.mod;for(n=0,r=l.length;n<r;++n)o[i=l[n]._index]!==s&&a.push(i)},nM.remove=function(t,e,n){var r,i,a,u,o=this._indices,s=this.value,l=s.curr(),c=s.prev(),f=s.all(),h={},d=n.rem,p=e.rem;for(r=0,i=p.length;r<i;++r)h[a=p[r]._index]=1,c[a]=u=l[a],l[a]=f,u!==f&&d.push(a);for(a in o)o[a].remove(i,h);return this.reindex(e,i,h),h},nM.reindex=function(t,e,n){var r=this._indices,i=this.value;t.runAfter((function(){var t=i.remove(e,n);for(var a in r)r[a].reindex(t)}))},nM.update=function(t,e,n){var r,i,a=this._dims,u=t.query,o=e.stamp,s=a.length,l=0;for(n.filters=0,i=0;i<s;++i)t.modified("query",i)&&(r=i,++l);if(1===l)l=a[r].one,this.incrementOne(a[r],u[r],n.add,n.rem);else for(i=0,l=0;i<s;++i)t.modified("query",i)&&(l|=a[i].one,this.incrementAll(a[i],u[i],o,n.add),n.rem=n.add);return l},nM.incrementAll=function(t,e,n,r){var i,a,u,o=this.value,s=o.seen(),l=o.curr(),c=o.prev(),f=t.index(),h=t.bisect(t.range),d=t.bisect(e),p=d[0],g=d[1],m=h[0],v=h[1],y=t.one;if(p<m)for(i=p,a=Math.min(m,g);i<a;++i)s[u=f[i]]!==n&&(c[u]=l[u],s[u]=n,r.push(u)),l[u]^=y;else if(p>m)for(i=m,a=Math.min(p,v);i<a;++i)s[u=f[i]]!==n&&(c[u]=l[u],s[u]=n,r.push(u)),l[u]^=y;if(g>v)for(i=Math.max(p,v),a=g;i<a;++i)s[u=f[i]]!==n&&(c[u]=l[u],s[u]=n,r.push(u)),l[u]^=y;else if(g<v)for(i=Math.max(m,g),a=v;i<a;++i)s[u=f[i]]!==n&&(c[u]=l[u],s[u]=n,r.push(u)),l[u]^=y;t.range=e.slice()},nM.incrementOne=function(t,e,n,r){var i,a,u,o=this.value.curr(),s=t.index(),l=t.bisect(t.range),c=t.bisect(e),f=c[0],h=c[1],d=l[0],p=l[1],g=t.one;if(f<d)for(i=f,a=Math.min(d,h);i<a;++i)o[u=s[i]]^=g,n.push(u);else if(f>d)for(i=d,a=Math.min(f,p);i<a;++i)o[u=s[i]]^=g,r.push(u);if(h>p)for(i=Math.max(f,p),a=h;i<a;++i)o[u=s[i]]^=g,n.push(u);else if(h<p)for(i=Math.max(d,h),a=p;i<a;++i)o[u=s[i]]^=g,r.push(u);t.range=e.slice()},rM.Definition={type:"ResolveFilter",metadata:{},params:[{name:"ignore",type:"number",required:!0,description:"A bit mask indicating which filters to ignore."},{name:"filter",type:"object",required:!0,description:"Per-tuple filter bitmaps from a CrossFilter transform."}]},Object(p.w)(rM,Wn).transform=function(t,e){var n=~(t.ignore||0),r=t.filter,i=r.mask;if(0==(i&n))return e.StopPropagation;var a=e.fork(e.ALL),u=r.data(),o=r.curr(),s=r.prev(),l=function(t){return o[t]&n?null:u[t]};return a.filter(a.MOD,l),i&i-1?(a.filter(a.ADD,(function(t){var e=o[t]&n;return!e&&e^s[t]&n?u[t]:null})),a.filter(a.REM,(function(t){var e=o[t]&n;return e&&!(e^e^s[t]&n)?u[t]:null}))):(a.filter(a.ADD,l),a.filter(a.REM,(function(t){return(o[t]&n)===i?u[t]:null}))),a.filter(a.SOURCE,(function(t){return l(t._index)}))};n(6);var iM=function(t){var e=t._signals.cursor;e||(t._signals.cursor=e=t.add({user:"default",item:null})),t.on(t.events("view","mousemove"),e,(function(t,n){var r=e.value,i=r?Object(p.F)(r)?r:r.user:"default",a=n.item&&n.item.cursor||null;return r&&i===r.user&&a==r.item?r:{user:i,item:a}})),t.add(null,(function(t){var e=t.cursor,n=this.value;return Object(p.F)(e)||(n=e.item,e=e.user),function(t){"undefined"!=typeof document&&document.body&&(document.body.style.cursor=t)}(e&&"default"!==e?e:n||e),n}),{cursor:e})};function aM(t,e){var n=t._runtime.data;return Object(p.t)(n,e)||Object(p.l)("Unrecognized data set: "+e),n[e]}function uM(t,e){E(e)||Object(p.l)("Second argument to changes must be a changeset.");var n=aM(this,t);return n.modified=!0,this.pulse(n.input,e)}function oM(t){var e=t.padding();return Math.max(0,t._viewWidth+e.left+e.right)}function sM(t){var e=t.padding();return Math.max(0,t._viewHeight+e.top+e.bottom)}function lM(t){var e=t.padding(),n=t._origin;return[e.left+n[0],e.top+n[1]]}var cM=function(t,e,n){var r,i,a,u=t._renderer,o=u&&u.canvas();return o&&(a=lM(t),i=e.changedTouches?e.changedTouches[0]:e,(r=Il(i,o))[0]-=a[0],r[1]-=a[1]),e.dataflow=t,e.item=n,e.vega=function(t,e,n){var r=e?"group"===e.mark.marktype?e:e.mark.group:null;function i(t){var n,i=r;if(t)for(n=e;n;n=n.mark.group)if(n.mark.name===t){i=n;break}return i&&i.mark&&i.mark.interactive?i:{}}function a(t){if(!t)return n;Object(p.F)(t)&&(t=i(t));for(var e=n.slice();t;)e[0]-=t.x||0,e[1]-=t.y||0,t=t.mark&&t.mark.group;return e}return{view:Object(p.j)(t),item:Object(p.j)(e||{}),group:i,xy:a,x:function(t){return a(t)[0]},y:function(t){return a(t)[1]}}}(t,n,r),e};const fM="view",hM="timer",dM="window",pM={trap:!1};function gM(t,e,n){const r=t._eventConfig&&t._eventConfig[e];return!(!1===r||Object(p.D)(r)&&!r[n])||(t.warn(`Blocked ${e} ${n} event listener.`),!1)}function mM(t){return t.item}function vM(t){return t.item.mark.source}function yM(t){return function(e,n){return n.vega.view().changeset().encode(n.item,t)}}var bM=function(t,e,n){var r=document.createElement(t);for(var i in e)r.setAttribute(i,e[i]);return null!=n&&(r.textContent=n),r},_M="vega-bind",xM="vega-bind-name",wM="vega-bind-radio",AM="vega-option-",OM=function(t,e,n){if(e){var r=n.param,i=n.state;return i||(i=n.state={elements:null,active:!1,set:null,update:function(e){e!==t.signal(r.signal)&&t.runAsync(null,(function(){i.source=!0,t.signal(r.signal,e)}))}},r.debounce&&(i.update=Object(p.k)(r.debounce,i.update))),function(t,e,n,r){var i=bM("div",{class:_M});i.appendChild(bM("span",{class:xM},n.name||n.signal)),e.appendChild(i);var a=MM;switch(n.input){case"checkbox":a=kM;break;case"select":a=EM;break;case"radio":a=jM;break;case"range":a=DM}a(t,i,n,r)}(i,e,r,t.signal(r.signal)),i.active||(t.on(t._signals[r.signal],null,(function(){i.source?i.source=!1:i.set(t.signal(r.signal))})),i.active=!0),i}};function MM(t,e,n,r){var i=bM("input");for(var a in n)"signal"!==a&&"element"!==a&&i.setAttribute("input"===a?"type":a,n[a]);i.setAttribute("name",n.signal),i.value=r,e.appendChild(i),i.addEventListener("input",(function(){t.update(i.value)})),t.elements=[i],t.set=function(t){i.value=t}}function kM(t,e,n,r){var i={type:"checkbox",name:n.signal};r&&(i.checked=!0);var a=bM("input",i);e.appendChild(a),a.addEventListener("change",(function(){t.update(a.checked)})),t.elements=[a],t.set=function(t){a.checked=!!t||null}}function EM(t,e,n,r){var i=bM("select",{name:n.signal});n.options.forEach((function(t){var e={value:t};CM(t,r)&&(e.selected=!0),i.appendChild(bM("option",e,t+""))})),e.appendChild(i),i.addEventListener("change",(function(){t.update(n.options[i.selectedIndex])})),t.elements=[i],t.set=function(t){for(var e=0,r=n.options.length;e<r;++e)if(CM(n.options[e],t))return void(i.selectedIndex=e)}}function jM(t,e,n,r){var i=bM("span",{class:wM});e.appendChild(i),t.elements=n.options.map((function(e){var a=AM+n.signal+"-"+e,u={id:a,type:"radio",name:n.signal,value:e};CM(e,r)&&(u.checked=!0);var o=bM("input",u);return o.addEventListener("change",(function(){t.update(e)})),i.appendChild(o),i.appendChild(bM("label",{for:a},e+"")),o})),t.set=function(e){for(var n=t.elements,r=0,i=n.length;r<i;++r)CM(n[r].value,e)&&(n[r].checked=!0)}}function DM(t,e,n,r){r=void 0!==r?r:(+n.max+ +n.min)/2;var i=null!=n.max?n.max:Math.max(100,+r)||100,a=n.min||Math.min(0,i,+r)||0,u=n.step||jh(a,i,100),o=bM("input",{type:"range",name:n.signal,min:a,max:i,step:u});o.value=r;var s=bM("label",{},+r);function l(){s.textContent=o.value,t.update(+o.value)}e.appendChild(o),e.appendChild(s),o.addEventListener("input",l),o.addEventListener("change",l),t.elements=[o],t.set=function(t){o.value=t,s.textContent=t}}function CM(t,e){return t===e||t+""==e+""}var FM=function(t,e,n,r,i,a){return(e=e||new r(t.loader())).initialize(n,oM(t),sM(t),lM(t),i,a).background(t._background)},SM=function(t,e){return e?function(){try{e.apply(this,arguments)}catch(e){t.error(e)}}:null};function BM(t,e){if("string"==typeof e){if("undefined"==typeof document)return t.error("DOM document instance not found."),null;if(!(e=document.querySelector(e)))return t.error("Signal bind element not found: "+e),null}if(e)try{e.innerHTML=""}catch(n){e=null,t.error(n)}return e}var TM=async function(t,e,n,r){const i=Rc(e),a=i&&i.headless;return a||Object(p.l)("Unrecognized renderer type: "+e),await t.runAsync(),FM(t,null,null,a,n,r).renderAsync(t._scenegraph.root)};var RM,zM,NM,PM,LM,UM="RawCode",qM="Literal",IM="Property",$M="Identifier",YM="ArrayExpression",WM="BinaryExpression",VM="CallExpression",HM="ConditionalExpression",XM="LogicalExpression",GM="MemberExpression",ZM="ObjectExpression",JM="UnaryExpression";function QM(t){this.type=t}QM.prototype.visit=function(t){var e,n,r;if(t(this))return 1;for(n=0,r=(e=function(t){switch(t.type){case YM:return t.elements;case WM:case XM:return[t.left,t.right];case VM:var e=t.arguments.slice();return e.unshift(t.callee),e;case HM:return[t.test,t.consequent,t.alternate];case GM:return[t.object,t.property];case ZM:return t.properties;case IM:return[t.key,t.value];case JM:return[t.argument];case $M:case qM:case UM:default:return[]}}(this)).length;n<r;++n)if(e[n].visit(t))return 1};var KM=1,tk=2,ek=3,nk=4,rk=5,ik=6,ak=7,uk=8;(RM={})[KM]="Boolean",RM[tk]="<end>",RM[ek]="Identifier",RM[nk]="Keyword",RM[rk]="Null",RM[ik]="Numeric",RM[ak]="Punctuator",RM[uk]="String",RM[9]="RegularExpression";var ok="ArrayExpression",sk="BinaryExpression",lk="CallExpression",ck="ConditionalExpression",fk="Identifier",hk="Literal",dk="LogicalExpression",pk="MemberExpression",gk="ObjectExpression",mk="Property",vk="UnaryExpression",yk="Unexpected token %0",bk="Unexpected number",_k="Unexpected string",xk="Unexpected identifier",wk="Unexpected reserved word",Ak="Unexpected end of input",Ok="Invalid regular expression",Mk="Invalid regular expression: missing /",kk="Octal literals are not allowed in strict mode.",Ek="Duplicate data property in object literal not allowed in strict mode",jk="ILLEGAL",Dk="Disabled.",Ck=new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),Fk=new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");function Sk(t,e){if(!t)throw new Error("ASSERT: "+e)}function Bk(t){return t>=48&&t<=57}function Tk(t){return"0123456789abcdefABCDEF".indexOf(t)>=0}function Rk(t){return"01234567".indexOf(t)>=0}function zk(t){return 32===t||9===t||11===t||12===t||160===t||t>=5760&&[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(t)>=0}function Nk(t){return 10===t||13===t||8232===t||8233===t}function Pk(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||92===t||t>=128&&Ck.test(String.fromCharCode(t))}function Lk(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||92===t||t>=128&&Fk.test(String.fromCharCode(t))}var Uk={if:1,in:1,do:1,var:1,for:1,new:1,try:1,let:1,this:1,else:1,case:1,void:1,with:1,enum:1,while:1,break:1,catch:1,throw:1,const:1,yield:1,class:1,super:1,return:1,typeof:1,delete:1,switch:1,export:1,import:1,public:1,static:1,default:1,finally:1,extends:1,package:1,private:1,function:1,continue:1,debugger:1,interface:1,protected:1,instanceof:1,implements:1};function qk(){for(var t;NM<PM&&(zk(t=zM.charCodeAt(NM))||Nk(t));)++NM}function Ik(t){var e,n,r,i=0;for(n="u"===t?4:2,e=0;e<n;++e)NM<PM&&Tk(zM[NM])?(r=zM[NM++],i=16*i+"0123456789abcdef".indexOf(r.toLowerCase())):iE({},yk,jk);return String.fromCharCode(i)}function $k(){var t,e,n,r;for(e=0,"}"===(t=zM[NM])&&iE({},yk,jk);NM<PM&&Tk(t=zM[NM++]);)e=16*e+"0123456789abcdef".indexOf(t.toLowerCase());return(e>1114111||"}"!==t)&&iE({},yk,jk),e<=65535?String.fromCharCode(e):(n=55296+(e-65536>>10),r=56320+(e-65536&1023),String.fromCharCode(n,r))}function Yk(){var t,e;for(t=zM.charCodeAt(NM++),e=String.fromCharCode(t),92===t&&(117!==zM.charCodeAt(NM)&&iE({},yk,jk),++NM,(t=Ik("u"))&&"\\"!==t&&Pk(t.charCodeAt(0))||iE({},yk,jk),e=t);NM<PM&&Lk(t=zM.charCodeAt(NM));)++NM,e+=String.fromCharCode(t),92===t&&(e=e.substr(0,e.length-1),117!==zM.charCodeAt(NM)&&iE({},yk,jk),++NM,(t=Ik("u"))&&"\\"!==t&&Lk(t.charCodeAt(0))||iE({},yk,jk),e+=t);return e}function Wk(){var t,e;return t=NM,{type:1===(e=92===zM.charCodeAt(NM)?Yk():function(){var t,e;for(t=NM++;NM<PM;){if(92===(e=zM.charCodeAt(NM)))return NM=t,Yk();if(!Lk(e))break;++NM}return zM.slice(t,NM)}()).length?ek:Uk.hasOwnProperty(e)?nk:"null"===e?rk:"true"===e||"false"===e?KM:ek,value:e,start:t,end:NM}}function Vk(){var t,e,n,r,i=NM,a=zM.charCodeAt(NM),u=zM[NM];switch(a){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++NM,{type:ak,value:String.fromCharCode(a),start:i,end:NM};default:if(61===(t=zM.charCodeAt(NM+1)))switch(a){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return NM+=2,{type:ak,value:String.fromCharCode(a)+String.fromCharCode(t),start:i,end:NM};case 33:case 61:return NM+=2,61===zM.charCodeAt(NM)&&++NM,{type:ak,value:zM.slice(i,NM),start:i,end:NM}}}return">>>="===(r=zM.substr(NM,4))?{type:ak,value:r,start:i,end:NM+=4}:">>>"===(n=r.substr(0,3))||"<<="===n||">>="===n?{type:ak,value:n,start:i,end:NM+=3}:u===(e=n.substr(0,2))[1]&&"+-<>&|".indexOf(u)>=0||"=>"===e?{type:ak,value:e,start:i,end:NM+=2}:"<>=!+-*%&|^/".indexOf(u)>=0?{type:ak,value:u,start:i,end:++NM}:void iE({},yk,jk)}function Hk(){var t,e,n;if(Sk(Bk((n=zM[NM]).charCodeAt(0))||"."===n,"Numeric literal must start with a decimal digit or a decimal point"),e=NM,t="","."!==n){if(t=zM[NM++],n=zM[NM],"0"===t){if("x"===n||"X"===n)return++NM,function(t){for(var e="";NM<PM&&Tk(zM[NM]);)e+=zM[NM++];return 0===e.length&&iE({},yk,jk),Pk(zM.charCodeAt(NM))&&iE({},yk,jk),{type:ik,value:parseInt("0x"+e,16),start:t,end:NM}}(e);if(Rk(n))return function(t){for(var e="0"+zM[NM++];NM<PM&&Rk(zM[NM]);)e+=zM[NM++];return(Pk(zM.charCodeAt(NM))||Bk(zM.charCodeAt(NM)))&&iE({},yk,jk),{type:ik,value:parseInt(e,8),octal:!0,start:t,end:NM}}(e);n&&Bk(n.charCodeAt(0))&&iE({},yk,jk)}for(;Bk(zM.charCodeAt(NM));)t+=zM[NM++];n=zM[NM]}if("."===n){for(t+=zM[NM++];Bk(zM.charCodeAt(NM));)t+=zM[NM++];n=zM[NM]}if("e"===n||"E"===n)if(t+=zM[NM++],"+"!==(n=zM[NM])&&"-"!==n||(t+=zM[NM++]),Bk(zM.charCodeAt(NM)))for(;Bk(zM.charCodeAt(NM));)t+=zM[NM++];else iE({},yk,jk);return Pk(zM.charCodeAt(NM))&&iE({},yk,jk),{type:ik,value:parseFloat(t),start:e,end:NM}}function Xk(){var t,e,n,r;return LM=null,qk(),t=NM,e=function(){var t,e,n,r;for(Sk("/"===(t=zM[NM]),"Regular expression literal must start with a slash"),e=zM[NM++],n=!1,r=!1;NM<PM;)if(e+=t=zM[NM++],"\\"===t)Nk((t=zM[NM++]).charCodeAt(0))&&iE({},Mk),e+=t;else if(Nk(t.charCodeAt(0)))iE({},Mk);else if(n)"]"===t&&(n=!1);else{if("/"===t){r=!0;break}"["===t&&(n=!0)}return r||iE({},Mk),{value:e.substr(1,e.length-2),literal:e}}(),n=function(){var t,e,n;for(e="",n="";NM<PM&&Lk((t=zM[NM]).charCodeAt(0));)++NM,"\\"===t&&NM<PM?iE({},yk,jk):(n+=t,e+=t);return n.search(/[^gimuy]/g)>=0&&iE({},Ok,n),{value:n,literal:e}}(),r=function(t,e){var n=t;e.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}/g,(function(t,e){if(parseInt(e,16)<=1114111)return"x";iE({},Ok)})).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"x"));try{new RegExp(n)}catch(t){iE({},Ok)}try{return new RegExp(t,e)}catch(t){return null}}(e.value,n.value),{literal:e.literal+n.literal,value:r,regex:{pattern:e.value,flags:n.value},start:t,end:NM}}function Gk(){var t;return qk(),NM>=PM?{type:tk,start:NM,end:NM}:Pk(t=zM.charCodeAt(NM))?Wk():40===t||41===t||59===t?Vk():39===t||34===t?function(){var t,e,n,r,i="",a=!1;for(Sk("'"===(t=zM[NM])||'"'===t,"String literal must starts with a quote"),e=NM,++NM;NM<PM;){if((n=zM[NM++])===t){t="";break}if("\\"===n)if((n=zM[NM++])&&Nk(n.charCodeAt(0)))"\r"===n&&"\n"===zM[NM]&&++NM;else switch(n){case"u":case"x":"{"===zM[NM]?(++NM,i+=$k()):i+=Ik(n);break;case"n":i+="\n";break;case"r":i+="\r";break;case"t":i+="\t";break;case"b":i+="\b";break;case"f":i+="\f";break;case"v":i+="\v";break;default:Rk(n)?(0!==(r="01234567".indexOf(n))&&(a=!0),NM<PM&&Rk(zM[NM])&&(a=!0,r=8*r+"01234567".indexOf(zM[NM++]),"0123".indexOf(n)>=0&&NM<PM&&Rk(zM[NM])&&(r=8*r+"01234567".indexOf(zM[NM++]))),i+=String.fromCharCode(r)):i+=n}else{if(Nk(n.charCodeAt(0)))break;i+=n}}return""!==t&&iE({},yk,jk),{type:uk,value:i,octal:a,start:e,end:NM}}():46===t?Bk(zM.charCodeAt(NM+1))?Hk():Vk():Bk(t)?Hk():Vk()}function Zk(){var t;return NM=(t=LM).end,LM=Gk(),NM=t.end,t}function Jk(){var t;t=NM,LM=Gk(),NM=t}function Qk(t,e,n){var r=new QM("||"===t||"&&"===t?dk:sk);return r.operator=t,r.left=e,r.right=n,r}function Kk(t,e){var n=new QM(lk);return n.callee=t,n.arguments=e,n}function tE(t){var e=new QM(fk);return e.name=t,e}function eE(t){var e=new QM(hk);return e.value=t.value,e.raw=zM.slice(t.start,t.end),t.regex&&("//"===e.raw&&(e.raw="/(?:)/"),e.regex=t.regex),e}function nE(t,e,n){var r=new QM(pk);return r.computed="["===t,r.object=e,r.property=n,r.computed||(n.member=!0),r}function rE(t,e,n){var r=new QM(mk);return r.key=e,r.value=n,r.kind=t,r}function iE(t,e){var n,r=Array.prototype.slice.call(arguments,2),i=e.replace(/%(\d)/g,(function(t,e){return Sk(e<r.length,"Message reference must be in range"),r[e]}));throw(n=new Error(i)).index=NM,n.description=i,n}function aE(t){t.type===tk&&iE(t,Ak),t.type===ik&&iE(t,bk),t.type===uk&&iE(t,_k),t.type===ek&&iE(t,xk),t.type===nk&&iE(t,wk),iE(t,yk,t.value)}function uE(t){var e=Zk();e.type===ak&&e.value===t||aE(e)}function oE(t){return LM.type===ak&&LM.value===t}function sE(t){return LM.type===nk&&LM.value===t}function lE(){var t=[];for(NM=LM.start,uE("[");!oE("]");)oE(",")?(Zk(),t.push(null)):(t.push(xE()),oE("]")||uE(","));return Zk(),function(t){var e=new QM(ok);return e.elements=t,e}(t)}function cE(){var t;return NM=LM.start,(t=Zk()).type===uk||t.type===ik?(t.octal&&iE(t,kk),eE(t)):tE(t.value)}function fE(){var t,e,n;return NM=LM.start,(t=LM).type===ek?(n=cE(),uE(":"),rE("init",n,xE())):t.type!==tk&&t.type!==ak?(e=cE(),uE(":"),rE("init",e,xE())):void aE(t)}function hE(){var t,e,n=[],r={},i=String;for(NM=LM.start,uE("{");!oE("}");)e="$"+((t=fE()).key.type===fk?t.key.name:i(t.key.value)),Object.prototype.hasOwnProperty.call(r,e)?iE({},Ek):r[e]=!0,n.push(t),oE("}")||uE(",");return uE("}"),function(t){var e=new QM(gk);return e.properties=t,e}(n)}var dE={if:1,this:1};function pE(){var t,e,n;if(oE("("))return function(){var t;return uE("("),t=wE(),uE(")"),t}();if(oE("["))return lE();if(oE("{"))return hE();if(t=LM.type,NM=LM.start,t===ek||dE[LM.value])n=tE(Zk().value);else if(t===uk||t===ik)LM.octal&&iE(LM,kk),n=eE(Zk());else{if(t===nk)throw new Error(Dk);t===KM?((e=Zk()).value="true"===e.value,n=eE(e)):t===rk?((e=Zk()).value=null,n=eE(e)):oE("/")||oE("/=")?(n=eE(Xk()),Jk()):aE(Zk())}return n}function gE(){var t=[];if(uE("("),!oE(")"))for(;NM<PM&&(t.push(xE()),!oE(")"));)uE(",");return uE(")"),t}function mE(){var t;return NM=LM.start,function(t){return t.type===ek||t.type===nk||t.type===KM||t.type===rk}(t=Zk())||aE(t),tE(t.value)}function vE(){var t;return uE("["),t=wE(),uE("]"),t}function yE(){var t=function(){var t;for(t=pE();;)if(oE("."))uE("."),t=nE(".",t,mE());else if(oE("("))t=Kk(t,gE());else{if(!oE("["))break;t=nE("[",t,vE())}return t}();if(LM.type===ak&&(oE("++")||oE("--")))throw new Error(Dk);return t}function bE(){var t,e,n,r,i;if(LM.type!==ak&&LM.type!==nk)e=yE();else{if(oE("++")||oE("--"))throw new Error(Dk);if(oE("+")||oE("-")||oE("~")||oE("!"))t=Zk(),e=bE(),n=t.value,r=e,(i=new QM(vk)).operator=n,i.argument=r,i.prefix=!0,e=i;else{if(sE("delete")||sE("void")||sE("typeof"))throw new Error(Dk);e=yE()}}return e}function _E(t){var e=0;if(t.type!==ak&&t.type!==nk)return 0;switch(t.value){case"||":e=1;break;case"&&":e=2;break;case"|":e=3;break;case"^":e=4;break;case"&":e=5;break;case"==":case"!=":case"===":case"!==":e=6;break;case"<":case">":case"<=":case">=":case"instanceof":case"in":e=7;break;case"<<":case">>":case">>>":e=8;break;case"+":case"-":e=9;break;case"*":case"/":case"%":e=11}return e}function xE(){var t,e;return t=function(){var t,e,n,r,i,a,u,o,s,l;if(t=LM,s=bE(),0===(i=_E(r=LM)))return s;for(r.prec=i,Zk(),e=[t,LM],a=[s,r,u=bE()];(i=_E(LM))>0;){for(;a.length>2&&i<=a[a.length-2].prec;)u=a.pop(),o=a.pop().value,s=a.pop(),e.pop(),n=Qk(o,s,u),a.push(n);(r=Zk()).prec=i,a.push(r),e.push(LM),n=bE(),a.push(n)}for(n=a[l=a.length-1],e.pop();l>1;)e.pop(),n=Qk(a[l-1].value,a[l-2],n),l-=2;return n}(),oE("?")&&(Zk(),e=xE(),uE(":"),t=function(t,e,n){var r=new QM(ck);return r.test=t,r.consequent=e,r.alternate=n,r}(t,e,xE())),t}function wE(){var t=xE();if(oE(","))throw new Error(Dk);return t}var AE={NaN:"NaN",E:"Math.E",LN2:"Math.LN2",LN10:"Math.LN10",LOG2E:"Math.LOG2E",LOG10E:"Math.LOG10E",PI:"Math.PI",SQRT1_2:"Math.SQRT1_2",SQRT2:"Math.SQRT2",MIN_VALUE:"Number.MIN_VALUE",MAX_VALUE:"Number.MAX_VALUE"},OE=function(t){function e(e,n,r){return function(i){return function(e,n,r,i){var a=t(n[0]);return r&&(a=r+"("+a+")",0===r.lastIndexOf("new ",0)&&(a="("+a+")")),a+"."+e+(i<0?"":0===i?"()":"("+n.slice(1).map(t).join(",")+")")}(e,i,n,r)}}var n="new Date";return{isNaN:"Number.isNaN",isFinite:"Number.isFinite",abs:"Math.abs",acos:"Math.acos",asin:"Math.asin",atan:"Math.atan",atan2:"Math.atan2",ceil:"Math.ceil",cos:"Math.cos",exp:"Math.exp",floor:"Math.floor",log:"Math.log",max:"Math.max",min:"Math.min",pow:"Math.pow",random:"Math.random",round:"Math.round",sin:"Math.sin",sqrt:"Math.sqrt",tan:"Math.tan",clamp:function(e){e.length<3&&Object(p.l)("Missing arguments to clamp function."),e.length>3&&Object(p.l)("Too many arguments to clamp function.");var n=e.map(t);return"Math.max("+n[1]+", Math.min("+n[2]+","+n[0]+"))"},now:"Date.now",utc:"Date.UTC",datetime:n,date:e("getDate",n,0),day:e("getDay",n,0),year:e("getFullYear",n,0),month:e("getMonth",n,0),hours:e("getHours",n,0),minutes:e("getMinutes",n,0),seconds:e("getSeconds",n,0),milliseconds:e("getMilliseconds",n,0),time:e("getTime",n,0),timezoneoffset:e("getTimezoneOffset",n,0),utcdate:e("getUTCDate",n,0),utcday:e("getUTCDay",n,0),utcyear:e("getUTCFullYear",n,0),utcmonth:e("getUTCMonth",n,0),utchours:e("getUTCHours",n,0),utcminutes:e("getUTCMinutes",n,0),utcseconds:e("getUTCSeconds",n,0),utcmilliseconds:e("getUTCMilliseconds",n,0),length:e("length",null,-1),join:e("join",null),indexof:e("indexOf",null),lastindexof:e("lastIndexOf",null),slice:e("slice",null),reverse:function(e){return"("+t(e[0])+").slice().reverse()"},parseFloat:"parseFloat",parseInt:"parseInt",upper:e("toUpperCase","String",0),lower:e("toLowerCase","String",0),substring:e("substring","String"),split:e("split","String"),replace:e("replace","String"),trim:e("trim","String",0),regexp:"RegExp",test:e("test","RegExp"),if:function(e){e.length<3&&Object(p.l)("Missing arguments to if function."),e.length>3&&Object(p.l)("Too many arguments to if function.");var n=e.map(t);return"("+n[0]+"?"+n[1]+":"+n[2]+")"}}};const ME="intersect",kE="union";var EE="E",jE="R",DE="R-E",CE="R-LE",FE="R-RE",SE="index:unit";function BE(t,e){for(var n,r,i=e.fields,a=e.values,u=i.length,o=0;o<u;++o)if((r=i[o]).getter=p.r.getter||Object(p.r)(r.field),n=r.getter(t),Object(p.A)(n)&&(n=Object(p.Y)(n)),Object(p.A)(a[o])&&(a[o]=Object(p.Y)(a[o])),Object(p.A)(a[o][0])&&(a[o]=a[o].map(p.Y)),r.type===EE){if(Object(p.y)(a[o])?a[o].indexOf(n)<0:n!==a[o])return!1}else if(r.type===jE){if(!Object(p.x)(n,a[o]))return!1}else if(r.type===FE){if(!Object(p.x)(n,a[o],!0,!1))return!1}else if(r.type===DE){if(!Object(p.x)(n,a[o],!1,!1))return!1}else if(r.type===CE&&!Object(p.x)(n,a[o],!1,!0))return!1;return!0}var TE={E_union:function(t,e){if(!t.length)return e;for(var n=0,r=e.length;n<r;++n)t.indexOf(e[n])<0&&t.push(e[n]);return t},E_intersect:function(t,e){return t.length?t.filter((function(t){return e.indexOf(t)>=0})):e},R_union:function(t,e){var n=Object(p.Y)(e[0]),r=Object(p.Y)(e[1]);return n>r&&(n=e[1],r=e[0]),t.length?(t[0]>n&&(t[0]=n),t[1]<r&&(t[1]=r),t):[n,r]},R_intersect:function(t,e){var n=Object(p.Y)(e[0]),r=Object(p.Y)(e[1]);return n>r&&(n=e[1],r=e[0]),t.length?r<t[0]||t[1]<n?[]:(t[0]<n&&(t[0]=n),t[1]>r&&(t[1]=r),t):[n,r]}};const RE=":",zE="@";function NE(t,e,n,r){e[0].type!==qM&&Object(p.l)("First argument to selection functions must be a string literal.");const i=e[0].value,a=e.length>=2&&Object(p.R)(e).value,u=zE+"unit",o=RE+i;a!==ME||Object(p.t)(r,u)||(r[u]=n.getData(i).indataRef(n,"unit")),Object(p.t)(r,o)||(r[o]=n.getData(i).tuplesRef())}function PE(t){const e=t/255;return e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}function LE(t){const e=gd(t);return.2126*PE(e.r)+.7152*PE(e.g)+.0722*PE(e.b)}function UE(t){const e=this.context.data[t];return e?e.values.value:[]}const qE={};function IE(t,e,n){let r=t+":"+n,i=qE[r];return i&&i[0]===e||(qE[r]=i=[e,e(n)]),i[1]}function $E(t,e){return IE("timeFormat",ce,e)(t)}var YE=new Date(2e3,0,1);function WE(t,e,n){return Number.isInteger(t)&&Number.isInteger(e)?(YE.setMonth(t),YE.setDate(e),$E(YE,n)):""}function VE(t,e){let n;return Object(p.B)(t)?t:Object(p.F)(t)?(n=e.scales[t])&&n.value:void 0}function HE(t,e){return function(n,r,i){if(n){const e=VE(n,(i||this).context);return e&&e.path[t](r)}return e(r)}}const XE=HE("area",(function(t){return Qv.reset(),Zv(t,Kv),2*Qv})),GE=HE("bounds",(function(t){var e,n,r,i,a,u,o;if(py=dy=-(fy=hy=1/0),by=[],Zv(t,wy),n=by.length){for(by.sort(Fy),e=1,a=[r=by[0]];e<n;++e)Sy(r,(i=by[e])[0])||Sy(r,i[1])?(Cy(r[0],i[1])>Cy(r[0],r[1])&&(r[1]=i[1]),Cy(i[0],r[1])>Cy(r[0],r[1])&&(r[0]=i[0])):a.push(r=i);for(u=-1/0,e=0,r=a[n=a.length-1];e<=n;r=i,++e)i=a[e],(o=Cy(r[1],i[0]))>u&&(u=o,fy=i[0],dy=r[1])}return by=_y=null,fy===1/0||hy===1/0?[[NaN,NaN],[NaN,NaN]]:[[fy,hy],[dy,py]]})),ZE=HE("centroid",(function(t){By=Ty=Ry=zy=Ny=Py=Ly=Uy=qy=Iy=$y=0,Zv(t,Gy);var e=qy,n=Iy,r=$y,i=e*e+n*n+r*r;return i<yv&&(e=Py,n=Ly,r=Uy,Ty<vv&&(e=Ry,n=zy,r=Ny),(i=e*e+n*n+r*r)<yv)?[NaN,NaN]:[Ev(n,e)*Av,Pv(r/Rv(i))*Av]}));function JE(t,e,n){try{t[e].apply(t,["EXPRESSION"].concat([].slice.call(n)))}catch(e){t.warn(e)}return n[n.length-1]}function QE(t,e){return t===e||t!=t&&e!=e||(Object(p.y)(t)?!(!Object(p.y)(e)||t.length!==e.length)&&function(t,e){for(let n=0,r=t.length;n<r;++n)if(!QE(t[n],e[n]))return!1;return!0}(t,e):!(!Object(p.D)(t)||!Object(p.D)(e))&&KE(t,e))}function KE(t,e){for(let n in t)if(!QE(t[n],e[n]))return!1;return!0}function tj(t){return e=>KE(t,e)}const ej={};function nj(t){return t.data}function rj(t,e){const n=UE.call(e,t);return n.root&&n.root.lookup||ej}const ij="undefined"!=typeof window&&window||null;const aj=":",uj="@",oj="%";function sj(t,e,n,r){e[0].type!==qM&&Object(p.l)("First argument to data functions must be a string literal.");const i=e[0].value,a=aj+i;if(!Object(p.t)(a,r))try{r[a]=n.getData(i).tuplesRef()}catch(t){}}function lj(t,e,n,r){if(e[0].type===qM)cj(n,r,e[0].value);else if(e[0].type===$M)for(t in n.scales)cj(n,r,t)}function cj(t,e,n){const r=oj+n;if(!Object(p.t)(e,r))try{e[r]=t.scaleRef(n)}catch(t){}}const fj={random:function(){return ir()},cumulativeNormal:yr,cumulativeLogNormal:Mr,cumulativeUniform:Dr,densityNormal:vr,densityLogNormal:Or,densityUniform:jr,quantileNormal:br,quantileLogNormal:kr,quantileUniform:Cr,sampleNormal:mr,sampleLogNormal:Ar,sampleUniform:Er,isArray:p.y,isBoolean:p.z,isDate:p.A,isDefined:function(t){return void 0!==t},isNumber:p.C,isObject:p.D,isRegExp:p.E,isString:p.F,isTuple:b,isValid:function(t){return null!=t&&t==t},toBoolean:p.W,toDate:p.X,toNumber:p.Y,toString:p.ab,flush:p.s,lerp:p.H,merge:function(){var t=[].slice.call(arguments);return t.unshift({}),p.m.apply(null,t)},pad:p.M,peek:p.R,span:p.T,inrange:p.x,truncate:p.bb,rgb:gd,lab:_p,hcl:Ep,hsl:wd,luminance:LE,contrast:function(t,e){const n=LE(t),r=LE(e);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},sequence:Gi,format:function(t,e){return IE("format",zh,e)(t)},utcFormat:function(t,e){return IE("utcFormat",he,e)(t)},utcParse:function(t,e){return IE("utcParse",de,e)(t)},timeFormat:$E,timeParse:function(t,e){return IE("timeParse",fe,e)(t)},monthFormat:function(t){return WE(t,1,"%B")},monthAbbrevFormat:function(t){return WE(t,1,"%b")},dayFormat:function(t){return WE(0,2+t,"%A")},dayAbbrevFormat:function(t){return WE(0,2+t,"%a")},quarter:p.S,utcquarter:p.db,warn:function(){return JE(this.context.dataflow,"warn",arguments)},info:function(){return JE(this.context.dataflow,"info",arguments)},debug:function(){return JE(this.context.dataflow,"debug",arguments)},extent:p.n,inScope:function(t){let e=this.context.group,n=!1;if(e)for(;t;){if(t===e){n=!0;break}t=t.mark.group}return n},intersect:function(t,e,n){if(!t)return[];const[r,i]=t,a=(new Ja).set(r[0],r[1],i[0],i[1]);return function(t,e,n){const r=[],i=(new Ja).union(e),a=t.marktype;return a?zc(t,i,n,r):"group"===a?Nc(t,i,n,r):Object(p.l)("Intersect scene must be mark node or group item.")}(n||this.context.dataflow.scenegraph().root,a,function(t){let e=null;if(t){const n=Object(p.g)(t.marktype),r=Object(p.g)(t.markname);e=t=>(!n.length||n.some(e=>t.marktype===e))&&(!r.length||r.some(e=>t.name===e))}return e}(e))},clampRange:p.h,pinchDistance:function(t){const e=t.touches,n=e[0].clientX-e[1].clientX,r=e[0].clientY-e[1].clientY;return Math.sqrt(n*n+r*r)},pinchAngle:function(t){const e=t.touches;return Math.atan2(e[0].clientY-e[1].clientY,e[0].clientX-e[1].clientX)},screen:function(){return ij?ij.screen:{}},containerSize:function(){const t=this.context.dataflow,e=t.container&&t.container();return e?[e.clientWidth,e.clientHeight]:[void 0,void 0]},windowSize:function(){return ij?[ij.innerWidth,ij.innerHeight]:[void 0,void 0]},bandspace:function(t,e,n){return Of(t||0,e||0,n||0)},setdata:function(t,e){const n=this.context.dataflow,r=this.context.data[t].input;return n.pulse(r,n.changeset().remove(p.cb).insert(e)),1},pathShape:function(t){let e=null;return function(n){return n?qo(n,e=e||Co(t)):t}},panLinear:p.N,panLog:p.O,panPow:p.P,panSymlog:p.Q,zoomLinear:p.gb,zoomLog:p.hb,zoomPow:p.ib,zoomSymlog:p.jb,encode:function(t,e,n){if(t){const n=this.context.dataflow,r=t.mark.source;n.pulse(r,n.changeset().encode(t,e))}return void 0!==n?n:t},modify:function(t,e,n,r,i,a){let u,o,s=this.context.dataflow,l=this.context.data[t],c=l.input,f=l.changes,h=s.stamp();if(!1===s._trigger||!(c.value.length||e||r))return 0;if((!f||f.stamp<h)&&(l.changes=f=s.changeset(),f.stamp=h,s.runAfter((function(){l.modified=!0,s.pulse(c,f).run()}),!0,1)),n&&(u=!0===n?p.cb:Object(p.y)(n)||b(n)?n:tj(n),f.remove(u)),e&&f.insert(e),r&&(u=tj(r),c.value.some(u)?f.remove(u):f.insert(r)),i)for(o in a)f.modify(i,o,a[o]);return 1}},hj=["view","item","group","xy","x","y"],dj="event.vega.",pj="this.",gj={};function mj(t,e,n){return 1===arguments.length?fj[t]:(fj[t]=e,n&&(gj[t]=n),yj&&(yj.functions[t]=pj+t),this)}mj("bandwidth",(function(t,e){const n=VE(t,(e||this).context);return n&&n.bandwidth?n.bandwidth():0}),lj),mj("copy",(function(t,e){const n=VE(t,(e||this).context);return n?n.copy():void 0}),lj),mj("domain",(function(t,e){const n=VE(t,(e||this).context);return n?n.domain():[]}),lj),mj("range",(function(t,e){const n=VE(t,(e||this).context);return n&&n.range?n.range():[]}),lj),mj("invert",(function(t,e,n){const r=VE(t,(n||this).context);return r?Object(p.y)(e)?(r.invertRange||r.invert)(e):(r.invert||r.invertExtent)(e):void 0}),lj),mj("scale",(function(t,e,n){const r=VE(t,(n||this).context);return r&&void 0!==e?r(e):void 0}),lj),mj("gradient",(function(t,e,n,r,i){t=VE(t,(i||this).context);const a=function(t,e){var n,r=[];return n={gradient:"linear",x1:t?t[0]:0,y1:t?t[1]:0,x2:e?e[0]:1,y2:e?e[1]:0,stops:r,stop:function(t,e){return r.push({offset:t,color:e}),n}}}(e,n);let u=t.domain(),o=u[0],s=Object(p.R)(u),l=p.v;return s-o?l=qg(t,o,s):t=(t.interpolator?zg("sequential")().interpolator(t.interpolator()):zg("linear")().interpolate(t.interpolate()).range(t.range())).domain([o=0,s=1]),t.ticks&&(o!==(u=t.ticks(+r||15))[0]&&u.unshift(o),s!==Object(p.R)(u)&&u.push(s)),u.forEach(e=>a.stop(l(e),t(e))),a}),lj),mj("geoArea",XE,lj),mj("geoBounds",GE,lj),mj("geoCentroid",ZE,lj),mj("geoShape",(function(t,e,n){const r=VE(t,(n||this).context);return function(t){return r?r.path.context(t)(e):""}}),lj),mj("indata",(function(t,e,n){const r=this.context.data[t]["index:"+e],i=r?r.value.get(n):void 0;return i?i.count:i}),(function(t,e,n,r){e[0].type!==qM&&Object(p.l)("First argument to indata must be a string literal."),e[1].type!==qM&&Object(p.l)("Second argument to indata must be a string literal.");const i=e[0].value,a=e[1].value,u=uj+a;Object(p.t)(u,r)||(r[u]=n.getData(i).indataRef(n,a))})),mj("data",UE,sj),mj("treePath",(function(t,e,n){const r=rj(t,this),i=r[e],a=r[n];return i&&a?i.path(a).map(nj):void 0}),sj),mj("treeAncestors",(function(t,e){const n=rj(t,this)[e];return n?n.ancestors().map(nj):void 0}),sj),mj("vlSelectionTest",(function(t,e,n){for(var r,i,a,u,o,s=this.context.data[t],l=s?s.values.value:[],c=s?s[SE]&&s[SE].value:void 0,f=n===ME,h=l.length,d=0;d<h;++d)if(r=l[d],c&&f){if(-1===(a=(i=i||{})[u=r.unit]||0))continue;if(o=BE(e,r),i[u]=o?-1:++a,o&&1===c.size)return!0;if(!o&&a===c.get(u).count)return!1}else if(f^(o=BE(e,r)))return o;return h&&f}),NE),mj("vlSelectionResolve",(function(t,e){for(var n,r,i,a,u,o,s,l,c,f,h,d=this.context.data[t],g=d?d.values.value:[],m={},v={},y=g.length,b=0;b<y;++b)for(a=(n=g[b]).unit,r=n.fields,i=n.values,f=0,h=r.length;f<h;++f)u=r[f],s=(o=m[u.field]||(m[u.field]={}))[a]||(o[a]=[]),v[u.field]=l=u.type.charAt(0),c=TE[l+"_union"],o[a]=c(s,Object(p.g)(i[f]));return e=e||kE,Object.keys(m).forEach((function(t){m[t]=Object.keys(m[t]).map((function(e){return m[t][e]})).reduce((function(n,r){return void 0===n?r:TE[v[t]+"_"+e](n,r)}))})),m}),NE);const vj={blacklist:["_"],whitelist:["datum","event","item"],fieldvar:"datum",globalvar:function(t){return"_["+Object(p.V)("$"+t)+"]"},functions:function(t){const e=OE(t);hj.forEach(t=>e[t]=dj+t);for(let t in fj)e[t]=pj+t;return e},constants:AE,visitors:gj};var yj=function(t){var e=(t=t||{}).whitelist?Object(p.Z)(t.whitelist):{},n=t.blacklist?Object(p.Z)(t.blacklist):{},r=t.constants||AE,i=(t.functions||OE)(f),a=t.globalvar,u=t.fieldvar,o={},s={},l=0,c=Object(p.B)(a)?a:function(t){return a+'["'+t+'"]'};function f(t){if(Object(p.F)(t))return t;var e=h[t.type];return null==e&&Object(p.l)("Unsupported type: "+t.type),e(t)}var h={Literal:function(t){return t.raw},Identifier:function(t){var i=t.name;return l>0?i:Object(p.t)(n,i)?Object(p.l)("Illegal identifier: "+i):Object(p.t)(r,i)?r[i]:Object(p.t)(e,i)?i:(o[i]=1,c(i))},MemberExpression:function(t){var e=!t.computed,n=f(t.object);e&&(l+=1);var r=f(t.property);return n===u&&(s[function(t){var e=t&&t.length-1;return e&&('"'===t[0]&&'"'===t[e]||"'"===t[0]&&"'"===t[e])?t.slice(1,-1):t}(r)]=1),e&&(l-=1),n+(e?"."+r:"["+r+"]")},CallExpression:function(t){"Identifier"!==t.callee.type&&Object(p.l)("Illegal callee type: "+t.callee.type);var e=t.callee.name,n=t.arguments,r=Object(p.t)(i,e)&&i[e];return r||Object(p.l)("Unrecognized function: "+e),Object(p.B)(r)?r(n):r+"("+n.map(f).join(",")+")"},ArrayExpression:function(t){return"["+t.elements.map(f).join(",")+"]"},BinaryExpression:function(t){return"("+f(t.left)+t.operator+f(t.right)+")"},UnaryExpression:function(t){return"("+t.operator+f(t.argument)+")"},ConditionalExpression:function(t){return"("+f(t.test)+"?"+f(t.consequent)+":"+f(t.alternate)+")"},LogicalExpression:function(t){return"("+f(t.left)+t.operator+f(t.right)+")"},ObjectExpression:function(t){return"{"+t.properties.map(f).join(",")+"}"},Property:function(t){l+=1;var e=f(t.key);return l-=1,e+":"+f(t.value)}};function d(t){var e={code:f(t),globals:Object.keys(o),fields:Object.keys(s)};return o={},s={},e}return d.functions=i,d.constants=r,d}(vj);function bj(t,e,n){";"!==e[e.length-1]&&(e="return("+e+");");var r=Function.apply(null,t.concat(e));return n&&n.functions?r.bind(n.functions):r}function _j(t,e){return bj(["event"],t,e)}function xj(t,e){return bj(["item","_"],t,e)}function wj(t,e,n){var r,i;for(r in n=n||{},t)i=t[r],n[r]=Object(p.y)(i)?i.map((function(t){return Aj(t,e,n)})):Aj(i,e,n);return n}function Aj(t,e,n){if(!t||!Object(p.D)(t))return t;for(var r,i=0,a=Oj.length;i<a;++i)if(r=Oj[i],Object(p.t)(t,r.key))return r.parse(t,e,n);return t}var Oj=[{key:"$ref",parse:function(t,e){return e.get(t.$ref)||Object(p.l)("Operator not defined: "+t.$ref)}},{key:"$key",parse:function(t,e){var n="k:"+t.$key+"_"+!!t.$flat;return e.fn[n]||(e.fn[n]=Object(p.G)(t.$key,t.$flat))}},{key:"$expr",parse:function(t,e,n){t.$params&&wj(t.$params,e,n);var r="e:"+t.$expr+"_"+t.$name;return e.fn[r]||(e.fn[r]=Object(p.d)(function(t,e){return bj(["datum","_"],t,e)}(t.$expr,e),t.$fields,t.$name))}},{key:"$field",parse:function(t,e){if(!t.$field)return null;var n="f:"+t.$field+"_"+t.$name;return e.fn[n]||(e.fn[n]=Object(p.r)(t.$field,t.$name))}},{key:"$encode",parse:function(t,e){var n,r,i=t.$encode,a={};for(n in i)r=i[n],a[n]=Object(p.d)(xj(r.$expr,e),r.$fields),a[n].output=r.$output;return a}},{key:"$compare",parse:function(t,e){var n="c:"+t.$compare+"_"+t.$order,r=Object(p.g)(t.$compare).map((function(t){return t&&t.$tupleid?_:t}));return e.fn[n]||(e.fn[n]=Object(p.i)(r,t.$order))}},{key:"$context",parse:function(t,e){return e}},{key:"$subflow",parse:function(t,e){var n=t.$subflow;return function(t,r,i){var a=jj(n,e.fork()),u=a.get(n.operators[0].id),o=a.signals.parent;return o&&o.set(i),u}}},{key:"$tupleid",parse:function(){return _}}];function Mj(t){return(t+"").toLowerCase()}var kj=function(t,e){"operator"!==Mj(t.type)&&t.type?e.transform(t,t.type):e.operator(t,t.update?function(t,e){return bj(["_"],t,e)}(t.update,e):null)};var Ej=function(t,e){var n=Object(p.D)(n=t.source)?n.$ref:n,r=e.get(n),i=null,a=t.update,u=void 0;r||Object(p.l)("Source not defined: "+t.source),i=t.target&&t.target.$expr?_j(t.target.$expr,e):e.get(t.target),a&&a.$expr&&(a.$params&&(u=wj(a.$params,e)),a=function(t,e){return bj(["_","event"],t,e)}(a.$expr,e)),e.update(t,r,i,a,u)},jj=function(t,e){var n=t.operators||[];return t.background&&(e.background=t.background),t.eventConfig&&(e.eventConfig=t.eventConfig),n.forEach((function(t){kj(t,e)})),n.forEach((function(t){!function(t,e){if(t.params){var n=e.get(t.id);n||Object(p.l)("Invalid operator id: "+t.id),e.dataflow.connect(n,n.parameters(wj(t.params,e),t.react,t.initonly))}}(t,e)})),(t.streams||[]).forEach((function(t){!function(t,e){var n,r=null!=t.filter?_j(t.filter,e):void 0,i=null!=t.stream?e.get(t.stream):void 0;t.source?i=e.events(t.source,t.type,r):t.merge&&(i=(n=t.merge.map(e.get.bind(e)))[0].merge.apply(n[0],n.slice(1))),t.between&&(n=t.between.map(e.get.bind(e)),i=i.between(n[0],n[1])),t.filter&&(i=i.filter(r)),null!=t.throttle&&(i=i.throttle(+t.throttle)),null!=t.debounce&&(i=i.debounce(+t.debounce)),null==i&&Object(p.l)("Invalid stream definition: "+JSON.stringify(t)),t.consume&&i.consume(!0),e.stream(t,i)}(t,e)})),(t.updates||[]).forEach((function(t){Ej(t,e)})),e.resolve()},Dj={skip:!0};function Cj(t,e,n){this.dataflow=t,this.transforms=e,this.events=t.events.bind(t),this.signals={},this.scales={},this.nodes={},this.data={},this.fn={},n&&(this.functions=Object.create(n),this.functions.context=this)}function Fj(t){this.dataflow=t.dataflow,this.transforms=t.transforms,this.functions=t.functions,this.events=t.events,this.signals=Object.create(t.signals),this.scales=Object.create(t.scales),this.nodes=Object.create(t.nodes),this.data=Object.create(t.data),this.fn=Object.create(t.fn),t.functions&&(this.functions=Object.create(t.functions),this.functions.context=this)}Cj.prototype=Fj.prototype={fork:function(){var t=new Fj(this);return(this.subcontext||(this.subcontext=[])).push(t),t},get:function(t){return this.nodes[t]},set:function(t,e){return this.nodes[t]=e},add:function(t,e){var n,r=this,i=r.dataflow;if(r.set(t.id,e),"collect"===Mj(t.type)&&(n=t.value)&&(n.$ingest?i.ingest(e,n.$ingest,n.$format):n.$request?i.preload(e,n.$request,n.$format):i.pulse(e,i.changeset().insert(n))),t.root&&(r.root=e),t.parent){var a=r.get(t.parent.$ref);a?(i.connect(a,[e]),e.targets().add(a)):(r.unresolved=r.unresolved||[]).push((function(){a=r.get(t.parent.$ref),i.connect(a,[e]),e.targets().add(a)}))}if(t.signal&&(r.signals[t.signal]=e),t.scale&&(r.scales[t.scale]=e),t.data)for(var u in t.data)n=r.data[u]||(r.data[u]={}),t.data[u].forEach((function(t){n[t]=e}))},resolve:function(){return(this.unresolved||[]).forEach((function(t){t()})),delete this.unresolved,this},operator:function(t,e){this.add(t,this.dataflow.add(t.value,e))},transform:function(t,e){this.add(t,this.dataflow.add(this.transforms[Mj(e)]))},stream:function(t,e){this.set(t.id,e)},update:function(t,e,n,r,i){this.dataflow.on(e,n,r,i,t.options)},getState:function(t){var e=this,n={};if(t.signals){var r=n.signals={};Object.keys(e.signals).forEach((function(n){var i=e.signals[n];t.signals(n,i)&&(r[n]=i.value)}))}if(t.data){var i=n.data={};Object.keys(e.data).forEach((function(n){var r=e.data[n];t.data(n,r)&&(i[n]=r.input.value)}))}return e.subcontext&&!1!==t.recurse&&(n.subcontext=e.subcontext.map((function(e){return e.getState(t)}))),n},setState:function(t){var e=this,n=e.dataflow,r=t.data,i=t.signals;Object.keys(i||{}).forEach((function(t){n.update(e.signals[t],i[t],Dj)})),Object.keys(r||{}).forEach((function(t){n.pulse(e.data[t].input,n.changeset().remove(p.cb).insert(r[t]))})),(t.subcontext||[]).forEach((function(t,n){var r=e.subcontext[n];r&&r.setState(t)}))}};var Sj=function(t,e,n){return jj(e,function(t,e,n){return new Cj(t,e,n)}(t,Hn,n||fj))};var Bj="width",Tj="height",Rj="padding",zj={skip:!0};function Nj(t,e){var n=t.autosize(),r=t.padding();return e-(n&&n.contains===Rj?r.left+r.right:0)}function Pj(t,e){var n=t.autosize(),r=t.padding();return e-(n&&n.contains===Rj?r.top+r.bottom:0)}function Lj(t,e){return e.modified&&Object(p.y)(e.input.value)&&t.indexOf("_:vega:_")}function Uj(t,e){return!("parent"===t||e instanceof Hn.proxy)}var qj=function(t,e,n,r){var i=t.element();i&&i.setAttribute("title",function(t){return null==t?"":Object(p.y)(t)?Ij(t):Object(p.D)(t)&&!Object(p.A)(t)?(e=t,Object.keys(e).map((function(t){var n=e[t];return t+": "+(Object(p.y)(n)?Ij(n):$j(n))})).join("\n")):t+"";var e}(r))};function Ij(t){return"["+t.map($j).join(", ")+"]"}function $j(t){return Object(p.y)(t)?"[â€¦]":Object(p.D)(t)&&!Object(p.A)(t)?"{â€¦}":t}function Yj(t,e){e=e||{},In.call(this),e.loader&&this.loader(e.loader),e.logger&&this.logger(e.logger),null!=e.logLevel&&this.logLevel(e.logLevel),this._el=null,this._elBind=null,this._renderType=e.renderer||Bc.Canvas,this._scenegraph=new Tl;var n=this._scenegraph.root;this._renderer=null,this._tooltip=e.tooltip||qj,this._redraw=!0,this._handler=(new Gl).scene(n),this._preventDefault=!1,this._timers=[],this._eventListeners=[],this._resizeListeners=[],this._eventConfig=function(t){const e=Object(p.m)({defaults:{}},t),n=(t,e)=>{e.forEach(e=>{Object(p.y)(t[e])&&(t[e]=Object(p.Z)(t[e]))})};return n(e.defaults,["prevent","allow"]),n(e,["view","window","selector"]),e}(t.eventConfig);var r=Sj(this,t,e.functions);this._runtime=r,this._signals=r.signals,this._bind=(t.bindings||[]).map((function(t){return{state:null,param:Object(p.m)({},t)}})),r.root&&r.root.set(n),n.source=r.data.root.input,this.pulse(r.data.root.input,this.changeset().insert(n.items)),this._background=e.background||r.background||null,this._width=this.width(),this._height=this.height(),this._viewWidth=Nj(this,this._width),this._viewHeight=Pj(this,this._height),this._origin=[0,0],this._resize=0,this._autosize=1,function(t){var e=t._signals,n=e[Bj],r=e[Tj],i=e[Rj];function a(){t._autosize=t._resize=1}t._resizeWidth=t.add(null,(function(e){t._width=e.size,t._viewWidth=Nj(t,e.size),a()}),{size:n}),t._resizeHeight=t.add(null,(function(e){t._height=e.size,t._viewHeight=Pj(t,e.size),a()}),{size:r});var u=t.add(null,a,{pad:i});t._resizeWidth.rank=n.rank+1,t._resizeHeight.rank=r.rank+1,u.rank=i.rank+1}(this),iM(this),e.hover&&this.hover(),e.container&&this.initialize(e.container,e.bind)}var Wj=Object(p.w)(Yj,In);function Vj(t,e){return Object(p.t)(t._signals,e)?t._signals[e]:Object(p.l)("Unrecognized signal name: "+Object(p.V)(e))}function Hj(t,e){var n=(t._targets||[]).filter((function(t){var n=t._update;return n&&n.handler===e}));return n.length?n[0]:null}function Xj(t,e,n,r){var i=Hj(n,r);return i||((i=SM(this,(function(){r(e,n.value)}))).handler=r,t.on(n,null,i)),t}function Gj(t,e,n){var r=Hj(e,n);return r&&e._targets.remove(r),t}Wj.evaluate=async function(t,e,n){if(await In.prototype.evaluate.call(this,t,e),this._redraw||this._resize)try{this._renderer&&(this._resize&&(this._resize=0,i=lM(r=this),a=oM(r),u=sM(r),r._renderer.background(r._background),r._renderer.resize(a,u,i),r._handler.origin(i),r._resizeListeners.forEach((function(t){try{t(a,u)}catch(t){r.error(t)}}))),await this._renderer.renderAsync(this._scenegraph.root)),this._redraw=!1}catch(t){this.error(t)}var r,i,a,u;return n&&m(this,n),this},Wj.dirty=function(t){this._redraw=!0,this._renderer&&this._renderer.dirty(t)},Wj.container=function(){return this._el},Wj.scenegraph=function(){return this._scenegraph},Wj.origin=function(){return this._origin.slice()},Wj.signal=function(t,e,n){var r=Vj(this,t);return 1===arguments.length?r.value:this.update(r,e,n)},Wj.background=function(t){return arguments.length?(this._background=t,this._resize=1,this):this._background},Wj.width=function(t){return arguments.length?this.signal("width",t):this.signal("width")},Wj.height=function(t){return arguments.length?this.signal("height",t):this.signal("height")},Wj.padding=function(t){return arguments.length?this.signal("padding",t):this.signal("padding")},Wj.autosize=function(t){return arguments.length?this.signal("autosize",t):this.signal("autosize")},Wj.renderer=function(t){return arguments.length?(Rc(t)||Object(p.l)("Unrecognized renderer type: "+t),t!==this._renderType&&(this._renderType=t,this._resetRenderer()),this):this._renderType},Wj.tooltip=function(t){return arguments.length?(t!==this._tooltip&&(this._tooltip=t,this._resetRenderer()),this):this._tooltip},Wj.loader=function(t){return arguments.length?(t!==this._loader&&(In.prototype.loader.call(this,t),this._resetRenderer()),this):this._loader},Wj.resize=function(){return this._autosize=1,this.touch(Vj(this,"autosize"))},Wj._resetRenderer=function(){this._renderer&&(this._renderer=null,this.initialize(this._el,this._elBind))},Wj._resizeView=function(t,e,n,r,i,a){this.runAfter((function(u){var o=0;u._autosize=0,u.width()!==n&&(o=1,u.signal(Bj,n,zj),u._resizeWidth.skip(!0)),u.height()!==r&&(o=1,u.signal(Tj,r,zj),u._resizeHeight.skip(!0)),u._viewWidth!==t&&(u._resize=1,u._viewWidth=t),u._viewHeight!==e&&(u._resize=1,u._viewHeight=e),u._origin[0]===i[0]&&u._origin[1]===i[1]||(u._resize=1,u._origin=i),o&&u.run("enter"),a&&u.runAfter(t=>t.resize())}),!1,1)},Wj.addEventListener=function(t,e,n){var r=e;return n&&!1===n.trap||((r=SM(this,e)).raw=e),this._handler.on(t,r),this},Wj.removeEventListener=function(t,e){for(var n,r,i=this._handler.handlers(t),a=i.length;--a>=0;)if(r=i[a].type,n=i[a].handler,t===r&&(e===n||e===n.raw)){this._handler.off(r,n);break}return this},Wj.addResizeListener=function(t){var e=this._resizeListeners;return e.indexOf(t)<0&&e.push(t),this},Wj.removeResizeListener=function(t){var e=this._resizeListeners,n=e.indexOf(t);return n>=0&&e.splice(n,1),this},Wj.addSignalListener=function(t,e){return Xj(this,t,Vj(this,t),e)},Wj.removeSignalListener=function(t,e){return Gj(this,Vj(this,t),e)},Wj.addDataListener=function(t,e){return Xj(this,t,aM(this,t).values,e)},Wj.removeDataListener=function(t,e){return Gj(this,aM(this,t).values,e)},Wj.preventDefault=function(t){return arguments.length?(this._preventDefault=t,this):this._preventDefault},Wj.timer=function(t,e){this._timers.push(function(t,e,n){var r=new xw,i=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?bw():+n,r.restart((function a(u){u+=i,r.restart(a,i+=e,n),t(u)}),e,n),r)}((function(e){t({timestamp:Date.now(),elapsed:e})}),e))},Wj.events=function(t,e,n){var r,i=this,a=new P(n),u=function(n,r){i.runAsync(null,()=>{t===fM&&function(t,e){var n=t._eventConfig.defaults,r=n.prevent,i=n.allow;return!1!==r&&!0!==i&&(!0===r||!1===i||(r?r[e]:i?!i[e]:t.preventDefault()))}(i,e)&&n.preventDefault(),a.receive(cM(i,n,r))})};if(t===hM)gM(i,"timer",e)&&i.timer(u,e);else if(t===fM)gM(i,"view",e)&&i.addEventListener(e,u,pM);else if(t===dM?gM(i,"window",e)&&"undefined"!=typeof window&&(r=[window]):"undefined"!=typeof document&&gM(i,"selector",e)&&(r=document.querySelectorAll(t)),r){for(var o=0,s=r.length;o<s;++o)r[o].addEventListener(e,u);i._eventListeners.push({type:e,sources:r,handler:u})}else i.warn("Can not resolve event source: "+t);return a},Wj.finalize=function(){var t,e,n,r=this._tooltip,i=this._timers,a=this._eventListeners;for(t=i.length;--t>=0;)i[t].stop();for(t=a.length;--t>=0;)for(e=(n=a[t]).sources.length;--e>=0;)n.sources[e].removeEventListener(n.type,n.handler);return r&&r.call(this,this._handler,null,null,null),this},Wj.hover=function(t,e){return e=[e||"update",(t=[t||"hover"])[0]],this.on(this.events("view","mouseover",mM),vM,yM(t)),this.on(this.events("view","mouseout",mM),vM,yM(e)),this},Wj.data=function(t,e){return arguments.length<2?aM(this,t).values.value:uM.call(this,t,j().remove(p.cb).insert(e))},Wj.change=uM,Wj.insert=function(t,e){return uM.call(this,t,j().insert(e))},Wj.remove=function(t,e){return uM.call(this,t,j().remove(e))},Wj.scale=function(t){var e=this._runtime.scales;return Object(p.t)(e,t)||Object(p.l)("Unrecognized scale or projection: "+t),e[t].value},Wj.initialize=function(t,e){var n,r,i=this,a=i._renderType,u=i._eventConfig.bind,o=Rc(a);return t=i._el=t?BM(i,t):null,o||i.error("Unrecognized renderer type: "+a),n=o.handler||Gl,r=t?o.renderer:o.headless,i._renderer=r?FM(i,i._renderer,t,r):null,i._handler=function(t,e,n,r){var i=new r(t.loader(),SM(t,t.tooltip())).scene(t.scenegraph().root).initialize(n,lM(t),t);return e&&e.handlers().forEach((function(t){i.on(t.type,t.handler)})),i}(i,i._handler,t,n),i._redraw=!0,t&&"none"!==u&&(e=e?i._elBind=BM(i,e):t.appendChild(bM("div",{class:"vega-bindings"})),i._bind.forEach((function(t){t.param.element&&"container"!==u&&(t.element=BM(i,t.param.element))})),i._bind.forEach((function(t){OM(i,t.element||e,t)}))),i},Wj.toImageURL=async function(t,e){t!==Bc.Canvas&&t!==Bc.SVG&&t!==Bc.PNG&&Object(p.l)("Unrecognized image type: "+t);const n=await TM(this,t,e);return t===Bc.SVG?(r=n.svg(),i=new Blob([r],{type:"image/svg+xml"}),window.URL.createObjectURL(i)):n.canvas().toDataURL("image/png");var r,i},Wj.toCanvas=async function(t,e){return(await TM(this,Bc.Canvas,t,e)).canvas()},Wj.toSVG=async function(t){return(await TM(this,Bc.SVG,t)).svg()},Wj.getState=function(t){return this._runtime.getState(t||{data:Lj,signals:Uj,recurse:!0})},Wj.setState=function(t){return this.runAsync(null,e=>{e._trigger=!1,e._runtime.setState(t)},t=>{t._trigger=!0}),this};var Zj=function(t,e){return t=t||e.autosize,Object(p.D)(t)?t:{type:t||"pad"}},Jj=function(t,e){return t=t||e.padding,Object(p.D)(t)?{top:Qj(t.top),bottom:Qj(t.bottom),left:Qj(t.left),right:Qj(t.right)}:{top:n=Qj(t),bottom:n,left:n,right:n};var n};function Qj(t){return+t||0}var Kj=["value","update","init","react","bind"];function tD(t,e){Object(p.l)(t+' for "outer" push: '+Object(p.V)(e))}var eD=function(t,e){var n=t.name;if("outer"===t.push)e.signals[n]||tD("No prior signal definition",n),Kj.forEach((function(e){void 0!==t[e]&&tD("Invalid property ",e)}));else{var r=e.addSignal(n,t.value);!1===t.react&&(r.react=!1),t.bind&&e.addBinding(n,t.bind)}},nD=function(t,e,n){var r,i,a={};try{r=function(t){NM=0,PM=(zM=t).length,LM=null,Jk();var e=wE();if(LM.type!==tk)throw new Error("Unexpect token after expression.");return e}(t=Object(p.F)(t)?t:Object(p.V)(t)+"")}catch(e){Object(p.l)("Expression parse error: "+t)}return r.visit((function(t){if(t.type===VM){var n=t.callee.name,r=vj.visitors[n];r&&r(n,t.arguments,e,a)}})),(i=yj(r)).globals.forEach((function(t){var n="$"+t;!Object(p.t)(a,n)&&e.getSignal(t)&&(a[n]=e.signalRef(t))})),{$expr:n?n+"return("+i.code+");":i.code,$fields:i.fields,$params:a}};function rD(t,e,n,r){this.id=-1,this.type=t,this.value=e,this.params=n,r&&(this.parent=r)}function iD(t,e,n,r){return new rD(t,e,n,r)}function aD(t,e){return iD("operator",t,e)}function uD(t){var e={$ref:t.id};return t.id<0&&(t.refs=t.refs||[]).push(e),e}function oD(t,e){return e?{$field:t,$name:e}:{$field:t}}var sD=oD("key");function lD(t,e){return{$compare:t,$order:e}}var cD="descending";function fD(t,e){return(t&&t.signal?"$"+t.signal:t||"")+(t&&e?"_":"")+(e&&e.signal?"$"+e.signal:e||"")}var hD="scope",dD="view";function pD(t){return t&&t.signal}function gD(t){if(pD(t))return!0;if(Object(p.D)(t))for(var e in t)if(gD(t[e]))return!0;return!1}function mD(t,e){return null!=t?t:e}function vD(t){return t&&t.signal||t}var yD="timer";function bD(t,e){return(t.merge?_D:t.stream?xD:t.type?wD:Object(p.l)("Invalid stream specification: "+Object(p.V)(t)))(t,e)}function _D(t,e){var n=AD({merge:t.merge.map(t=>bD(t,e))},t,e);return e.addStream(n).id}function xD(t,e){var n=AD({stream:bD(t.stream,e)},t,e);return e.addStream(n).id}function wD(t,e){var n,r,i;return t.type===yD?(n=e.event(yD,t.throttle),t={between:t.between,filter:t.filter}):n=e.event((i=t.source)===hD?dD:i||dD,t.type),r=AD({stream:n},t,e),1===Object.keys(r).length?n:e.addStream(r).id}function AD(t,e,n){var r,i,a,u,o=e.between;return o&&(2!==o.length&&Object(p.l)('Stream "between" parameter must have 2 entries: '+Object(p.V)(e)),t.between=[bD(o[0],n),bD(o[1],n)]),o=e.filter?[].concat(e.filter):[],(e.marktype||e.markname||e.markrole)&&o.push((r=e.marktype,i=e.markname,a=e.markrole,(u="event.item")+(r&&"*"!==r?"&&"+u+".mark.marktype==='"+r+"'":"")+(a?"&&"+u+".mark.role==='"+a+"'":"")+(i?"&&"+u+".mark.name==='"+i+"'":""))),e.source===hD&&o.push("inScope(event.item)"),o.length&&(t.filter=nD("("+o.join(")&&(")+")").$expr),null!=(o=e.throttle)&&(t.throttle=+o),null!=(o=e.debounce)&&(t.debounce=+o),e.consume&&(t.consume=!0),t}var OD,MD,kD="view",ED="[",jD="]",DD="{",CD="}",FD=":",SD=",",BD="@",TD=">",RD=/[[\]{}]/,zD={"*":1,arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1};function ND(t,e,n,r,i){for(var a,u=0,o=t.length;e<o;++e){if(a=t[e],!u&&a===n)return e;i&&i.indexOf(a)>=0?--u:r&&r.indexOf(a)>=0&&++u}return e}function PD(t){for(var e=[],n=0,r=t.length,i=0;i<r;)i=ND(t,i,SD,ED+DD,jD+CD),e.push(t.substring(n,i).trim()),n=++i;if(0===e.length)throw"Empty event selector: "+t;return e}function LD(t){return"["===t[0]?function(t){var e,n,r=t.length,i=1;if((i=ND(t,i,jD,ED,jD))===r)throw"Empty between selector: "+t;if(2!==(e=PD(t.substring(1,i))).length)throw"Between selector must have two elements: "+t;if((t=t.slice(i+1).trim())[0]!==TD)throw"Expected '>' after between selector: "+t;if(e=e.map(LD),(n=LD(t.slice(1).trim())).between)return{between:e,stream:n};n.between=e;return n}(t):function(t){var e,n,r={source:OD},i=[],a=[0,0],u=0,o=0,s=t.length,l=0;if(t[s-1]===CD){if(!((l=t.lastIndexOf(DD))>=0))throw"Unmatched right brace: "+t;try{a=function(t){var e=t.split(SD);if(!t.length||e.length>2)throw t;return e.map((function(e){var n=+e;if(n!=n)throw t;return n}))}(t.substring(l+1,s-1))}catch(e){throw"Invalid throttle specification: "+t}t=t.slice(0,l).trim(),s=t.length,l=0}if(!s)throw t;t[0]===BD&&(u=++l);(e=ND(t,l,FD))<s&&(i.push(t.substring(o,e).trim()),o=l=++e);if((l=ND(t,l,ED))===s)i.push(t.substring(o,s).trim());else if(i.push(t.substring(o,l).trim()),n=[],(o=++l)===s)throw"Unmatched left bracket: "+t;for(;l<s;){if((l=ND(t,l,jD))===s)throw"Unmatched left bracket: "+t;if(n.push(t.substring(o,l).trim()),l<s-1&&t[++l]!==ED)throw"Expected left bracket: "+t;o=++l}if(!(s=i.length)||RD.test(i[s-1]))throw"Invalid event selector: "+t;s>1?(r.type=i[1],u?r.markname=i[0].slice(1):(c=i[0],MD[c]?r.marktype=i[0]:r.source=i[0])):r.type=i[0];var c;"!"===r.type.slice(-1)&&(r.consume=!0,r.type=r.type.slice(0,-1));null!=n&&(r.filter=n);a[0]&&(r.throttle=a[0]);a[1]&&(r.debounce=a[1]);return r}(t)}var UD=function(t,e,n){var r,i,a,u=t.events,o=t.update,s=t.encode,l=[],c={target:n};u||Object(p.l)("Signal update missing events specification."),Object(p.F)(u)&&(r=u,i=e.isSubscope()?hD:dD,OD=i||kD,MD=a||zD,u=PD(r.trim()).map(LD)),u=Object(p.g)(u).filter(t=>t.signal||t.scale?(l.push(t),0):1),l.length>1&&(l=[qD(l)]),u.length&&l.push(u.length>1?{merge:u}:u[0]),null!=s&&(o&&Object(p.l)("Signal encode and update are mutually exclusive."),o="encode(item(),"+Object(p.V)(s)+")"),c.update=Object(p.F)(o)?nD(o,e,"var datum=event.item&&event.item.datum;"):null!=o.expr?nD(o.expr,e,"var datum=event.item&&event.item.datum;"):null!=o.value?o.value:null!=o.signal?{$expr:"_.value",$params:{value:e.signalRef(o.signal)}}:Object(p.l)("Invalid signal update specification."),t.force&&(c.options={force:!0}),l.forEach((function(t){e.addUpdate(Object(p.m)(function(t,e){return{source:t.signal?e.signalRef(t.signal):t.scale?e.scaleRef(t.scale):bD(t,e)}}(t,e),c))}))};function qD(t){return{signal:"["+t.map(t=>t.scale?'scale("'+t.scale+'")':t.signal)+"]"}}function ID(t){return function(e,n,r){return iD(t,n,e||void 0,r)}}var $D=ID("aggregate"),YD=ID("axisticks"),WD=ID("bound"),VD=ID("collect"),HD=ID("compare"),XD=ID("datajoin"),GD=ID("encode"),ZD=ID("expression"),JD=(ID("extent"),ID("facet")),QD=ID("field"),KD=ID("key"),tC=ID("legendentries"),eC=ID("load"),nC=ID("mark"),rC=ID("multiextent"),iC=ID("multivalues"),aC=ID("overlap"),uC=ID("params"),oC=ID("prefacet"),sC=ID("projection"),lC=ID("proxy"),cC=ID("relay"),fC=ID("render"),hC=ID("scale"),dC=ID("sieve"),pC=ID("sortitems"),gC=ID("viewlayout"),mC=ID("values"),vC=0,yC={min:"min",max:"max",count:"sum"};function bC(t,e){var n=t.type||"linear";(function(t){switch(t){case Mf:case kf:case Ef:case jf:case Df:case Cf:case Ff:case Sf:case Bf:case Rf:case zf:case Nf:case Pf:case Lf:case Uf:case qf:return!0}return!1})(n)||Object(p.l)("Unrecognized scale type: "+Object(p.V)(n)),e.addScale(t.name,{type:n,domain:void 0})}function _C(t,e){var n,r,i=e.getScale(t.name).params;for(n in i.domain=OC(t.domain,t,e),null!=t.range&&(i.range=function t(e,n,r){var i=e.range,a=n.config.range;if(i.signal)return n.signalRef(i.signal);if(Object(p.F)(i)){if(a&&Object(p.t)(a,i))return e=Object(p.m)({},e,{range:a[i]}),t(e,n,r);"width"===i?i=[0,{signal:"width"}]:"height"===i?i=Vf(e.type)?[0,{signal:"height"}]:[{signal:"height"},0]:Object(p.l)("Unrecognized scale range value: "+Object(p.V)(i))}else{if(i.scheme)return r.scheme=Object(p.y)(i.scheme)?wC(i.scheme,n):xC(i.scheme,n),i.extent&&(r.schemeExtent=wC(i.extent,n)),void(i.count&&(r.schemeCount=xC(i.count,n)));if(i.step)return void(r.rangeStep=xC(i.step,n));if(Vf(e.type)&&!Object(p.y)(i))return OC(i,e,n);Object(p.y)(i)||Object(p.l)("Unsupported range type: "+Object(p.V)(i))}return i.map(t=>(Object(p.y)(t)?wC:xC)(t,n))}(t,e,i)),null!=t.interpolate&&function(t,e){e.interpolate=xC(t.type||t),null!=t.gamma&&(e.interpolateGamma=xC(t.gamma))}(t.interpolate,i),null!=t.nice&&(i.nice=(r=t.nice,Object(p.D)(r)?{interval:xC(r.interval),step:xC(r.step)}:xC(r))),null!=t.bins&&(i.bins=function(t,e){return t.signal||Object(p.y)(t)?wC(t,e):e.objectProperty(t)}(t.bins,e)),t)Object(p.t)(i,n)||"name"===n||(i[n]=xC(t[n],e))}function xC(t,e){return Object(p.D)(t)?t.signal?e.signalRef(t.signal):Object(p.l)("Unsupported object: "+Object(p.V)(t)):t}function wC(t,e){return t.signal?e.signalRef(t.signal):t.map(t=>xC(t,e))}function AC(t){Object(p.l)("Can not find data set: "+Object(p.V)(t))}function OC(t,e,n){if(t)return t.signal?n.signalRef(t.signal):(Object(p.y)(t)?MC:t.fields?EC:kC)(t,e,n);null==e.domainMin&&null==e.domainMax||Object(p.l)("No scale domain defined for domainMin/domainMax to override.")}function MC(t,e,n){return t.map((function(t){return xC(t,n)}))}function kC(t,e,n){var r=n.getData(t.data);return r||AC(t.data),Vf(e.type)?r.valuesRef(n,t.field,DC(t.sort,!1)):If(e.type)?r.domainRef(n,t.field):r.extentRef(n,t.field)}function EC(t,e,n){var r=t.data,i=t.fields.reduce((function(t,e){return e=Object(p.F)(e)?{data:r,field:e}:Object(p.y)(e)||e.signal?function(t,e){var n="_:vega:_"+vC++,r=VD({});if(Object(p.y)(t))r.value={$ingest:t};else if(t.signal){var i="setdata("+Object(p.V)(n)+","+t.signal+")";r.params.input=e.signalRef(i)}return e.addDataPipeline(n,[r,dC({})]),{data:n,field:"data"}}(e,n):e,t.push(e),t}),[]);return(Vf(e.type)?jC:If(e.type)?CC:FC)(t,n,i)}function jC(t,e,n){var r,i,a,u,o,s=DC(t.sort,!0);return r=n.map((function(t){var n=e.getData(t.data);return n||AC(t.data),n.countsRef(e,t.field,s)})),i={groupby:sD,pulse:r},s&&(a=s.op||"count",o=s.field?fD(a,s.field):"count",i.ops=[yC[a]],i.fields=[e.fieldRef(o)],i.as=[o]),a=e.add($D(i)),u=e.add(VD({pulse:uD(a)})),o=e.add(mC({field:sD,sort:e.sortRef(s),pulse:uD(u)})),uD(o)}function DC(t,e){return t&&(t.field||t.op?t.field||"count"===t.op?e&&t.field&&t.op&&!yC[t.op]&&Object(p.l)("Multiple domain scales can not be sorted using "+t.op):Object(p.l)("No field provided for sort aggregate op: "+t.op):Object(p.D)(t)?t.field="key":t={field:"key"}),t}function CC(t,e,n){var r=n.map((function(t){var n=e.getData(t.data);return n||AC(t.data),n.domainRef(e,t.field)}));return uD(e.add(iC({values:r})))}function FC(t,e,n){var r=n.map((function(t){var n=e.getData(t.data);return n||AC(t.data),n.extentRef(e,t.field)}));return uD(e.add(rC({extents:r})))}function SC(t,e,n){return Object(p.y)(t)?t.map((function(t){return SC(t,e,n)})):Object(p.D)(t)?t.signal?n.signalRef(t.signal):"fit"===e?t:Object(p.l)("Unsupported parameter object: "+Object(p.V)(t)):t}const BC="vertical",TC="start",RC="end",zC="value",NC="guide-label",PC="group-title",LC="group-subtitle",UC="symbol",qC="gradient",IC="discrete",$C=["size","shape","fill","stroke","strokeWidth","strokeDash","opacity"],YC={name:1,style:1,interactive:1},WC={value:0},VC={value:1};var HC=Object(p.Z)(["rule"]),XC=Object(p.Z)(["group","image","rect"]),GC=function(t,e){var n="";return HC[e]?n:(t.x2&&(t.x?(XC[e]&&(n+="if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;"),n+="o.width=o.x2-o.x;"):n+="o.x=o.x2-(o.width||0);"),t.xc&&(n+="o.x=o.xc-(o.width||0)/2;"),t.y2&&(t.y?(XC[e]&&(n+="if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;"),n+="o.height=o.y2-o.y;"):n+="o.y=o.y2-(o.height||0);"),t.yc&&(n+="o.y=o.yc-(o.height||0)/2;"),n)},ZC=function(t,e,n,r){var i=nD(t,e);return i.$fields.forEach((function(t){r[t]=1})),Object(p.m)(n,i.$params),i.$expr},JC=function(t,e,n,r){return function t(e,n,r,i){var a,u,o;if(e.signal)a="datum",o=ZC(e.signal,n,r,i);else if(e.group||e.parent){for(u=Math.max(1,e.level||1),a="item";u-- >0;)a+=".mark.group";e.parent?(o=e.parent,a+=".datum"):o=e.group}else e.datum?(a="datum",o=e.datum):Object(p.l)("Invalid field reference: "+Object(p.V)(e));e.signal||(Object(p.F)(o)?(i[o]=1,o=Object(p.U)(o).map(p.V).join("][")):o=t(o,n,r,i));return a+"["+o+"]"}(Object(p.D)(t)?t:{datum:t},e,n,r)};var QC=function(t,e,n,r,i){var a,u,o,s=KC(t.scale,n,r,i);return null!=t.range?(u=s+".range()",e=0===(a=+t.range)?u+"[0]":"($="+u+","+(1===a?"$[$.length-1]":"$[0]+"+a+"*($[$.length-1]-$[0])")+")"):(void 0!==e&&(e=s+"("+e+")"),t.band&&(o=function(t,e){if(!Object(p.F)(t))return-1;var n=e.scaleType(t);return"band"===n||"point"===n?1:0}(t.scale,n))&&(a=(u=s+".bandwidth")+"()"+(1===(a=+t.band)?"":"*"+a),o<0&&(a="("+u+"?"+a+":0)"),e=(e?e+"+":"")+a,t.extra&&(e="(datum.extra?"+s+"(datum.extra.value):"+e+")")),null==e&&(e="0")),e};function KC(t,e,n,r){var i;if(Object(p.F)(t))i=oj+t,Object(p.t)(n,i)||(n[i]=e.scaleRef(t)),i=Object(p.V)(i);else{for(i in e.scales)n[oj+i]=e.scaleRef(i);i=Object(p.V)(oj)+"+"+(t.signal?"("+ZC(t.signal,e,n,r)+")":JC(t,e,n,r))}return"_["+i+"]"}var tF=function(t,e,n,r){return Object(p.D)(t)?"("+eF(null,t,e,n,r)+")":t},eF=function(t,e,n,r,i){if(null!=e.gradient)return function(t,e,n,r){return"this.gradient("+KC(t.gradient,e,n,r)+","+Object(p.V)(t.start)+","+Object(p.V)(t.stop)+","+Object(p.V)(t.count)+")"}(e,n,r,i);var a=e.signal?ZC(e.signal,n,r,i):e.color?function(t,e,n,r){function i(t,i,a,u){return"this."+t+"("+[eF(null,i,e,n,r),eF(null,a,e,n,r),eF(null,u,e,n,r)].join(",")+").toString()"}return t.c?i("hcl",t.h,t.c,t.l):t.h||t.s?i("hsl",t.h,t.s,t.l):t.l||t.a?i("lab",t.l,t.a,t.b):t.r||t.g||t.b?i("rgb",t.r,t.g,t.b):null}(e.color,n,r,i):null!=e.field?JC(e.field,n,r,i):void 0!==e.value?Object(p.V)(e.value):void 0;return null!=e.scale&&(a=QC(e,a,n,r,i)),void 0===a&&(a=null),null!=e.exponent&&(a="Math.pow("+a+","+tF(e.exponent,n,r,i)+")"),null!=e.mult&&(a+="*"+tF(e.mult,n,r,i)),null!=e.offset&&(a+="+"+tF(e.offset,n,r,i)),e.round&&(a="Math.round("+a+")"),a},nF=function(t,e,n){const r=t+"["+Object(p.V)(e)+"]";return`$=${n};if(${r}!==$)${r}=$,m=1;`},rF=function(t,e,n,r,i){var a="";return e.forEach((function(e){var u=eF(t,e,n,r,i);a+=e.test?ZC(e.test,n,r,i)+"?"+u+":":u})),":"===Object(p.R)(a)&&(a+="null"),nF("o",t,a)};function iF(t,e,n,r){var i,a,u,o={},s="var o=item,datum=o.datum,m=0,$;";for(i in t)a=t[i],Object(p.y)(a)?s+=rF(i,a,r,n,o):(u=eF(i,a,r,n,o),s+=nF("o",i,u));return s+=GC(t,e),{$expr:s+="return m;",$fields:Object.keys(o),$output:Object.keys(t)}}var aF="mark",uF="frame",oF="title-text",sF="title-subtitle";function lF(t){return Object(p.D)(t)&&!Object(p.y)(t)?Object(p.m)({},t):{value:t}}function cF(t,e,n,r){return null!=n?(Object(p.D)(n)&&!Object(p.y)(n)?t.update[e]=n:t[r||"enter"][e]={value:n},1):0}function fF(t,e,n){for(let n in e)cF(t,n,e[n]);for(let e in n)cF(t,e,n[e],"update")}function hF(t,e,n){for(var r in e)n&&Object(p.t)(n,r)||(t[r]=Object(p.m)(t[r]||{},e[r]));return t}function dF(t,e,n,r,i,a){var u,o;for(o in(a=a||{}).encoders={$encode:u={}},t=function(t,e,n,r,i){var a,u,o,s={},l={};"legend"!=n&&0!==String(n).indexOf("axis")||(n=null);for(u in o=n===uF?i.group:n===aF?Object(p.m)({},i.mark,i[e]):null)gF(u,t)||("fill"===u||"stroke"===u)&&(gF("fill",t)||gF("stroke",t))||pF(s,u,o[u]);for(u in Object(p.g)(r).forEach((function(e){var n=i.style&&i.style[e];for(var r in n)gF(r,t)||pF(s,r,n[r])})),t=Object(p.m)({},t),s)(o=s[u]).signal?(a=a||{})[u]=o:l[u]=o;t.enter=Object(p.m)(l,t.enter),a&&(t.update=Object(p.m)(a,t.update));return t}(t,e,n,r,i.config))u[o]=iF(t[o],e,a,i);return a}function pF(t,e,n){t[e]=n&&n.signal?{signal:n.signal}:{value:n}}function gF(t,e){return e&&(e.enter&&e.enter[t]||e.update&&e.update[t])}var mF=function(t,e,n,r,i,a,u){return{type:t,name:u?u.name:void 0,role:e,style:u&&u.style||n,key:r,from:i,interactive:!(!u||!u.interactive),encode:hF(a,u,YC)}};function vF(t,e){const n=n=>mD(t[n],e[n]);return n.isVertical=n=>BC===mD(t.direction,e.direction||(n?e.symbolDirection:e.gradientDirection)),n.gradientLength=()=>mD(t.gradientLength,e.gradientLength||e.gradientWidth),n.gradientThickness=()=>mD(t.gradientThickness,e.gradientThickness||e.gradientHeight),n.entryColumns=()=>mD(t.columns,mD(e.columns,+n.isVertical(!0))),n}function yF(t,e){var n=e&&(e.update&&e.update[t]||e.enter&&e.enter[t]);return n&&n.signal?n:n?n.value:null}function bF(t,e,n){return`item.anchor === "${TC}" ? ${t} : item.anchor === "${RC}" ? ${e} : ${n}`}const _F=bF(Object(p.V)("left"),Object(p.V)("right"),Object(p.V)("center"));var xF="group",wF="text",AF=function(t,e,n,r){var i,a,u,o,s,l,c=vF(t,n),f=c.isVertical(),h=c.gradientThickness(),d=c.gradientLength();return f?(u=[0,1],o=[0,0],s=h,l=d):(u=[0,0],o=[1,0],s=d,l=h),fF(i={enter:a={opacity:WC,x:WC,y:WC,width:lF(s),height:lF(l)},update:Object(p.m)({},a,{opacity:VC,fill:{gradient:e,start:u,stop:o}}),exit:{opacity:WC}},{stroke:c("gradientStrokeColor"),strokeWidth:c("gradientStrokeWidth")},{opacity:c("gradientOpacity")}),mF("rect","legend-gradient",null,void 0,void 0,i,r)},OF=function(t,e,n,r,i){var a,u,o,s,l,c,f=vF(t,n),h=f.isVertical(),d=f.gradientThickness(),g=f.gradientLength(),m="";return h?(o="y",l="y2",s="x",c="width",m="1-"):(o="x",l="x2",s="y",c="height"),(u={opacity:WC,fill:{scale:e,field:zC}})[o]={signal:m+"datum.perc",mult:g},u[s]=WC,u[l]={signal:m+"datum.perc2",mult:g},u[c]=lF(d),fF(a={enter:u,update:Object(p.m)({},u,{opacity:VC}),exit:{opacity:WC}},{stroke:f("gradientStrokeColor"),strokeWidth:f("gradientStrokeWidth")},{opacity:f("gradientOpacity")}),mF("rect","legend-band",null,zC,i,a,r)};var MF=function(t,e,n,r){var i,a,u,o,s,l=vF(t,e),c=l.isVertical(),f=lF(l.gradientThickness()),h=l.gradientLength(),d=l("labelOverlap"),p=l("labelSeparation"),g="";return fF(i={enter:a={opacity:WC},update:u={opacity:VC,text:{field:"label"}},exit:{opacity:WC}},{fill:l("labelColor"),fillOpacity:l("labelOpacity"),font:l("labelFont"),fontSize:l("labelFontSize"),fontStyle:l("labelFontStyle"),fontWeight:l("labelFontWeight"),limit:mD(t.labelLimit,e.gradientLabelLimit)}),c?(a.align={value:"left"},a.baseline=u.baseline={signal:'datum.perc<=0?"bottom":datum.perc>=1?"top":"middle"'},o="y",s="x",g="1-"):(a.align=u.align={signal:'datum.perc<=0?"left":datum.perc>=1?"right":"center"'},a.baseline={value:"top"},o="x",s="y"),a[o]=u[o]={signal:g+"datum.perc",mult:h},a[s]=u[s]=f,f.offset=mD(t.labelOffset,e.gradientLabelOffset)||0,t=mF(wF,"legend-label",NC,zC,r,i,n),d&&(t.overlap={separation:p,method:d,order:"datum.index"}),t},kF=function(t,e,n,r,i,a,u,o){return{type:xF,name:n,role:t,style:e,from:r,interactive:i||!1,encode:a,marks:u,layout:o}},EF=function(t,e,n,r,i){var a,u,o,s,l,c,f,h=vF(t,e),d=n.entries,p=!(!d||!d.interactive),g=d?d.name:void 0,m=h("clipHeight"),v=h("symbolOffset"),y={data:"value"},b={},_=`${i} ? datum.offset : datum.size`,x=m?lF(m):{field:"size"},w="datum.index",A=`max(1, ${i})`;return x.mult=.5,b={enter:a={opacity:WC,x:{signal:_,mult:.5,offset:v},y:x},update:u={opacity:VC,x:a.x,y:a.y},exit:{opacity:WC}},t.fill||fF(b,{fill:e.symbolBaseFillColor,stroke:e.symbolBaseStrokeColor}),fF(b,{fill:h("symbolFillColor"),shape:h("symbolType"),size:h("symbolSize"),stroke:h("symbolStrokeColor"),strokeDash:h("symbolDash"),strokeDashOffset:h("symbolDashOffset"),strokeWidth:h("symbolStrokeWidth")},{opacity:h("symbolOpacity")}),$C.forEach((function(e){t[e]&&(u[e]=a[e]={scale:t[e],field:zC})})),s=mF("symbol","legend-symbol",null,zC,y,b,n.symbols),m&&(s.clip=!0),(o=lF(v)).offset=h("labelOffset"),fF(b={enter:a={opacity:WC,x:{signal:_,offset:o},y:x},update:u={opacity:VC,text:{field:"label"},x:a.x,y:a.y},exit:{opacity:WC}},{align:h("labelAlign"),baseline:h("labelBaseline"),fill:h("labelColor"),fillOpacity:h("labelOpacity"),font:h("labelFont"),fontSize:h("labelFontSize"),fontStyle:h("labelFontStyle"),fontWeight:h("labelFontWeight"),limit:h("labelLimit")}),l=mF(wF,"legend-label",NC,zC,y,b,n.labels),b={enter:{noBound:{value:!m},width:WC,height:m?lF(m):WC,opacity:WC},exit:{opacity:WC},update:u={opacity:VC,row:{signal:null},column:{signal:null}}},h.isVertical(!0)?(c=`ceil(item.mark.items.length / ${A})`,u.row.signal=`${w}%${c}`,u.column.signal=`floor(${w} / ${c})`,f={field:["row",w]}):(u.row.signal=`floor(${w} / ${A})`,u.column.signal=`${w} % ${A}`,f={field:w}),u.column.signal=`${i}?${u.column.signal}:${w}`,(t=kF("scope",null,g,r={facet:{data:r,name:"value",groupby:"index"}},p,hF(b,d,YC),[s,l])).sort=f,t};const jF='item.orient === "left"',DF='item.orient === "right"',CF=`(${jF} || ${DF})`,FF=`datum.vgrad && ${CF}`,SF=bF('"top"','"bottom"','"middle"'),BF=`datum.vgrad && ${DF} ? (${bF('"right"','"left"','"center"')}) : (${CF} && !(datum.vgrad && ${jF})) ? "left" : ${_F}`,TF=`item._anchor || (${CF} ? "middle" : "start")`,RF=`${FF} ? (${jF} ? -90 : 90) : 0`,zF=`${CF} ? (datum.vgrad ? (${DF} ? "bottom" : "top") : ${SF}) : "top"`;var NF=function(t,e){var n;return Object(p.D)(t)&&(t.signal?n=t.signal:t.path?n="pathShape("+PF(t.path)+")":t.sphere&&(n="geoShape("+PF(t.sphere)+', {type: "Sphere"})')),n?e.signalRef(n):!!t};function PF(t){return Object(p.D)(t)&&t.signal?t.signal:Object(p.V)(t)}var LF=function(t){var e=t.role||"";return e.indexOf("axis")&&e.indexOf("legend")&&e.indexOf("title")?t.type===xF?"scope":e||aF:e},UF=function(t){return{marktype:t.type,name:t.name||void 0,role:t.role||LF(t),zindex:+t.zindex||void 0}},qF=function(t,e){return t&&t.signal?e.signalRef(t.signal):!1!==t},IF=function(t,e){var n=Xn(t.type);n||Object(p.l)("Unrecognized transform type: "+Object(p.V)(t.type));var r=iD(n.type.toLowerCase(),null,$F(n,t,e));return t.signal&&e.addSignal(t.signal,e.proxy(r)),r.metadata=n.metadata||{},r};function $F(t,e,n){var r,i,a,u={};for(i=0,a=t.params.length;i<a;++i)u[(r=t.params[i]).name]=YF(r,e,n);return u}function YF(t,e,n){var r=t.type,i=e[t.name];return"index"===r?function(t,e,n){Object(p.F)(e.from)||Object(p.l)('Lookup "from" parameter must be a string literal.');return n.getData(e.from).lookupRef(n,e.key)}(0,e,n):void 0!==i?"param"===r?function(t,e,n){var r=e[t.name];return t.array?(Object(p.y)(r)||Object(p.l)("Expected an array of sub-parameters. Instead: "+Object(p.V)(r)),r.map((function(e){return VF(t,e,n)}))):VF(t,r,n)}(t,e,n):"projection"===r?n.projectionRef(e[t.name]):t.array&&!pD(i)?i.map((function(e){return WF(t,e,n)})):WF(t,i,n):void(t.required&&Object(p.l)("Missing required "+Object(p.V)(e.type)+" parameter: "+Object(p.V)(t.name)))}function WF(t,e,n){var r=t.type;if(pD(e))return HF(r)?Object(p.l)("Expression references can not be signals."):XF(r)?n.fieldRef(e):GF(r)?n.compareRef(e):n.signalRef(e.signal);var i,a=t.expr||XF(r);return a&&((i=e)&&i.expr)?n.exprRef(e.expr,e.as):a&&function(t){return t&&t.field}(e)?oD(e.field,e.as):HF(r)?nD(e,n):function(t){return"data"===t}(r)?uD(n.getData(e).values):XF(r)?oD(e):GF(r)?n.compareRef(e):e}function VF(t,e,n){var r,i,a,u,o;for(u=0,o=t.params.length;u<o;++u){for(a in(i=t.params[u]).key)if(i.key[a]!==e[a]){i=null;break}if(i)break}return i||Object(p.l)("Unsupported parameter: "+Object(p.V)(e)),r=Object(p.m)($F(i,e,n),i.key),uD(n.add(uC(r)))}function HF(t){return"expr"===t}function XF(t){return"field"===t}function GF(t){return"compare"===t}function ZF(t,e){return t.$ref?t:t.data&&t.data.$ref?t.data:uD(e.getData(t.data).output)}function JF(t,e,n,r,i){this.scope=t,this.input=e,this.output=n,this.values=r,this.aggregate=i,this.index={}}JF.fromEntries=function(t,e){var n=e.length,r=1,i=e[0],a=e[n-1],u=e[n-2],o=null;for(i&&"load"===i.type&&(i=e[1]),t.add(e[0]);r<n;++r)e[r].params.pulse=uD(e[r-1]),t.add(e[r]),"aggregate"===e[r].type&&(o=e[r]);return new JF(t,i,u,a,o)};var QF=JF.prototype;function KF(t){return Object(p.F)(t)?t:null}function tS(t,e,n){var r,i=fD(n.op,n.field);if(e.ops){for(var a=0,u=e.as.length;a<u;++a)if(e.as[a]===i)return}else e.ops=["count"],e.fields=[null],e.as=["count"];n.op&&(e.ops.push((r=n.op.signal)?t.signalRef(r):n.op),e.fields.push(t.fieldRef(n.field)),e.as.push(i))}function eS(t,e,n,r,i,a,u){var o,s,l=e[n]||(e[n]={}),c=function(t){return Object(p.D)(t)?(t.order===cD?"-":"+")+fD(t.op,t.field):""}(a),f=KF(i);if(null!=f&&(t=e.scope,o=l[f+=c?"|"+c:""]),!o){var h=a?{field:sD,pulse:e.countsRef(t,i,a)}:{field:t.fieldRef(i),pulse:uD(e.output)};c&&(h.sort=t.sortRef(a)),s=t.add(iD(r,void 0,h)),u&&(e.index[i]=s),o=uD(s),null!=f&&(l[f]=o)}return o}QF.countsRef=function(t,e,n){var r,i,a,u=this.counts||(this.counts={}),o=KF(e);return null!=o&&(t=this.scope,r=u[o]),r?n&&n.field&&tS(t,r.agg.params,n):(a={groupby:t.fieldRef(e,"key"),pulse:uD(this.output)},n&&n.field&&tS(t,a,n),i=t.add($D(a)),r=t.add(VD({pulse:uD(i)})),r={agg:i,ref:uD(r)},null!=o&&(u[o]=r)),r.ref},QF.tuplesRef=function(){return uD(this.values)},QF.extentRef=function(t,e){return eS(t,this,"extent","extent",e,!1)},QF.domainRef=function(t,e){return eS(t,this,"domain","values",e,!1)},QF.valuesRef=function(t,e,n){return eS(t,this,"vals","values",e,n||!0)},QF.lookupRef=function(t,e){return eS(t,this,"lookup","tupleindex",e,!1)},QF.indataRef=function(t,e){return eS(t,this,"indata","tupleindex",e,!0,!0)};var nS=function(t,e,n){var r,i,a=t.remove,u=t.insert,o=t.toggle,s=t.modify,l=t.values,c=e.add(aD());r="if("+t.trigger+',modify("'+n+'",'+[u,a,o,s,l].map((function(t){return null==t?"null":t})).join(",")+"),0)",i=nD(r,e),c.update=i.$expr,c.params=i.$params},rS=function(t,e){var n,r,i,a,u,o,s,l,c,f,h,d,g,m,v=LF(t),y=t.type===xF,b=t.from&&t.from.facet,_=t.layout||"scope"===v||v===uF,x=v===aF||_||b,w=t.overlap;i=function(t,e,n){var r,i,a,u,o;return t?(r=t.facet)&&(e||Object(p.l)("Only group marks can be faceted."),null!=r.field?u=o=ZF(r,n):(t.data?o=uD(n.getData(t.data).aggregate):((a=IF(Object(p.m)({type:"aggregate",groupby:Object(p.g)(r.groupby)},r.aggregate),n)).params.key=n.keyRef(r.groupby),a.params.pulse=ZF(r,n),u=o=uD(n.add(a))),i=n.keyRef(r.groupby,!0))):u=uD(n.add(VD(null,[{}]))),u||(u=ZF(t,n)),{key:i,pulse:u,parent:o}}(t.from,y,e),f=uD(r=e.add(XD({key:i.key||(t.key?oD(t.key):void 0),pulse:i.pulse,clean:!y}))),r=a=e.add(VD({pulse:f})),r=e.add(nC({markdef:UF(t),interactive:qF(t.interactive,e),clip:NF(t.clip,e),context:{$context:!0},groups:e.lookup(),parent:e.signals.parent?e.signalRef("parent"):null,index:e.markpath(),pulse:uD(r)})),h=uD(r),(r=u=e.add(GD(dF(t.encode,t.type,v,t.style,e,{mod:!1,pulse:h})))).params.parent=e.encode(),t.transform&&t.transform.forEach((function(t){const n=IF(t,e),i=n.metadata;(i.generates||i.changes)&&Object(p.l)("Mark transforms should not generate new data."),i.nomod||(u.params.mod=!0),n.params.pulse=uD(r),e.add(r=n)})),t.sort&&(r=e.add(pC({sort:e.compareRef(t.sort),pulse:uD(r)}))),d=uD(r),(b||_)&&(g=uD(_=e.add(gC({layout:e.objectProperty(t.layout),legends:e.legends,mark:h,pulse:d})))),m=uD(o=e.add(WD({mark:h,pulse:g||d}))),y&&(x&&((n=e.operators).pop(),_&&n.pop()),e.pushState(d,g||m,f),b?function(t,e,n){var r,i,a,u,o=t.from.facet,s=o.name,l=ZF(o,e);o.name||Object(p.l)("Facet must have a name: "+Object(p.V)(o)),o.data||Object(p.l)("Facet must reference a data set: "+Object(p.V)(o)),o.field?u=e.add(oC({field:e.fieldRef(o.field),pulse:l})):o.groupby?u=e.add(JD({key:e.keyRef(o.groupby),group:uD(e.proxy(n.parent)),pulse:l})):Object(p.l)("Facet must specify groupby or field: "+Object(p.V)(o)),i=(r=e.fork()).add(VD()),a=r.add(dC({pulse:uD(i)})),r.addData(s,new JF(r,i,i,a)),r.addSignal("parent",null),u.params.subflow={$subflow:gS(t,r).toRuntime()}}(t,e,i):x?function(t,e,n){var r=e.add(oC({pulse:n.pulse})),i=e.fork();i.add(dC()),i.addSignal("parent",null),r.params.subflow={$subflow:gS(t,i).toRuntime()}}(t,e,i):gS(t,e),e.popState(),x&&(_&&n.push(_),n.push(o))),w&&(m=function(t,e,n){var r,i=t.method,a=t.bound,u=t.separation,o={separation:pD(u)?n.signalRef(u.signal):u,method:pD(i)?n.signalRef(i.signal):i,pulse:e};t.order&&(o.sort=n.compareRef({field:t.order}));a&&(r=a.tolerance,o.boundTolerance=pD(r)?n.signalRef(r.signal):+r,o.boundScale=n.scaleRef(a.scale),o.boundOrient=a.orient);return uD(n.add(aC(o)))}(w,m,e)),s=e.add(fC({pulse:m})),l=e.add(dC({pulse:uD(s)},void 0,e.parent())),null!=t.name&&(c=t.name,e.addData(c,new JF(e,a,s,l)),t.on&&t.on.forEach((function(t){(t.insert||t.remove||t.toggle)&&Object(p.l)("Marks only support modify triggers."),nS(t,e,c)})))};var iS=function(t,e){var n,r,i,a,u,o,s,l,c,f=e.config.legend,h=t.encode||{},d=h.legend||{},g=d.name||void 0,m=d.interactive,v=d.style,y=vF(t,f),b=$C.reduce((function(e,n){return e||t[n]}),0);return b||Object(p.l)("Missing valid scale for legend."),u=function(t,e){var n=t.type||UC;t.type||1!==function(t){return $C.reduce((function(e,n){return e+(t[n]?1:0)}),0)}(t)||!t.fill&&!t.stroke||(n=Wf(e)?qC:Hf(e)?IC:UC);return n!==qC?n:Hf(e)?IC:qC}(t,e.scaleType(b)),o={title:null!=t.title,type:u,vgrad:"symbol"!==u&&y.isVertical()},s=uD(e.add(VD(null,[o]))),d=hF(function(t,e){var n={enter:{},update:{}};return fF(n,{orient:t("orient"),offset:t("offset"),padding:t("padding"),titlePadding:t("titlePadding"),cornerRadius:t("cornerRadius"),fill:t("fillColor"),stroke:t("strokeColor"),strokeWidth:e.strokeWidth,strokeDash:e.strokeDash,x:t("legendX"),y:t("legendY")}),n}(y,f),d,YC),n={enter:{x:{value:0},y:{value:0}}},l=uD(e.add(tC(i={type:u,scale:e.scaleRef(b),count:e.objectProperty(y("tickCount")),limit:e.property(y("symbolLimit")),values:e.objectProperty(t.values),minstep:e.property(t.tickMinStep),formatType:e.property(t.formatType),formatSpecifier:e.property(t.format)}))),u===qC?(a=[AF(t,b,f,h.gradient),MF(t,f,h.labels,l)],i.count=i.count||e.signalRef(`max(2,2*floor((${vD(y.gradientLength())})/100))`)):u===IC?a=[OF(t,b,f,h.gradient,l),MF(t,f,h.labels,l)]:(r=function(t,e){const n=vF(t,e);return{align:n("gridAlign"),columns:n.entryColumns(),center:{row:!0,column:!1},padding:{row:n("rowPadding"),column:n("columnPadding")}}}(t,f),a=[EF(t,f,h,l,vD(r.columns))],i.size=function(t,e,n){var r=vD(aS("size",t,n)),i=vD(aS("strokeWidth",t,n)),a=vD(function(t,e,n){return yF("fontSize",t)||function(t,e,n){var r=e.config.style[n];return r&&r[t]}("fontSize",e,n)}(n[1].encode,e,NC));return nD(`max(ceil(sqrt(${r})+${i}),${a})`,e)}(t,e,a[0].marks)),a=[kF("legend-entry",null,null,s,m,n,a,r)],o.title&&a.push(function(t,e,n,r){var i,a=vF(t,e);return fF(i={enter:{opacity:WC},update:{opacity:VC,x:{field:{group:"padding"}},y:{field:{group:"padding"}}},exit:{opacity:WC}},{orient:a("titleOrient"),_anchor:a("titleAnchor"),anchor:{signal:TF},angle:{signal:RF},align:{signal:BF},baseline:{signal:zF},text:t.title,fill:a("titleColor"),fillOpacity:a("titleOpacity"),font:a("titleFont"),fontSize:a("titleFontSize"),fontStyle:a("titleFontStyle"),fontWeight:a("titleFontWeight"),limit:a("titleLimit"),lineHeight:a("titleLineHeight")},{align:a("titleAlign"),baseline:a("titleBaseline")}),mF(wF,"legend-title","guide-title",null,r,i,n)}(t,f,h.title,s)),c=kF("legend",v,g,s,m,d,a),t.zindex&&(c.zindex=t.zindex),rS(c,e)};function aS(t,e,n){return e[t]?`scale("${e[t]}",datum)`:yF(t,n[0].encode)}const uS='item.orient==="left"?-90:item.orient==="right"?90:0';var oS=function(t,e){var n,r,i=vF(t=Object(p.F)(t)?{text:t}:t,e.config.title),a=t.encode||{},u=a.group||{},o=u.name||void 0,s=u.interactive,l=u.style,c=[];return n=uD(e.add(VD(null,[{}]))),c.push(function(t,e,n,r){var i={value:0},a=t.text,u={enter:{opacity:i},update:{opacity:{value:1}},exit:{opacity:i}};return fF(u,{text:a,align:{signal:"item.mark.group.align"},angle:{signal:"item.mark.group.angle"},limit:{signal:"item.mark.group.limit"},baseline:"top",dx:e("dx"),dy:e("dy"),fill:e("color"),font:e("font"),fontSize:e("fontSize"),fontStyle:e("fontStyle"),fontWeight:e("fontWeight"),lineHeight:e("lineHeight")},{align:e("align"),angle:e("angle"),baseline:e("baseline")}),mF(wF,oF,PC,null,r,u,n)}(t,i,function(t){const e=t.encode;return e&&e.title||Object(p.m)({name:t.name,interactive:t.interactive,style:t.style},e)}(t),n)),t.subtitle&&c.push(function(t,e,n,r){var i={value:0},a=t.subtitle,u={enter:{opacity:i},update:{opacity:{value:1}},exit:{opacity:i}};return fF(u,{text:a,align:{signal:"item.mark.group.align"},angle:{signal:"item.mark.group.angle"},limit:{signal:"item.mark.group.limit"},baseline:"top",dx:e("dx"),dy:e("dy"),fill:e("subtitleColor"),font:e("subtitleFont"),fontSize:e("subtitleFontSize"),fontStyle:e("subtitleFontStyle"),fontWeight:e("subtitleFontWeight"),lineHeight:e("subtitleLineHeight")},{align:e("align"),angle:e("angle"),baseline:e("baseline")}),mF(wF,sF,LC,null,r,u,n)}(t,i,a.subtitle,n)),r=kF("title",l,o,n,s,function(t,e){var n={enter:{},update:{}};return fF(n,{orient:t("orient"),anchor:t("anchor"),align:{signal:_F},angle:{signal:uS},limit:t("limit"),frame:t("frame"),offset:t("offset")||0,padding:t("subtitlePadding")}),hF(n,e,YC)}(i,u),c),t.zindex&&(r.zindex=t.zindex),rS(r,e)};function sS(t,e){var n=[];t.transform&&t.transform.forEach((function(t){n.push(IF(t,e))})),t.on&&t.on.forEach((function(n){nS(n,e,t.name)})),e.addDataPipeline(t.name,function(t,e,n){var r,i,a,u,o,s=[],l=null,c=!1,f=!1;t.values?gD(t.values)||gD(t.format)?(s.push(cS(e,t)),s.push(l=lS())):s.push(l=lS({$ingest:t.values,$format:t.format})):t.url?gD(t.url)||gD(t.format)?(s.push(cS(e,t)),s.push(l=lS())):s.push(l=lS({$request:t.url,$format:t.format})):t.source&&(l=r=Object(p.g)(t.source).map((function(t){return uD(e.getData(t).output)})),s.push(null));for(i=0,a=n.length;i<a;++i)u=n[i],o=u.metadata,l||o.source||s.push(l=lS()),s.push(u),o.generates&&(f=!0),o.modifies&&!f&&(c=!0),o.source?l=u:o.changes&&(l=null);r&&(a=r.length-1,s[0]=cC({derive:c,pulse:a?r:r[0]}),(c||a)&&s.splice(1,0,lS()));l||s.push(lS());return s.push(dC({})),s}(t,e,n))}function lS(t){var e=VD({},t);return e.metadata={source:!0},e}function cS(t,e){return eC({url:e.url?t.property(e.url):void 0,values:e.values?t.property(e.values):void 0,format:t.objectProperty(e.format)})}function fS(t,e){return{scale:t.scale,range:e}}var hS=function(t,e,n,r){var i,a,u,o,s,l,c,f,h,d=vF(t,e),g=t.orient,m=t.gridScale,v="left"===g||"top"===g?1:-1,y=function(t,e){if(1===e);else if(Object(p.D)(t)){for(var n=t=Object(p.m)({},t);null!=n.mult;){if(!Object(p.D)(n.mult))return n.mult*=e,t;n=n.mult=Object(p.m)({},n.mult)}n.mult=e}else t=e*(t||0);return t}(t.offset,v);return fF(i={enter:a={opacity:WC},update:o={opacity:VC},exit:u={opacity:WC}},{stroke:d("gridColor"),strokeDash:d("gridDash"),strokeDashOffset:d("gridDashOffset"),strokeOpacity:d("gridOpacity"),strokeWidth:d("gridWidth")}),s={scale:t.scale,field:zC,band:d("bandPosition"),round:d("tickRound"),extra:d("tickExtra"),offset:d("tickOffset")},"top"===g||"bottom"===g?(l="x",c="y",h="height"):(l="y",c="x",h="width"),f=c+"2",o[l]=a[l]=u[l]=s,m?(o[c]=a[c]={scale:m,range:0,mult:v,offset:y},o[f]=a[f]={scale:m,range:1,mult:v,offset:y}):(o[c]=a[c]={value:0,offset:y},o[f]=a[f]={signal:h,mult:v,offset:y}),mF("rule","axis-grid",null,zC,r,i,n)};function dS(t,e,n,r,i){return{signal:'flush(range("'+t+'"), scale("'+t+'", datum.value), '+e+","+n+","+r+","+i+")"}}var pS=function(t,e){var n,r,i,a,u,o,s=function(t,e){var n=e.config,r=t.orient,i="top"===r||"bottom"===r?n.axisX:n.axisY,a=n["axis"+r[0].toUpperCase()+r.slice(1)],u="band"===e.scaleType(t.scale)&&n.axisBand;return i||a||u?Object(p.m)({},n.axis,i,a,u):n.axis}(t,e),l=t.encode||{},c=l.axis||{},f=c.name||void 0,h=c.interactive,d=c.style,g=vF(t,s);return n={orient:t.orient,ticks:!!g("ticks"),labels:!!g("labels"),grid:!!g("grid"),domain:!!g("domain"),title:null!=t.title},r=uD(e.add(VD({},[n]))),c=hF({update:{offset:lF(g("offset")||0),position:lF(mD(t.position,0)),titlePadding:lF(g("titlePadding")),minExtent:lF(g("minExtent")),maxExtent:lF(g("maxExtent")),range:{signal:`abs(span(range("${t.scale}")))`}}},l.axis,YC),i=uD(e.add(YD({scale:e.scaleRef(t.scale),extra:e.property(g("tickExtra")),count:e.objectProperty(t.tickCount),values:e.objectProperty(t.values),minstep:e.property(t.tickMinStep),formatType:e.property(t.formatType),formatSpecifier:e.property(t.format)}))),o=[],n.grid&&o.push(hS(t,s,l.grid,i)),n.ticks&&(a=g("tickSize"),o.push(function(t,e,n,r,i){var a,u,o,s,l,c,f=vF(t,e),h=t.orient,d="left"===h||"top"===h?-1:1;return fF(a={enter:u={opacity:WC},update:s={opacity:VC},exit:o={opacity:WC}},{stroke:f("tickColor"),strokeDash:f("tickDash"),strokeDashOffset:f("tickDashOffset"),strokeOpacity:f("tickOpacity"),strokeWidth:f("tickWidth")}),(l=lF(i)).mult=d,c={scale:t.scale,field:zC,band:f("bandPosition"),round:f("tickRound"),extra:f("tickExtra"),offset:f("tickOffset")},"top"===h||"bottom"===h?(s.y=u.y=WC,s.y2=u.y2=l,s.x=u.x=o.x=c):(s.x=u.x=WC,s.x2=u.x2=l,s.y=u.y=o.y=c),mF("rule","axis-tick",null,zC,r,a,n)}(t,s,l.ticks,i,a))),n.labels&&(a=n.ticks?a:0,o.push(function(t,e,n,r,i){var a,u,o,s,l,c,f,h,d,p,g=vF(t,e),m=t.orient,v="left"===m||"top"===m?-1:1,y="top"===m||"bottom"===m,b=t.scale,_=vD(g("labelFlush")),x=vD(g("labelFlushOffset")),w=0===_||!!_,A=g("labelAlign"),O=g("labelBaseline");return(o=lF(i)).mult=v,o.offset=lF(g("labelPadding")||0),o.offset.mult=v,s={scale:b,field:zC,band:.5,offset:g("tickOffset")},y?(l=A||(w?dS(b,_,'"left"','"right"','"center"'):"center"),c=O||("top"===m?"bottom":"top"),f=!A):(l=A||("right"===m?"left":"right"),c=O||(w?dS(b,_,'"top"','"bottom"','"middle"'):"middle"),f=!O),f=f&&w&&x?dS(b,_,"-("+x+")",x,0):null,fF(a={enter:u={opacity:WC,x:y?s:o,y:y?o:s},update:{opacity:VC,text:{field:"label"},x:u.x,y:u.y},exit:{opacity:WC,x:u.x,y:u.y}},{[y?"dx":"dy"]:f,align:l,baseline:c,angle:g("labelAngle"),fill:g("labelColor"),fillOpacity:g("labelOpacity"),font:g("labelFont"),fontSize:g("labelFontSize"),fontWeight:g("labelFontWeight"),fontStyle:g("labelFontStyle"),limit:g("labelLimit")}),h=g("labelBound"),d=g("labelOverlap"),p=g("labelSeparation"),t=mF(wF,"axis-label",NC,zC,r,a,n),(d||h)&&(t.overlap={separation:p,method:d,order:"datum.index",bound:h?{scale:b,orient:m,tolerance:h}:null}),t}(t,s,l.labels,i,a))),n.domain&&o.push(function(t,e,n,r){var i,a,u,o,s,l,c=vF(t,e),f=t.orient;return fF(i={enter:a={opacity:WC},update:u={opacity:VC},exit:{opacity:WC}},{stroke:c("domainColor"),strokeDash:c("domainDash"),strokeDashOffset:c("domainDashOffset"),strokeWidth:c("domainWidth"),strokeOpacity:c("domainOpacity")}),"top"===f||"bottom"===f?(o="x",l="y"):(o="y",l="x"),s=o+"2",a[l]=WC,u[o]=a[o]=fS(t,0),u[s]=a[s]=fS(t,1),mF("rule","axis-domain",null,null,r,i,n)}(t,s,l.domain,r)),n.title&&o.push(function(t,e,n,r){var i,a,u,o,s=vF(t,e),l=t.orient,c="left"===l||"top"===l?-1:1,f="top"===l||"bottom"===l;return i={enter:a={opacity:WC,anchor:lF(s("titleAnchor")),align:{signal:_F}},update:u=Object(p.m)({},a,{opacity:VC,text:lF(t.title)}),exit:{opacity:WC}},o={signal:`lerp(range("${t.scale}"), ${bF(0,1,.5)})`},f?(u.x=o,a.angle={value:0},a.baseline={value:"top"===l?"bottom":"top"}):(u.y=o,a.angle={value:90*c},a.baseline={value:"bottom"}),fF(i,{angle:s("titleAngle"),baseline:s("titleBaseline"),fill:s("titleColor"),fillOpacity:s("titleOpacity"),font:s("titleFont"),fontSize:s("titleFontSize"),fontStyle:s("titleFontStyle"),fontWeight:s("titleFontWeight"),limit:s("titleLimit"),lineHeight:s("titleLineHeight")},{align:s("titleAlign")}),!cF(i,"x",s("titleX"),"update")&&!f&&!gF("x",n)&&(i.enter.auto={value:!0}),!cF(i,"y",s("titleY"),"update")&&f&&!gF("y",n)&&(i.enter.auto={value:!0}),mF(wF,"axis-title","guide-title",null,r,i,n)}(t,s,l.title,r)),u=kF("axis",d,f,r,h,c,o),t.zindex&&(u.zindex=t.zindex),rS(u,e)},gS=function(t,e,n){var r=Object(p.g)(t.signals),i=Object(p.g)(t.scales);return n||r.forEach(t=>eD(t,e)),Object(p.g)(t.projections).forEach(t=>(function(t,e){var n=e.config.projection||{},r={};for(var i in t)"name"!==i&&(r[i]=SC(t[i],i,e));for(i in n)null==r[i]&&(r[i]=SC(n[i],i,e));e.addProjection(t.name,r)})(t,e)),i.forEach(t=>bC(t,e)),Object(p.g)(t.data).forEach(t=>sS(t,e)),i.forEach(t=>_C(t,e)),(n||r).forEach(t=>(function(t,e){var n=e.getSignal(t.name),r=t.update;t.init&&(r?Object(p.l)("Signals can not include both init and update expressions."):(r=t.init,n.initonly=!0)),r&&(r=nD(r,e),n.update=r.$expr,n.params=r.$params),t.on&&t.on.forEach((function(t){UD(t,e,n.id)}))})(t,e)),Object(p.g)(t.axes).forEach(t=>pS(t,e)),Object(p.g)(t.marks).forEach(t=>rS(t,e)),Object(p.g)(t.legends).forEach(t=>iS(t,e)),t.title&&oS(t.title,e),e.parseLambdas(),e},mS=Object(p.Z)(["width","height","padding","autosize"]);function vS(t,e){var n,r,i,a,u,o,s=e.config;return e.background=t.background||s.background,e.eventConfig=s.events,u=uD(e.root=e.add(aD())),e.addSignal("width",t.width||0),e.addSignal("height",t.height||0),e.addSignal("padding",Jj(t.padding,s)),e.addSignal("autosize",Zj(t.autosize,s)),e.legends=e.objectProperty(s.legend&&s.legend.layout),o=function(t,e,n){if(Object(p.g)(e).forEach(e=>{mS[e.name]||eD(e,t)}),!n)return e;const r=Object(p.g)(e).slice();return Object(p.g)(n).forEach(e=>{t.hasOwnSignal(e.name)||(eD(e,t),r.push(e))}),r}(e,t.signals,s.signals),r=e.add(VD()),i=hF({enter:{x:{value:0},y:{value:0}},update:{width:{signal:"width"},height:{signal:"height"}}},t.encode),i=e.add(GD(dF(i,xF,uF,t.style,e,{pulse:uD(r)}))),a=e.add(gC({layout:e.objectProperty(t.layout),legends:e.legends,autosize:e.signalRef("autosize"),mark:u,pulse:uD(i)})),e.operators.pop(),e.pushState(uD(i),uD(a),null),gS(t,e,o),e.operators.push(a),n=e.add(WD({mark:u,pulse:uD(a)})),n=e.add(fC({pulse:uD(n)})),n=e.add(dC({pulse:uD(n)})),e.addData("root",new JF(e,r,r,n)),e}function yS(t){this.config=t,this.bindings=[],this.field={},this.signals={},this.lambdas={},this.scales={},this.events={},this.data={},this.streams=[],this.updates=[],this.operators=[],this.background=null,this.eventConfig=null,this._id=0,this._subid=0,this._nextsub=[0],this._parent=[],this._encode=[],this._lookup=[],this._markpath=[]}function bS(t){this.config=t.config,this.legends=t.legends,this.field=Object.create(t.field),this.signals=Object.create(t.signals),this.lambdas=Object.create(t.lambdas),this.scales=Object.create(t.scales),this.events=Object.create(t.events),this.data=Object.create(t.data),this.streams=[],this.updates=[],this.operators=[],this._id=0,this._subid=++t._nextsub[0],this._nextsub=t._nextsub,this._parent=t._parent.slice(),this._encode=t._encode.slice(),this._lookup=t._lookup.slice(),this._markpath=t._markpath}var _S=yS.prototype=bS.prototype;function xS(t){return(Object(p.y)(t)?wS:AS)(t)}function wS(t){for(var e,n="[",r=0,i=t.length;r<i;++r)e=t[r],n+=(r>0?",":"")+(Object(p.D)(e)?e.signal||xS(e):Object(p.V)(e));return n+"]"}function AS(t){var e,n,r="{",i=0;for(e in t)n=t[e],r+=(++i>1?",":"")+Object(p.V)(e)+":"+(Object(p.D)(n)?n.signal||xS(n):Object(p.V)(n));return r+"}"}_S.fork=function(){return new bS(this)},_S.isSubscope=function(){return this._subid>0},_S.toRuntime=function(){return this.finish(),{background:this.background,operators:this.operators,streams:this.streams,updates:this.updates,bindings:this.bindings,eventConfig:this.eventConfig}},_S.id=function(){return(this._subid?this._subid+":":0)+this._id++},_S.add=function(t){return this.operators.push(t),t.id=this.id(),t.refs&&(t.refs.forEach((function(e){e.$ref=t.id})),t.refs=null),t},_S.proxy=function(t){var e=t instanceof rD?uD(t):t;return this.add(lC({value:e}))},_S.addStream=function(t){return this.streams.push(t),t.id=this.id(),t},_S.addUpdate=function(t){return this.updates.push(t),t},_S.finish=function(){var t,e;for(t in this.root&&(this.root.root=!0),this.signals)this.signals[t].signal=t;for(t in this.scales)this.scales[t].scale=t;function n(t,e,n){var r;t&&((r=t.data||(t.data={}))[e]||(r[e]=[])).push(n)}for(t in this.data)for(var r in n((e=this.data[t]).input,t,"input"),n(e.output,t,"output"),n(e.values,t,"values"),e.index)n(e.index[r],t,"index:"+r);return this},_S.pushState=function(t,e,n){this._encode.push(uD(this.add(dC({pulse:t})))),this._parent.push(e),this._lookup.push(n?uD(this.proxy(n)):null),this._markpath.push(-1)},_S.popState=function(){this._encode.pop(),this._parent.pop(),this._lookup.pop(),this._markpath.pop()},_S.parent=function(){return Object(p.R)(this._parent)},_S.encode=function(){return Object(p.R)(this._encode)},_S.lookup=function(){return Object(p.R)(this._lookup)},_S.markpath=function(){var t=this._markpath;return++t[t.length-1]},_S.fieldRef=function(t,e){if(Object(p.F)(t))return oD(t,e);t.signal||Object(p.l)("Unsupported field reference: "+Object(p.V)(t));var n,r=t.signal,i=this.field[r];return i||(n={name:this.signalRef(r)},e&&(n.as=e),this.field[r]=i=uD(this.add(QD(n)))),i},_S.compareRef=function(t){function e(t){return pD(t)?(r=!0,n.signalRef(t.signal)):function(t){return t&&t.expr}(t)?(r=!0,n.exprRef(t.expr)):t}var n=this,r=!1,i=Object(p.g)(t.field).map(e),a=Object(p.g)(t.order).map(e);return r?uD(this.add(HD({fields:i,orders:a}))):lD(i,a)},_S.keyRef=function(t,e){var n=this.signals,r=!1;return t=Object(p.g)(t).map((function(t){return pD(t)?(r=!0,uD(n[t.signal])):t})),r?uD(this.add(KD({fields:t,flat:e}))):function(t,e){var n={$key:t};return e&&(n.$flat=!0),n}(t,e)},_S.sortRef=function(t){if(!t)return t;var e=fD(t.op,t.field),n=t.order||"ascending";return n.signal?uD(this.add(HD({fields:e,orders:this.signalRef(n.signal)}))):lD(e,n)},_S.event=function(t,e){var n=t+":"+e;if(!this.events[n]){var r=this.id();this.streams.push({id:r,source:t,type:e}),this.events[n]=r}return this.events[n]},_S.hasOwnSignal=function(t){return Object(p.t)(this.signals,t)},_S.addSignal=function(t,e){this.hasOwnSignal(t)&&Object(p.l)("Duplicate signal name: "+Object(p.V)(t));var n=e instanceof rD?e:this.add(aD(e));return this.signals[t]=n},_S.getSignal=function(t){return this.signals[t]||Object(p.l)("Unrecognized signal name: "+Object(p.V)(t)),this.signals[t]},_S.signalRef=function(t){return this.signals[t]?uD(this.signals[t]):(Object(p.t)(this.lambdas,t)||(this.lambdas[t]=this.add(aD(null))),uD(this.lambdas[t]))},_S.parseLambdas=function(){for(var t=Object.keys(this.lambdas),e=0,n=t.length;e<n;++e){var r=t[e],i=nD(r,this),a=this.lambdas[r];a.params=i.$params,a.update=i.$expr}},_S.property=function(t){return t&&t.signal?this.signalRef(t.signal):t},_S.objectProperty=function(t){return t&&Object(p.D)(t)?this.signalRef(t.signal||xS(t)):t},_S.exprRef=function(t,e){var n={expr:nD(t,this)};return e&&(n.expr.$name=e),uD(this.add(ZD(n)))},_S.addBinding=function(t,e){this.bindings||Object(p.l)("Nested signals do not support binding: "+Object(p.V)(t)),this.bindings.push(Object(p.m)({signal:t},e))},_S.addScaleProj=function(t,e){Object(p.t)(this.scales,t)&&Object(p.l)("Duplicate scale or projection name: "+Object(p.V)(t)),this.scales[t]=this.add(e)},_S.addScale=function(t,e){this.addScaleProj(t,hC(e))},_S.addProjection=function(t,e){this.addScaleProj(t,sC(e))},_S.getScale=function(t){return this.scales[t]||Object(p.l)("Unrecognized scale name: "+Object(p.V)(t)),this.scales[t]},_S.projectionRef=_S.scaleRef=function(t){return uD(this.getScale(t))},_S.projectionType=_S.scaleType=function(t){return this.getScale(t).params.type},_S.addData=function(t,e){return Object(p.t)(this.data,t)&&Object(p.l)("Duplicate data set name: "+Object(p.V)(t)),this.data[t]=e},_S.getData=function(t){return this.data[t]||Object(p.l)("Undefined data set name: "+Object(p.V)(t)),this.data[t]},_S.addDataPipeline=function(t,e){return Object(p.t)(this.data,t)&&Object(p.l)("Duplicate data set name: "+Object(p.V)(t)),this.addData(t,JF.fromEntries(this,e))};var OS=function(t,e){return Object(p.D)(t)||Object(p.l)("Input Vega specification must be an object."),vS(t,new yS(e=Object(p.K)({padding:0,autosize:"pad",background:null,events:{defaults:{allow:["wheel"]}},group:null,mark:null,arc:{fill:"#4c78a8"},area:{fill:"#4c78a8"},image:null,line:{stroke:"#4c78a8",strokeWidth:2},path:{stroke:"#4c78a8"},rect:{fill:"#4c78a8"},rule:{stroke:"#000"},shape:{stroke:"#4c78a8"},symbol:{fill:"#4c78a8",size:64},text:{fill:"#000",font:"sans-serif",fontSize:11},style:{"guide-label":{fill:"#000",font:"sans-serif",fontSize:10},"guide-title":{fill:"#000",font:"sans-serif",fontSize:11,fontWeight:"bold"},"group-title":{fill:"#000",font:"sans-serif",fontSize:13,fontWeight:"bold"},"group-subtitle":{fill:"#000",font:"sans-serif",fontSize:12},point:{size:30,strokeWidth:2,shape:"circle"},circle:{size:30,strokeWidth:2},square:{size:30,strokeWidth:2,shape:"square"},cell:{fill:"transparent",stroke:"#ddd"}},title:{orient:"top",anchor:"middle",offset:4,subtitlePadding:3},axis:{minExtent:0,maxExtent:200,bandPosition:.5,domain:!0,domainWidth:1,domainColor:"#888",grid:!1,gridWidth:1,gridColor:"#ddd",labels:!0,labelAngle:0,labelLimit:180,labelPadding:2,ticks:!0,tickColor:"#888",tickOffset:0,tickRound:!0,tickSize:5,tickWidth:1,titlePadding:4},axisBand:{tickOffset:-1},projection:{type:"mercator"},legend:{orient:"right",padding:0,gridAlign:"each",columnPadding:10,rowPadding:2,symbolDirection:"vertical",gradientDirection:"vertical",gradientLength:200,gradientThickness:16,gradientStrokeColor:"#ddd",gradientStrokeWidth:0,gradientLabelOffset:2,labelAlign:"left",labelBaseline:"middle",labelLimit:160,labelOffset:4,labelOverlap:!0,symbolLimit:30,symbolType:"circle",symbolSize:100,symbolOffset:0,symbolStrokeWidth:1.5,symbolBaseFillColor:"transparent",symbolBaseStrokeColor:"#888",titleLimit:180,titleOrient:"top",titlePadding:5,layout:{offset:18,direction:"horizontal",left:{direction:"vertical"},right:{direction:"vertical"}}},range:{category:{scheme:"tableau10"},ordinal:{scheme:"blues"},heatmap:{scheme:"yellowgreenblue"},ramp:{scheme:"blues"},diverging:{scheme:"blueorange",extent:[1,0]},symbol:["circle","square","triangle-up","cross","diamond","triangle-right","triangle-down","triangle-left"]}},e,t.config))).toRuntime()};Object(p.m)(Hn,r,i,u,o,s,l,c,f,h,d);const MS="http://www.w3.org/2001/XMLSchema#";var kS={xboolean:MS+"boolean",xint:MS+"int",xinteger:MS+"integer",xlong:MS+"long",decimal:MS+"decimal",xfloat:MS+"float",xdouble:MS+"double",xstring:MS+"string",date:MS+"date",dateTime:MS+"dateTime"};class ES{parse(){throw new Error("Not implemented")}unparse(){throw new Error("Not implemented")}}class jS extends ES{parse(t){return parseInt(t,10)}unparse(t){return t.toString()}}class DS extends ES{parse(t){return parseFloat(t)}unparse(t){return t.toString()}}class CS extends ES{parse(t){return t?new Date(t):null}unparse(t){throw new Error("Not implemented")}}let FS={};FS[kS.xint]=new jS,FS[kS.xinteger]=new jS,FS[kS.xfloat]=new DS,FS[kS.xdouble]=new DS,FS[kS.xstring]=new class extends ES{parse(t){return t}unparse(t){return t.toString()}},FS[kS.date]=new CS,FS[kS.dateTime]=new CS,FS[kS.decimal]=new DS;var SS=FS;function BS(t,e){const n=SS[e];if(!n)throw new Error("Internal error: No datatype object for: "+e+"("+typeof e+")");return n.parse(t)}function TS(t){if(!t||void 0===t.type)throw new Error("Invalid node: "+JSON.stringify(t));const e=t.datatype;let n;switch(t.type){case"bnode":n=void 0;break;case"uri":n=t.value;break;case"literal":n=null!=e&&0!==e.length&&""!==e.trim()?BS(t.value,e):t.value;break;case"typed-literal":n=BS(t.value,e);break;default:throw console.log("Unknown type: '"+t.type+"'"),new Error("Bailing out")}return n}function RS(t){t.head.vars;return t.results.bindings.map(t=>(function(t){var e={};for(var n in t){var r=t[n];e[n]=TS(r)}return e})(t))}function zS(t){Wn.call(this,[],t)}zS.Definition={type:"SPARQL",metadata:{generates:!0,changes:!1},params:[{name:"endpoint",type:"string",required:!0},{name:"query",type:"string",required:!0}]},Object(p.w)(zS,Wn).transform=async function(t,e){let n=[];try{n=RS(await async function(t="",e){const n=await fetch(t,{method:"POST",mode:"cors",headers:{"Content-Type":"application/x-www-form-urlencoded",Accept:"application/sparql-results+json"},body:"query="+e});if(n.ok)return await n.json();{const t=await n.json();throw Error((t.error+": "+t.message).replace(/(\r\n|\n|\r)/gm,""))}}(t.endpoint,t.query))}catch(t){console.log(t)}n.forEach(w);const r=e.fork(e.NO_FIELDS&e.NO_SOURCE);return r.rem=this.value,this.value=r.add=r.source=n,r};const NS={$schema:"https://vega.github.io/schema/vega/v5.json",width:700,height:300,padding:5,data:[{name:"table",transform:[{type:"sparql",endpoint:"http://ec2-52-51-177-228.eu-west-1.compute.amazonaws.com/toscana_2.0/sparql/query",query:"PREFIX : <http://www.semanticweb.org/ontologies/2016/4/untitled-ontology-69#>\n          PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n          PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n          PREFIX dce: <http://purl.org/dc/elements/1.1/#>\n          SELECT distinct \n          ?year \n          ?totalFemale \n          ?totalForeignFemale \n          ?totalForeignMale \n          ?totalMale\n          ?organizationName\n          WHERE {\n            ?iscritti a :USTAT-Postgraduate-Iscritti .\n            ?iscritti :academicYear ?year .\n              ?iscritti :totalFemale ?totalFemale .\n              ?iscritti :totalFemale ?totalForeignFemale .\n            ?iscritti :totalFemale ?totalMale .\n              ?iscritti :totalFemale ?totalForeignMale .\n             ?iscritti :organization ?organization . \n            ?organization :extendedName ?organizationName\n          }\n          LIMIT 100"},{type:"aggregate",groupby:["organizationName"],fields:["totalMale"],ops:["sum"],as:["amount"]}]}],signals:[{name:"tooltip",value:{},on:[{events:"rect:mouseover",update:"datum"},{events:"rect:mouseout",update:"{}"}]}],scales:[{name:"yscale",type:"band",domain:{data:"table",field:"organizationName"},range:"height",padding:.05,round:!0},{name:"xscale",domain:{data:"table",field:"amount"},nice:!0,range:"width"}],axes:[{orient:"bottom",scale:"xscale"},{orient:"left",scale:"yscale"}],marks:[{type:"rect",from:{data:"table"},encode:{enter:{width:{scale:"xscale",field:"amount"},height:{scale:"yscale",band:1},y:{scale:"yscale",field:"organizationName"},x:{scale:"xscale",value:0}},update:{fill:{value:"steelblue"}},hover:{fill:{value:"red"}}}}]},PS={$schema:"https://vega.github.io/schema/vega/v5.json",width:700,height:400,padding:5,config:{axisY:{titleX:-2,titleY:410,titleAngle:0,titleAlign:"right",titleBaseline:"top"}},data:[{name:"element_dimensions",transform:[{type:"sparql",endpoint:"https://query.wikidata.org/sparql",query:'SELECT ?elementLabel ?boiling_point ?melting_point ?electronegativity ?density ?mass WHERE {\n            ?element wdt:P31 wd:Q11344;\n               wdt:P2102 ?boiling_point;\n               wdt:P2101 ?melting_point;\n               wdt:P1108 ?electronegativity;\n               wdt:P2054 ?density;\n               wdt:P2067 ?mass.\n              SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en" }\n            }\n            LIMIT 100'}]},{name:"fields",values:["electronegativity","boiling_point","density","melting_point","mass","elementLabel"]}],scales:[{name:"ord",type:"point",range:"width",round:!0,domain:{data:"fields",field:"data"}},{name:"electronegativity",type:"linear",range:"height",zero:!1,nice:!0,domain:{data:"element_dimensions",field:"electronegativity"}},{name:"boiling_point",type:"linear",range:"height",zero:!1,nice:!0,domain:{data:"element_dimensions",field:"boiling_point"}},{name:"density",type:"linear",range:"height",zero:!1,nice:!0,domain:{data:"element_dimensions",field:"density"}},{name:"melting_point",type:"linear",range:"height",zero:!1,nice:!0,domain:{data:"element_dimensions",field:"melting_point"}},{name:"mass",type:"linear",range:"height",zero:!1,nice:!0,domain:{data:"element_dimensions",field:"mass"}},{name:"elementLabel",type:"band",range:"height",zero:!1,nice:!0,domain:{data:"element_dimensions",field:"elementLabel"}}],axes:[{orient:"left",zindex:1,scale:"elementLabel",title:"elementLabel",offset:{scale:"ord",value:"elementLabel",mult:-1}},{orient:"left",zindex:1,scale:"electronegativity",title:"electronegativity",offset:{scale:"ord",value:"electronegativity",mult:-1}},{orient:"left",zindex:1,scale:"boiling_point",title:"boiling_point",offset:{scale:"ord",value:"boiling_point",mult:-1}},{orient:"left",zindex:1,scale:"density",title:"density",offset:{scale:"ord",value:"density",mult:-1}},{orient:"left",zindex:1,scale:"melting_point",title:"melting_point",offset:{scale:"ord",value:"melting_point",mult:-1}},{orient:"left",zindex:1,scale:"mass",title:"mass",offset:{scale:"ord",value:"mass",mult:-1}}],marks:[{type:"group",from:{data:"element_dimensions"},marks:[{type:"line",from:{data:"fields"},encode:{enter:{x:{scale:"ord",field:"data"},y:{scale:{datum:"data"},field:{parent:{datum:"data"}}},stroke:{value:"steelblue"},strokeWidth:{value:1.01},strokeOpacity:{value:.3}}}}]}]};Hn.sparql=zS;const LS=new Yj(OS(NS)).initialize(document.querySelector("#vis-endpoint-unics")),US=new Yj(OS(PS)).initialize(document.querySelector("#vis-endpoint-wikidata"));LS.runAsync(),US.runAsync()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,